---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ abi_encoding_stress.fe:2:5
  │
2 │     pub my_num: u256
  │     ^^^^^^^^^^^^^^^^ u256
3 │     pub my_num2: u8
  │     ^^^^^^^^^^^^^^^ u8
4 │     pub my_bool: bool
  │     ^^^^^^^^^^^^^^^^^ bool
5 │     pub my_addr: address
  │     ^^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ abi_encoding_stress.fe:9:5
   │
 9 │     pub my_addrs: Array<address, 5>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
10 │     pub my_u128: u128
   │     ^^^^^^^^^^^^^^^^^ u128
11 │     pub my_string: String<10>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^ String<10>
12 │     pub my_u16s: Array<u16, 255>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u16, 255>
13 │     pub my_bool: bool
   │     ^^^^^^^^^^^^^^^^^ bool
14 │     pub my_bytes: Array<u8, 100>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 100>

note: 
   ┌─ abi_encoding_stress.fe:18:5
   │
18 │     my_addrs: Array<address, 5>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
19 │     my_u128: u128
   │     ^^^^^^^^^^^^^ u128
20 │     my_string: String<10>
   │     ^^^^^^^^^^^^^^^^^^^^^ String<10>
21 │     my_u16s: Array<u16, 255>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^ Array<u16, 255>
22 │     my_bool: bool
   │     ^^^^^^^^^^^^^ bool
23 │     my_bytes: Array<u8, 100>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 100>

note: 
   ┌─ abi_encoding_stress.fe:25:5
   │  
25 │ ╭     pub fn set_my_addrs(mut self, my_addrs: Array<address, 5>) {
26 │ │         self.my_addrs = my_addrs
27 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_addrs, typ: Array<address, 5> }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:26:9
   │
26 │         self.my_addrs = my_addrs
   │         ^^^^ mut Foo

note: 
   ┌─ abi_encoding_stress.fe:26:9
   │
26 │         self.my_addrs = my_addrs
   │         ^^^^^^^^^^^^^   ^^^^^^^^ Array<address, 5>
   │         │                
   │         mut SPtr<Array<address, 5>>

note: 
   ┌─ abi_encoding_stress.fe:29:5
   │  
29 │ ╭     pub fn get_my_addrs(self) -> Array<address, 5> {
30 │ │         return self.my_addrs.to_mem()
31 │ │     }
   │ ╰─────^ params: [self] -> Array<address, 5>

note: 
   ┌─ abi_encoding_stress.fe:30:16
   │
30 │         return self.my_addrs.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ abi_encoding_stress.fe:30:16
   │
30 │         return self.my_addrs.to_mem()
   │                ^^^^^^^^^^^^^ SPtr<Array<address, 5>>

note: 
   ┌─ abi_encoding_stress.fe:30:16
   │
30 │         return self.my_addrs.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>

note: 
   ┌─ abi_encoding_stress.fe:33:5
   │  
33 │ ╭     pub fn set_my_u128(mut self, my_u128: u128) {
34 │ │         self.my_u128 = my_u128
35 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_u128, typ: u128 }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:34:9
   │
34 │         self.my_u128 = my_u128
   │         ^^^^ mut Foo

note: 
   ┌─ abi_encoding_stress.fe:34:9
   │
34 │         self.my_u128 = my_u128
   │         ^^^^^^^^^^^^   ^^^^^^^ u128
   │         │               
   │         mut SPtr<u128>

note: 
   ┌─ abi_encoding_stress.fe:37:5
   │  
37 │ ╭     pub fn get_my_u128(self) -> u128 {
38 │ │         return self.my_u128
39 │ │     }
   │ ╰─────^ params: [self] -> u128

note: 
   ┌─ abi_encoding_stress.fe:38:16
   │
38 │         return self.my_u128
   │                ^^^^ Foo

note: 
   ┌─ abi_encoding_stress.fe:38:16
   │
38 │         return self.my_u128
   │                ^^^^^^^^^^^^ SPtr<u128> -Load-> u128

note: 
   ┌─ abi_encoding_stress.fe:41:5
   │  
41 │ ╭     pub fn set_my_string(mut self, my_string: String<10>) {
42 │ │         self.my_string = my_string
43 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_string, typ: String<10> }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:42:9
   │
42 │         self.my_string = my_string
   │         ^^^^ mut Foo

note: 
   ┌─ abi_encoding_stress.fe:42:9
   │
42 │         self.my_string = my_string
   │         ^^^^^^^^^^^^^^   ^^^^^^^^^ String<10>
   │         │                 
   │         mut SPtr<String<10>>

note: 
   ┌─ abi_encoding_stress.fe:45:5
   │  
45 │ ╭     pub fn get_my_string(self) -> String<10> {
46 │ │         return self.my_string.to_mem()
47 │ │     }
   │ ╰─────^ params: [self] -> String<10>

note: 
   ┌─ abi_encoding_stress.fe:46:16
   │
46 │         return self.my_string.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ abi_encoding_stress.fe:46:16
   │
46 │         return self.my_string.to_mem()
   │                ^^^^^^^^^^^^^^ SPtr<String<10>>

note: 
   ┌─ abi_encoding_stress.fe:46:16
   │
46 │         return self.my_string.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^ String<10>

note: 
   ┌─ abi_encoding_stress.fe:49:5
   │  
49 │ ╭     pub fn set_my_u16s(mut self, my_u16s: Array<u16, 255>) {
50 │ │         self.my_u16s = my_u16s
51 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_u16s, typ: Array<u16, 255> }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:50:9
   │
50 │         self.my_u16s = my_u16s
   │         ^^^^ mut Foo

note: 
   ┌─ abi_encoding_stress.fe:50:9
   │
50 │         self.my_u16s = my_u16s
   │         ^^^^^^^^^^^^   ^^^^^^^ Array<u16, 255>
   │         │               
   │         mut SPtr<Array<u16, 255>>

note: 
   ┌─ abi_encoding_stress.fe:53:5
   │  
53 │ ╭     pub fn get_my_u16s(self) -> Array<u16, 255> {
54 │ │         return self.my_u16s.to_mem()
55 │ │     }
   │ ╰─────^ params: [self] -> Array<u16, 255>

note: 
   ┌─ abi_encoding_stress.fe:54:16
   │
54 │         return self.my_u16s.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ abi_encoding_stress.fe:54:16
   │
54 │         return self.my_u16s.to_mem()
   │                ^^^^^^^^^^^^ SPtr<Array<u16, 255>>

note: 
   ┌─ abi_encoding_stress.fe:54:16
   │
54 │         return self.my_u16s.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u16, 255>

note: 
   ┌─ abi_encoding_stress.fe:57:5
   │  
57 │ ╭     pub fn set_my_bool(mut self, my_bool: bool) {
58 │ │         self.my_bool = my_bool
59 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_bool, typ: bool }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:58:9
   │
58 │         self.my_bool = my_bool
   │         ^^^^ mut Foo

note: 
   ┌─ abi_encoding_stress.fe:58:9
   │
58 │         self.my_bool = my_bool
   │         ^^^^^^^^^^^^   ^^^^^^^ bool
   │         │               
   │         mut SPtr<bool>

note: 
   ┌─ abi_encoding_stress.fe:61:5
   │  
61 │ ╭     pub fn get_my_bool(self) -> bool {
62 │ │         return self.my_bool
63 │ │     }
   │ ╰─────^ params: [self] -> bool

note: 
   ┌─ abi_encoding_stress.fe:62:16
   │
62 │         return self.my_bool
   │                ^^^^ Foo

note: 
   ┌─ abi_encoding_stress.fe:62:16
   │
62 │         return self.my_bool
   │                ^^^^^^^^^^^^ SPtr<bool> -Load-> bool

note: 
   ┌─ abi_encoding_stress.fe:65:5
   │  
65 │ ╭     pub fn set_my_bytes(mut self, my_bytes: Array<u8, 100>) {
66 │ │         self.my_bytes = my_bytes
67 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_bytes, typ: Array<u8, 100> }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:66:9
   │
66 │         self.my_bytes = my_bytes
   │         ^^^^ mut Foo

note: 
   ┌─ abi_encoding_stress.fe:66:9
   │
66 │         self.my_bytes = my_bytes
   │         ^^^^^^^^^^^^^   ^^^^^^^^ Array<u8, 100>
   │         │                
   │         mut SPtr<Array<u8, 100>>

note: 
   ┌─ abi_encoding_stress.fe:69:5
   │  
69 │ ╭     pub fn get_my_bytes(self) -> Array<u8, 100> {
70 │ │         return self.my_bytes.to_mem()
71 │ │     }
   │ ╰─────^ params: [self] -> Array<u8, 100>

note: 
   ┌─ abi_encoding_stress.fe:70:16
   │
70 │         return self.my_bytes.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ abi_encoding_stress.fe:70:16
   │
70 │         return self.my_bytes.to_mem()
   │                ^^^^^^^^^^^^^ SPtr<Array<u8, 100>>

note: 
   ┌─ abi_encoding_stress.fe:70:16
   │
70 │         return self.my_bytes.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 100>

note: 
   ┌─ abi_encoding_stress.fe:73:5
   │  
73 │ ╭     pub fn get_my_struct() -> MyStruct {
74 │ │         return MyStruct(my_num: 42, my_num2: u8(26), my_bool: true, my_addr: address(123456))
75 │ │     }
   │ ╰─────^ params: [] -> MyStruct

note: 
   ┌─ abi_encoding_stress.fe:74:33
   │
74 │         return MyStruct(my_num: 42, my_num2: u8(26), my_bool: true, my_addr: address(123456))
   │                                 ^^              ^^ u8
   │                                 │                
   │                                 u256

note: 
   ┌─ abi_encoding_stress.fe:74:46
   │
74 │         return MyStruct(my_num: 42, my_num2: u8(26), my_bool: true, my_addr: address(123456))
   │                                              ^^^^^^           ^^^^                   ^^^^^^ u256
   │                                              │                │                       
   │                                              │                bool
   │                                              u8

note: 
   ┌─ abi_encoding_stress.fe:74:78
   │
74 │         return MyStruct(my_num: 42, my_num2: u8(26), my_bool: true, my_addr: address(123456))
   │                                                                              ^^^^^^^^^^^^^^^ address

note: 
   ┌─ abi_encoding_stress.fe:74:16
   │
74 │         return MyStruct(my_num: 42, my_num2: u8(26), my_bool: true, my_addr: address(123456))
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyStruct

note: 
   ┌─ abi_encoding_stress.fe:77:5
   │  
77 │ ╭     pub fn mod_my_struct(mut my_struct: MyStruct) -> MyStruct {
78 │ │         my_struct.my_num = 12341234
79 │ │         my_struct.my_num2 = u8(42)
80 │ │         my_struct.my_bool = false
81 │ │         my_struct.my_addr = address(9999)
82 │ │         return my_struct
83 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_struct, typ: mut MyStruct }] -> MyStruct

note: 
   ┌─ abi_encoding_stress.fe:78:9
   │
78 │         my_struct.my_num = 12341234
   │         ^^^^^^^^^ mut MyStruct

note: 
   ┌─ abi_encoding_stress.fe:78:9
   │
78 │         my_struct.my_num = 12341234
   │         ^^^^^^^^^^^^^^^^   ^^^^^^^^ u256
   │         │                   
   │         mut u256
79 │         my_struct.my_num2 = u8(42)
   │         ^^^^^^^^^ mut MyStruct

note: 
   ┌─ abi_encoding_stress.fe:79:9
   │
79 │         my_struct.my_num2 = u8(42)
   │         ^^^^^^^^^^^^^^^^^      ^^ u8
   │         │                       
   │         mut u8

note: 
   ┌─ abi_encoding_stress.fe:79:29
   │
79 │         my_struct.my_num2 = u8(42)
   │                             ^^^^^^ u8
80 │         my_struct.my_bool = false
   │         ^^^^^^^^^ mut MyStruct

note: 
   ┌─ abi_encoding_stress.fe:80:9
   │
80 │         my_struct.my_bool = false
   │         ^^^^^^^^^^^^^^^^^   ^^^^^ bool
   │         │                    
   │         mut bool
81 │         my_struct.my_addr = address(9999)
   │         ^^^^^^^^^ mut MyStruct

note: 
   ┌─ abi_encoding_stress.fe:81:9
   │
81 │         my_struct.my_addr = address(9999)
   │         ^^^^^^^^^^^^^^^^^           ^^^^ u256
   │         │                            
   │         mut address

note: 
   ┌─ abi_encoding_stress.fe:81:29
   │
81 │         my_struct.my_addr = address(9999)
   │                             ^^^^^^^^^^^^^ address
82 │         return my_struct
   │                ^^^^^^^^^ mut MyStruct -Copy-> MyStruct

note: 
   ┌─ abi_encoding_stress.fe:85:5
   │  
85 │ ╭     pub fn emit_my_event(self, mut ctx: Context) {
86 │ │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
87 │ │     }
   │ ╰─────^ params: [self, { label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ abi_encoding_stress.fe:86:9
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │         ^^^                        ^^^^ Foo
   │         │                           
   │         mut Context

note: 
   ┌─ abi_encoding_stress.fe:86:36
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                    ^^^^^^^^^^^^^ SPtr<Array<address, 5>>

note: 
   ┌─ abi_encoding_stress.fe:86:36
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                    ^^^^^^^^^^^^^^^^^^^^^^           ^^^^ Foo
   │                                    │                                 
   │                                    Array<address, 5>

note: 
   ┌─ abi_encoding_stress.fe:86:69
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                     ^^^^^^^^^^^^             ^^^^ Foo
   │                                                                     │                         
   │                                                                     SPtr<u128> -Load-> u128

note: 
   ┌─ abi_encoding_stress.fe:86:94
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                              ^^^^^^^^^^^^^^ SPtr<String<10>>

note: 
   ┌─ abi_encoding_stress.fe:86:94
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ Foo
   │                                                                                              │                                  
   │                                                                                              String<10>

note: 
   ┌─ abi_encoding_stress.fe:86:128
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                                                                ^^^^^^^^^^^^ SPtr<Array<u16, 255>>

note: 
   ┌─ abi_encoding_stress.fe:86:128
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                                                                ^^^^^^^^^^^^^^^^^^^^^           ^^^^ Foo
   │                                                                                                                                │                                
   │                                                                                                                                Array<u16, 255>

note: 
   ┌─ abi_encoding_stress.fe:86:160
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                                                                                                ^^^^^^^^^^^^            ^^^^ Foo
   │                                                                                                                                                                │                        
   │                                                                                                                                                                SPtr<bool> -Load-> bool

note: 
   ┌─ abi_encoding_stress.fe:86:184
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                                                                                                                        ^^^^^^^^^^^^^ SPtr<Array<u8, 100>>

note: 
   ┌─ abi_encoding_stress.fe:86:184
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                                                                                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 100>

note: 
   ┌─ abi_encoding_stress.fe:86:18
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEvent

note: 
   ┌─ abi_encoding_stress.fe:86:9
   │
86 │         ctx.emit(MyEvent(my_addrs: self.my_addrs.to_mem(), my_u128: self.my_u128, my_string: self.my_string.to_mem(), my_u16s: self.my_u16s.to_mem(), my_bool: self.my_bool, my_bytes: self.my_bytes.to_mem()))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()


