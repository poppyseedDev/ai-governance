---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ address_bytes10_map.fe:2:5
  │
2 │     bar: Map<address, Array<u8, 10>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Array<u8, 10>>

note: 
  ┌─ address_bytes10_map.fe:4:5
  │  
4 │ ╭     pub fn read_bar(self, key: address) -> Array<u8, 10> {
5 │ │         return self.bar[key].to_mem()
6 │ │     }
  │ ╰─────^ params: [self, { label: None, name: key, typ: address }] -> Array<u8, 10>

note: 
  ┌─ address_bytes10_map.fe:5:16
  │
5 │         return self.bar[key].to_mem()
  │                ^^^^ Foo

note: 
  ┌─ address_bytes10_map.fe:5:16
  │
5 │         return self.bar[key].to_mem()
  │                ^^^^^^^^ ^^^ address
  │                │         
  │                SPtr<Map<address, Array<u8, 10>>>

note: 
  ┌─ address_bytes10_map.fe:5:16
  │
5 │         return self.bar[key].to_mem()
  │                ^^^^^^^^^^^^^ SPtr<Array<u8, 10>>

note: 
  ┌─ address_bytes10_map.fe:5:16
  │
5 │         return self.bar[key].to_mem()
  │                ^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 10>

note: 
   ┌─ address_bytes10_map.fe:8:5
   │  
 8 │ ╭     pub fn write_bar(mut self, key: address, value: Array<u8, 10>) {
 9 │ │         self.bar[key] = value
10 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: key, typ: address }, { label: None, name: value, typ: Array<u8, 10> }] -> ()

note: 
  ┌─ address_bytes10_map.fe:9:9
  │
9 │         self.bar[key] = value
  │         ^^^^ mut Foo

note: 
  ┌─ address_bytes10_map.fe:9:9
  │
9 │         self.bar[key] = value
  │         ^^^^^^^^ ^^^ address
  │         │         
  │         mut SPtr<Map<address, Array<u8, 10>>>

note: 
  ┌─ address_bytes10_map.fe:9:9
  │
9 │         self.bar[key] = value
  │         ^^^^^^^^^^^^^   ^^^^^ Array<u8, 10>
  │         │                
  │         mut SPtr<Array<u8, 10>>


