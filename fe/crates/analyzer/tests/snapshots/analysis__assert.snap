---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ assert.fe:2:5
  │
2 │     my_bool: bool
  │     ^^^^^^^^^^^^^ bool
3 │     my_string: String<5>
  │     ^^^^^^^^^^^^^^^^^^^^ String<5>

note: 
  ┌─ assert.fe:5:5
  │  
5 │ ╭     pub fn bar(baz: u256) {
6 │ │         assert baz > 5
7 │ │     }
  │ ╰─────^ params: [{ label: None, name: baz, typ: u256 }] -> ()

note: 
  ┌─ assert.fe:6:16
  │
6 │         assert baz > 5
  │                ^^^   ^ u256
  │                │      
  │                u256

note: 
  ┌─ assert.fe:6:16
  │
6 │         assert baz > 5
  │                ^^^^^^^ bool

note: 
   ┌─ assert.fe:9:5
   │  
 9 │ ╭     pub fn revert_with_static_string(baz: u256) {
10 │ │         assert baz > 5, "Must be greater than five"
11 │ │     }
   │ ╰─────^ params: [{ label: None, name: baz, typ: u256 }] -> ()

note: 
   ┌─ assert.fe:10:16
   │
10 │         assert baz > 5, "Must be greater than five"
   │                ^^^   ^ u256
   │                │      
   │                u256

note: 
   ┌─ assert.fe:10:16
   │
10 │         assert baz > 5, "Must be greater than five"
   │                ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<25>
   │                │         
   │                bool

note: 
   ┌─ assert.fe:13:5
   │  
13 │ ╭     pub fn revert_with(baz: u256, reason: String<1000>) {
14 │ │         assert baz > 5, reason
15 │ │     }
   │ ╰─────^ params: [{ label: None, name: baz, typ: u256 }, { label: None, name: reason, typ: String<1000> }] -> ()

note: 
   ┌─ assert.fe:14:16
   │
14 │         assert baz > 5, reason
   │                ^^^   ^ u256
   │                │      
   │                u256

note: 
   ┌─ assert.fe:14:16
   │
14 │         assert baz > 5, reason
   │                ^^^^^^^  ^^^^^^ String<1000>
   │                │         
   │                bool

note: 
   ┌─ assert.fe:17:5
   │  
17 │ ╭     pub fn assert_sto_bool(mut self) {
18 │ │         self.my_bool = false
19 │ │         assert self.my_bool
20 │ │     }
   │ ╰─────^ params: [mut self] -> ()

note: 
   ┌─ assert.fe:18:9
   │
18 │         self.my_bool = false
   │         ^^^^ mut Foo

note: 
   ┌─ assert.fe:18:9
   │
18 │         self.my_bool = false
   │         ^^^^^^^^^^^^   ^^^^^ bool
   │         │               
   │         mut SPtr<bool>
19 │         assert self.my_bool
   │                ^^^^ mut Foo

note: 
   ┌─ assert.fe:19:16
   │
19 │         assert self.my_bool
   │                ^^^^^^^^^^^^ mut SPtr<bool> -Load-> bool

note: 
   ┌─ assert.fe:22:5
   │  
22 │ ╭     pub fn assert_sto_string_msg(mut self) {
23 │ │         self.my_string = "hello"
24 │ │         assert false, self.my_string.to_mem()
25 │ │     }
   │ ╰─────^ params: [mut self] -> ()

note: 
   ┌─ assert.fe:23:9
   │
23 │         self.my_string = "hello"
   │         ^^^^ mut Foo

note: 
   ┌─ assert.fe:23:9
   │
23 │         self.my_string = "hello"
   │         ^^^^^^^^^^^^^^   ^^^^^^^ String<5>
   │         │                 
   │         mut SPtr<String<5>>
24 │         assert false, self.my_string.to_mem()
   │                ^^^^^  ^^^^ mut Foo
   │                │       
   │                bool

note: 
   ┌─ assert.fe:24:23
   │
24 │         assert false, self.my_string.to_mem()
   │                       ^^^^^^^^^^^^^^ mut SPtr<String<5>>

note: 
   ┌─ assert.fe:24:23
   │
24 │         assert false, self.my_string.to_mem()
   │                       ^^^^^^^^^^^^^^^^^^^^^^^ String<5>


