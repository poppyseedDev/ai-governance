---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ aug_assign.fe:2:5
  │
2 │     my_num: u256
  │     ^^^^^^^^^^^^ u256

note: 
  ┌─ aug_assign.fe:4:5
  │  
4 │ ╭     pub fn add(a: u256, b: u256) -> u256 {
5 │ │         let mut v: u256 = a
6 │ │         v += b
7 │ │         return v
8 │ │     }
  │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
  ┌─ aug_assign.fe:5:17
  │
5 │         let mut v: u256 = a
  │                 ^ mut u256

note: 
  ┌─ aug_assign.fe:5:27
  │
5 │         let mut v: u256 = a
  │                           ^ u256
6 │         v += b
  │         ^    ^ u256
  │         │     
  │         mut u256
7 │         return v
  │                ^ mut u256

note: 
   ┌─ aug_assign.fe:10:5
   │  
10 │ ╭     pub fn sub(a: u256, b: u256) -> u256 {
11 │ │         let mut v: u256 = a
12 │ │         v -= b
13 │ │         return v
14 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:11:17
   │
11 │         let mut v: u256 = a
   │                 ^ mut u256

note: 
   ┌─ aug_assign.fe:11:27
   │
11 │         let mut v: u256 = a
   │                           ^ u256
12 │         v -= b
   │         ^    ^ u256
   │         │     
   │         mut u256
13 │         return v
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:16:5
   │  
16 │ ╭     pub fn mul(a: u256, b: u256) -> u256 {
17 │ │         let mut v: u256 = a
18 │ │         v *= b
19 │ │         return v
20 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:17:17
   │
17 │         let mut v: u256 = a
   │                 ^ mut u256

note: 
   ┌─ aug_assign.fe:17:27
   │
17 │         let mut v: u256 = a
   │                           ^ u256
18 │         v *= b
   │         ^    ^ u256
   │         │     
   │         mut u256
19 │         return v
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:22:5
   │  
22 │ ╭     pub fn div(a: u256, b: u256) -> u256 {
23 │ │         let mut v: u256 = a
24 │ │         v /= b
25 │ │         return v
26 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:23:17
   │
23 │         let mut v: u256 = a
   │                 ^ mut u256

note: 
   ┌─ aug_assign.fe:23:27
   │
23 │         let mut v: u256 = a
   │                           ^ u256
24 │         v /= b
   │         ^    ^ u256
   │         │     
   │         mut u256
25 │         return v
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:28:5
   │  
28 │ ╭     pub fn mod(a: u256, b: u256) -> u256 {
29 │ │         let mut v: u256 = a
30 │ │         v %= b
31 │ │         return v
32 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:29:17
   │
29 │         let mut v: u256 = a
   │                 ^ mut u256

note: 
   ┌─ aug_assign.fe:29:27
   │
29 │         let mut v: u256 = a
   │                           ^ u256
30 │         v %= b
   │         ^    ^ u256
   │         │     
   │         mut u256
31 │         return v
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:34:5
   │  
34 │ ╭     pub fn pow(a: u256, b: u256) -> u256 {
35 │ │         let mut v: u256 = a
36 │ │         v **= b
37 │ │         return v
38 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:35:17
   │
35 │         let mut v: u256 = a
   │                 ^ mut u256

note: 
   ┌─ aug_assign.fe:35:27
   │
35 │         let mut v: u256 = a
   │                           ^ u256
36 │         v **= b
   │         ^     ^ u256
   │         │      
   │         mut u256
37 │         return v
   │                ^ mut u256

note: 
   ┌─ aug_assign.fe:40:5
   │  
40 │ ╭     pub fn lshift(a: u8, b: u8) -> u8 {
41 │ │         let mut v: u8 = a
42 │ │         v <<= b
43 │ │         return v
44 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:41:17
   │
41 │         let mut v: u8 = a
   │                 ^ mut u8

note: 
   ┌─ aug_assign.fe:41:25
   │
41 │         let mut v: u8 = a
   │                         ^ u8
42 │         v <<= b
   │         ^     ^ u8
   │         │      
   │         mut u8
43 │         return v
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:46:5
   │  
46 │ ╭     pub fn rshift(a: u8, b: u8) -> u8 {
47 │ │         let mut v: u8 = a
48 │ │         v >>= b
49 │ │         return v
50 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:47:17
   │
47 │         let mut v: u8 = a
   │                 ^ mut u8

note: 
   ┌─ aug_assign.fe:47:25
   │
47 │         let mut v: u8 = a
   │                         ^ u8
48 │         v >>= b
   │         ^     ^ u8
   │         │      
   │         mut u8
49 │         return v
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:52:5
   │  
52 │ ╭     pub fn bit_or(a: u8, b: u8) -> u8 {
53 │ │         let mut v: u8 = a
54 │ │         v |= b
55 │ │         return v
56 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:53:17
   │
53 │         let mut v: u8 = a
   │                 ^ mut u8

note: 
   ┌─ aug_assign.fe:53:25
   │
53 │         let mut v: u8 = a
   │                         ^ u8
54 │         v |= b
   │         ^    ^ u8
   │         │     
   │         mut u8
55 │         return v
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:58:5
   │  
58 │ ╭     pub fn bit_xor(a: u8, b: u8) -> u8 {
59 │ │         let mut v: u8 = a
60 │ │         v ^= b
61 │ │         return v
62 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:59:17
   │
59 │         let mut v: u8 = a
   │                 ^ mut u8

note: 
   ┌─ aug_assign.fe:59:25
   │
59 │         let mut v: u8 = a
   │                         ^ u8
60 │         v ^= b
   │         ^    ^ u8
   │         │     
   │         mut u8
61 │         return v
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:64:5
   │  
64 │ ╭     pub fn bit_and(a: u8, b: u8) -> u8 {
65 │ │         let mut v: u8 = a
66 │ │         v &= b
67 │ │         return v
68 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u8 }, { label: None, name: b, typ: u8 }] -> u8

note: 
   ┌─ aug_assign.fe:65:17
   │
65 │         let mut v: u8 = a
   │                 ^ mut u8

note: 
   ┌─ aug_assign.fe:65:25
   │
65 │         let mut v: u8 = a
   │                         ^ u8
66 │         v &= b
   │         ^    ^ u8
   │         │     
   │         mut u8
67 │         return v
   │                ^ mut u8

note: 
   ┌─ aug_assign.fe:70:5
   │  
70 │ ╭     pub fn add_from_sto(mut self, a: u256, b: u256) -> u256 {
71 │ │         self.my_num = a
72 │ │         self.my_num += b
73 │ │         return self.my_num
74 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:71:9
   │
71 │         self.my_num = a
   │         ^^^^ mut Foo

note: 
   ┌─ aug_assign.fe:71:9
   │
71 │         self.my_num = a
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut SPtr<u256>
72 │         self.my_num += b
   │         ^^^^ mut Foo

note: 
   ┌─ aug_assign.fe:72:9
   │
72 │         self.my_num += b
   │         ^^^^^^^^^^^    ^ u256
   │         │               
   │         mut SPtr<u256> -Load-> u256
73 │         return self.my_num
   │                ^^^^ mut Foo

note: 
   ┌─ aug_assign.fe:73:16
   │
73 │         return self.my_num
   │                ^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
   ┌─ aug_assign.fe:76:5
   │  
76 │ ╭     pub fn add_from_mem(a: u256, b: u256) -> u256 {
77 │ │         let mut my_array: Array<u256, 10> = [0; 10]
78 │ │         my_array[7] = a
79 │ │         my_array[7] += b
80 │ │         return my_array[7]
81 │ │     }
   │ ╰─────^ params: [{ label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> u256

note: 
   ┌─ aug_assign.fe:77:17
   │
77 │         let mut my_array: Array<u256, 10> = [0; 10]
   │                 ^^^^^^^^ mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:77:46
   │
77 │         let mut my_array: Array<u256, 10> = [0; 10]
   │                                              ^  ^^ u256
   │                                              │   
   │                                              u256

note: 
   ┌─ aug_assign.fe:77:45
   │
77 │         let mut my_array: Array<u256, 10> = [0; 10]
   │                                             ^^^^^^^ Array<u256, 10>
78 │         my_array[7] = a
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:78:9
   │
78 │         my_array[7] = a
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut u256
79 │         my_array[7] += b
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:79:9
   │
79 │         my_array[7] += b
   │         ^^^^^^^^^^^    ^ u256
   │         │               
   │         mut u256
80 │         return my_array[7]
   │                ^^^^^^^^ ^ u256
   │                │         
   │                mut Array<u256, 10>

note: 
   ┌─ aug_assign.fe:80:16
   │
80 │         return my_array[7]
   │                ^^^^^^^^^^^ mut u256


