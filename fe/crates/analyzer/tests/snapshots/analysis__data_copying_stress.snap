---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ data_copying_stress.fe:2:5
  │
2 │     pub my_string: String<42>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ String<42>
3 │     pub my_u256: u256
  │     ^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ data_copying_stress.fe:7:5
   │
 7 │     my_string: String<42>
   │     ^^^^^^^^^^^^^^^^^^^^^ String<42>
 8 │     my_other_string: String<42>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<42>
 9 │     my_u256: u256
   │     ^^^^^^^^^^^^^ u256
10 │     my_other_u256: u256
   │     ^^^^^^^^^^^^^^^^^^^ u256
11 │     my_nums: Array<u256, 5>
   │     ^^^^^^^^^^^^^^^^^^^^^^^ Array<u256, 5>
12 │     my_addrs: Array<address, 3>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 3>

note: 
   ┌─ data_copying_stress.fe:14:5
   │  
14 │ ╭     pub fn set_my_vals(mut self, my_string: String<42>, my_other_string: String<42>, my_u256: u256, my_other_u256: u256) {
15 │ │         self.my_string = my_string
16 │ │         self.my_other_string = my_other_string
17 │ │         self.my_u256 = my_u256
18 │ │         self.my_other_u256 = my_other_u256
19 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_string, typ: String<42> }, { label: None, name: my_other_string, typ: String<42> }, { label: None, name: my_u256, typ: u256 }, { label: None, name: my_other_u256, typ: u256 }] -> ()

note: 
   ┌─ data_copying_stress.fe:15:9
   │
15 │         self.my_string = my_string
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:15:9
   │
15 │         self.my_string = my_string
   │         ^^^^^^^^^^^^^^   ^^^^^^^^^ String<42>
   │         │                 
   │         mut SPtr<String<42>>
16 │         self.my_other_string = my_other_string
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:16:9
   │
16 │         self.my_other_string = my_other_string
   │         ^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ String<42>
   │         │                       
   │         mut SPtr<String<42>>
17 │         self.my_u256 = my_u256
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:17:9
   │
17 │         self.my_u256 = my_u256
   │         ^^^^^^^^^^^^   ^^^^^^^ u256
   │         │               
   │         mut SPtr<u256>
18 │         self.my_other_u256 = my_other_u256
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:18:9
   │
18 │         self.my_other_u256 = my_other_u256
   │         ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^ u256
   │         │                     
   │         mut SPtr<u256>

note: 
   ┌─ data_copying_stress.fe:21:5
   │  
21 │ ╭     pub fn set_to_my_other_vals(mut self) {
22 │ │         self.my_string = self.my_other_string
23 │ │         self.my_u256 = self.my_other_u256
24 │ │     }
   │ ╰─────^ params: [mut self] -> ()

note: 
   ┌─ data_copying_stress.fe:22:9
   │
22 │         self.my_string = self.my_other_string
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:22:9
   │
22 │         self.my_string = self.my_other_string
   │         ^^^^^^^^^^^^^^   ^^^^ mut Foo
   │         │                 
   │         mut SPtr<String<42>>

note: 
   ┌─ data_copying_stress.fe:22:26
   │
22 │         self.my_string = self.my_other_string
   │                          ^^^^^^^^^^^^^^^^^^^^ mut SPtr<String<42>>
23 │         self.my_u256 = self.my_other_u256
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:23:9
   │
23 │         self.my_u256 = self.my_other_u256
   │         ^^^^^^^^^^^^   ^^^^ mut Foo
   │         │               
   │         mut SPtr<u256>

note: 
   ┌─ data_copying_stress.fe:23:24
   │
23 │         self.my_u256 = self.my_other_u256
   │                        ^^^^^^^^^^^^^^^^^^ mut SPtr<u256>

note: 
   ┌─ data_copying_stress.fe:26:5
   │  
26 │ ╭     pub fn multiple_references_shared_memory(mut x: Array<u256, 10>) {
27 │ │         let y: Array<u256, 10> = x
28 │ │         let mut z: Array<u256, 10> = y
29 │ │ 
   · │
39 │ │         assert z[3] == 50
40 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: mut Array<u256, 10> }] -> ()

note: 
   ┌─ data_copying_stress.fe:27:13
   │
27 │         let y: Array<u256, 10> = x
   │             ^ Array<u256, 10>
28 │         let mut z: Array<u256, 10> = y
   │                 ^ mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:27:34
   │
27 │         let y: Array<u256, 10> = x
   │                                  ^ mut Array<u256, 10> -Copy-> Array<u256, 10>
28 │         let mut z: Array<u256, 10> = y
   │                                      ^ Array<u256, 10> -Copy-> Array<u256, 10>
29 │ 
30 │         assert x[3] != 5
   │                ^ ^ u256
   │                │  
   │                mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:30:16
   │
30 │         assert x[3] != 5
   │                ^^^^    ^ u256
   │                │        
   │                mut u256

note: 
   ┌─ data_copying_stress.fe:30:16
   │
30 │         assert x[3] != 5
   │                ^^^^^^^^^ bool
31 │         x[3] = 5
   │         ^ ^ u256
   │         │  
   │         mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:31:9
   │
31 │         x[3] = 5
   │         ^^^^   ^ u256
   │         │       
   │         mut u256
32 │         assert x[3] == 5
   │                ^ ^ u256
   │                │  
   │                mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:32:16
   │
32 │         assert x[3] == 5
   │                ^^^^    ^ u256
   │                │        
   │                mut u256

note: 
   ┌─ data_copying_stress.fe:32:16
   │
32 │         assert x[3] == 5
   │                ^^^^^^^^^ bool
33 │         assert y[3] != 5
   │                ^ ^ u256
   │                │  
   │                Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:33:16
   │
33 │         assert y[3] != 5
   │                ^^^^    ^ u256
   │                │        
   │                u256

note: 
   ┌─ data_copying_stress.fe:33:16
   │
33 │         assert y[3] != 5
   │                ^^^^^^^^^ bool
34 │         assert z[3] != 5
   │                ^ ^ u256
   │                │  
   │                mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:34:16
   │
34 │         assert z[3] != 5
   │                ^^^^    ^ u256
   │                │        
   │                mut u256

note: 
   ┌─ data_copying_stress.fe:34:16
   │
34 │         assert z[3] != 5
   │                ^^^^^^^^^ bool
35 │ 
36 │         z[3] = 50
   │         ^ ^ u256
   │         │  
   │         mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:36:9
   │
36 │         z[3] = 50
   │         ^^^^   ^^ u256
   │         │       
   │         mut u256
37 │         assert x[3] == 5
   │                ^ ^ u256
   │                │  
   │                mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:37:16
   │
37 │         assert x[3] == 5
   │                ^^^^    ^ u256
   │                │        
   │                mut u256

note: 
   ┌─ data_copying_stress.fe:37:16
   │
37 │         assert x[3] == 5
   │                ^^^^^^^^^ bool
38 │         assert y[3] != 50
   │                ^ ^ u256
   │                │  
   │                Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:38:16
   │
38 │         assert y[3] != 50
   │                ^^^^    ^^ u256
   │                │        
   │                u256

note: 
   ┌─ data_copying_stress.fe:38:16
   │
38 │         assert y[3] != 50
   │                ^^^^^^^^^^ bool
39 │         assert z[3] == 50
   │                ^ ^ u256
   │                │  
   │                mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:39:16
   │
39 │         assert z[3] == 50
   │                ^^^^    ^^ u256
   │                │        
   │                mut u256

note: 
   ┌─ data_copying_stress.fe:39:16
   │
39 │         assert z[3] == 50
   │                ^^^^^^^^^^ bool

note: 
   ┌─ data_copying_stress.fe:42:5
   │  
42 │ ╭     pub fn mutate_and_return(mut my_array: Array<u256, 10>) -> Array<u256, 10> {
43 │ │         my_array[3] = 5
44 │ │         return my_array
45 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_array, typ: mut Array<u256, 10> }] -> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:43:9
   │
43 │         my_array[3] = 5
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:43:9
   │
43 │         my_array[3] = 5
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut u256
44 │         return my_array
   │                ^^^^^^^^ mut Array<u256, 10> -Copy-> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:47:5
   │  
47 │ ╭     pub fn clone_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
48 │ │         let a: Array<u256, 10> = my_array
49 │ │         return a
50 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_array, typ: Array<u256, 10> }] -> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:48:13
   │
48 │         let a: Array<u256, 10> = my_array
   │             ^ Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:48:34
   │
48 │         let a: Array<u256, 10> = my_array
   │                                  ^^^^^^^^ Array<u256, 10>
49 │         return a
   │                ^ Array<u256, 10> -Copy-> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:52:5
   │  
52 │ ╭     pub fn clone_mutate_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
53 │ │         let mut a: Array<u256, 10> = my_array
54 │ │         a[3] = 5
55 │ │         assert my_array[3] != 5
56 │ │         return my_array
57 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_array, typ: Array<u256, 10> }] -> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:53:17
   │
53 │         let mut a: Array<u256, 10> = my_array
   │                 ^ mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:53:38
   │
53 │         let mut a: Array<u256, 10> = my_array
   │                                      ^^^^^^^^ Array<u256, 10> -Copy-> Array<u256, 10>
54 │         a[3] = 5
   │         ^ ^ u256
   │         │  
   │         mut Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:54:9
   │
54 │         a[3] = 5
   │         ^^^^   ^ u256
   │         │       
   │         mut u256
55 │         assert my_array[3] != 5
   │                ^^^^^^^^ ^ u256
   │                │         
   │                Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:55:16
   │
55 │         assert my_array[3] != 5
   │                ^^^^^^^^^^^    ^ u256
   │                │               
   │                u256

note: 
   ┌─ data_copying_stress.fe:55:16
   │
55 │         assert my_array[3] != 5
   │                ^^^^^^^^^^^^^^^^ bool
56 │         return my_array
   │                ^^^^^^^^ Array<u256, 10> -Copy-> Array<u256, 10>

note: 
   ┌─ data_copying_stress.fe:59:5
   │  
59 │ ╭     pub fn assign_my_nums_and_return(mut self) -> Array<u256, 5> {
60 │ │         let mut my_nums_mem: Array<u256, 5> = [0; 5]
61 │ │         self.my_nums[0] = 42
62 │ │         self.my_nums[1] = 26
   · │
67 │ │         return my_nums_mem
68 │ │     }
   │ ╰─────^ params: [mut self] -> Array<u256, 5>

note: 
   ┌─ data_copying_stress.fe:60:17
   │
60 │         let mut my_nums_mem: Array<u256, 5> = [0; 5]
   │                 ^^^^^^^^^^^ mut Array<u256, 5>

note: 
   ┌─ data_copying_stress.fe:60:48
   │
60 │         let mut my_nums_mem: Array<u256, 5> = [0; 5]
   │                                                ^  ^ u256
   │                                                │   
   │                                                u256

note: 
   ┌─ data_copying_stress.fe:60:47
   │
60 │         let mut my_nums_mem: Array<u256, 5> = [0; 5]
   │                                               ^^^^^^ Array<u256, 5>
61 │         self.my_nums[0] = 42
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:61:9
   │
61 │         self.my_nums[0] = 42
   │         ^^^^^^^^^^^^ ^ u256
   │         │             
   │         mut SPtr<Array<u256, 5>>

note: 
   ┌─ data_copying_stress.fe:61:9
   │
61 │         self.my_nums[0] = 42
   │         ^^^^^^^^^^^^^^^   ^^ u256
   │         │                  
   │         mut SPtr<u256>
62 │         self.my_nums[1] = 26
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:62:9
   │
62 │         self.my_nums[1] = 26
   │         ^^^^^^^^^^^^ ^ u256
   │         │             
   │         mut SPtr<Array<u256, 5>>

note: 
   ┌─ data_copying_stress.fe:62:9
   │
62 │         self.my_nums[1] = 26
   │         ^^^^^^^^^^^^^^^   ^^ u256
   │         │                  
   │         mut SPtr<u256>
63 │         self.my_nums[2] = 0
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:63:9
   │
63 │         self.my_nums[2] = 0
   │         ^^^^^^^^^^^^ ^ u256
   │         │             
   │         mut SPtr<Array<u256, 5>>

note: 
   ┌─ data_copying_stress.fe:63:9
   │
63 │         self.my_nums[2] = 0
   │         ^^^^^^^^^^^^^^^   ^ u256
   │         │                  
   │         mut SPtr<u256>
64 │         self.my_nums[3] = 1
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:64:9
   │
64 │         self.my_nums[3] = 1
   │         ^^^^^^^^^^^^ ^ u256
   │         │             
   │         mut SPtr<Array<u256, 5>>

note: 
   ┌─ data_copying_stress.fe:64:9
   │
64 │         self.my_nums[3] = 1
   │         ^^^^^^^^^^^^^^^   ^ u256
   │         │                  
   │         mut SPtr<u256>
65 │         self.my_nums[4] = 255
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:65:9
   │
65 │         self.my_nums[4] = 255
   │         ^^^^^^^^^^^^ ^ u256
   │         │             
   │         mut SPtr<Array<u256, 5>>

note: 
   ┌─ data_copying_stress.fe:65:9
   │
65 │         self.my_nums[4] = 255
   │         ^^^^^^^^^^^^^^^   ^^^ u256
   │         │                  
   │         mut SPtr<u256>
66 │         my_nums_mem = self.my_nums.to_mem()
   │         ^^^^^^^^^^^   ^^^^ mut Foo
   │         │              
   │         mut Array<u256, 5>

note: 
   ┌─ data_copying_stress.fe:66:23
   │
66 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^ mut SPtr<Array<u256, 5>>

note: 
   ┌─ data_copying_stress.fe:66:23
   │
66 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 5>
67 │         return my_nums_mem
   │                ^^^^^^^^^^^ mut Array<u256, 5> -Copy-> Array<u256, 5>

note: 
   ┌─ data_copying_stress.fe:70:5
   │  
70 │ ╭     pub fn emit_my_event(self, mut ctx: Context) {
71 │ │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
72 │ │     }
   │ ╰─────^ params: [self, { label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ data_copying_stress.fe:71:32
   │
71 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                ^^^  ^^^^ Foo
   │                                │     
   │                                mut Context

note: 
   ┌─ data_copying_stress.fe:71:37
   │
71 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                     ^^^^^^^^^^^^^^ SPtr<String<42>>

note: 
   ┌─ data_copying_stress.fe:71:37
   │
71 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^ Foo
   │                                     │                         
   │                                     String<42>

note: 
   ┌─ data_copying_stress.fe:71:62
   │
71 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │                                                              ^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
   ┌─ data_copying_stress.fe:71:9
   │
71 │         emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ data_copying_stress.fe:74:5
   │  
74 │ ╭     fn emit_my_event_internal(mut ctx: Context, _ my_string: String<42>, _ my_u256: u256) {
75 │ │         ctx.emit(MyEvent(my_string, my_u256))
76 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }, { label: Some("_"), name: my_string, typ: String<42> }, { label: Some("_"), name: my_u256, typ: u256 }] -> ()

note: 
   ┌─ data_copying_stress.fe:75:9
   │
75 │         ctx.emit(MyEvent(my_string, my_u256))
   │         ^^^              ^^^^^^^^^  ^^^^^^^ u256
   │         │                │           
   │         │                String<42> -Copy-> String<42>
   │         mut Context

note: 
   ┌─ data_copying_stress.fe:75:18
   │
75 │         ctx.emit(MyEvent(my_string, my_u256))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEvent

note: 
   ┌─ data_copying_stress.fe:75:9
   │
75 │         ctx.emit(MyEvent(my_string, my_u256))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ data_copying_stress.fe:78:5
   │  
78 │ ╭     pub fn set_my_addrs(mut self, my_addrs: Array<address, 3>) {
79 │ │         self.my_addrs = my_addrs
80 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_addrs, typ: Array<address, 3> }] -> ()

note: 
   ┌─ data_copying_stress.fe:79:9
   │
79 │         self.my_addrs = my_addrs
   │         ^^^^ mut Foo

note: 
   ┌─ data_copying_stress.fe:79:9
   │
79 │         self.my_addrs = my_addrs
   │         ^^^^^^^^^^^^^   ^^^^^^^^ Array<address, 3>
   │         │                
   │         mut SPtr<Array<address, 3>>

note: 
   ┌─ data_copying_stress.fe:82:5
   │  
82 │ ╭     pub fn get_my_second_addr(self) -> address {
83 │ │         return self.my_addrs[1]
84 │ │     }
   │ ╰─────^ params: [self] -> address

note: 
   ┌─ data_copying_stress.fe:83:16
   │
83 │         return self.my_addrs[1]
   │                ^^^^ Foo

note: 
   ┌─ data_copying_stress.fe:83:16
   │
83 │         return self.my_addrs[1]
   │                ^^^^^^^^^^^^^ ^ u256
   │                │              
   │                SPtr<Array<address, 3>>

note: 
   ┌─ data_copying_stress.fe:83:16
   │
83 │         return self.my_addrs[1]
   │                ^^^^^^^^^^^^^^^^ SPtr<address> -Load-> address


