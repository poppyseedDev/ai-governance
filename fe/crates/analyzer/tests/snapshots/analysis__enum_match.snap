---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ enum_match.fe:2:5
  │
2 │     Unit
  │     ^^^^ unit
3 │     UnitTuple()
  │     ^^^^^^^^^^^ ()
4 │     Tuple(u32, u256)
  │     ^^^^^^^^^^^^^^^^ (u32, u256)

note: 
  ┌─ enum_match.fe:8:5
  │
8 │     Tuple(u32, u256)
  │     ^^^^^^^^^^^^^^^^ (u32, u256)
9 │     Nested(MyEnum)
  │     ^^^^^^^^^^^^^^ (MyEnum)

note: 
   ┌─ enum_match.fe:13:5
   │
13 │     Value(MyEnum, MyEnum)
   │     ^^^^^^^^^^^^^^^^^^^^^ (MyEnum, MyEnum)

note: 
   ┌─ enum_match.fe:17:5
   │
17 │     Continue
   │     ^^^^^^^^ unit
18 │     Done
   │     ^^^^ unit

note: 
   ┌─ enum_match.fe:22:5
   │
22 │     pub x: i32
   │     ^^^^^^^^^^ i32
23 │     pub y: i32
   │     ^^^^^^^^^^ i32
24 │     pub b: bool
   │     ^^^^^^^^^^^ bool

note: 
   ┌─ enum_match.fe:28:5
   │
28 │     pub x: u256
   │     ^^^^^^^^^^^ u256
29 │     pub y: u256
   │     ^^^^^^^^^^^ u256
30 │     pub e: MyEnum
   │     ^^^^^^^^^^^^^ MyEnum

note: 
   ┌─ enum_match.fe:34:5
   │
34 │     my_enum: MyEnumNested
   │     ^^^^^^^^^^^^^^^^^^^^^ MyEnumNested

note: 
   ┌─ enum_match.fe:36:5
   │  
36 │ ╭     pub fn simple_match(x: u32, y: u256) -> u256 {
37 │ │         let my_enum: MyEnum = MyEnum::Tuple(x, y);
38 │ │         match my_enum {
39 │ │             MyEnum::Unit | MyEnum::UnitTuple() => {
   · │
45 │ │         }
46 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
   ┌─ enum_match.fe:37:13
   │
37 │         let my_enum: MyEnum = MyEnum::Tuple(x, y);
   │             ^^^^^^^ MyEnum

note: 
   ┌─ enum_match.fe:37:45
   │
37 │         let my_enum: MyEnum = MyEnum::Tuple(x, y);
   │                                             ^  ^ u256
   │                                             │   
   │                                             u32

note: 
   ┌─ enum_match.fe:37:31
   │
37 │         let my_enum: MyEnum = MyEnum::Tuple(x, y);
   │                               ^^^^^^^^^^^^^^^^^^^ MyEnum
38 │         match my_enum {
   │               ^^^^^^^ MyEnum
39 │             MyEnum::Unit | MyEnum::UnitTuple() => {
40 │                 return 0
   │                        ^ u256
   ·
43 │                 return u256(x1) + y1
   │                             ^^ u32

note: 
   ┌─ enum_match.fe:43:24
   │
43 │                 return u256(x1) + y1
   │                        ^^^^^^^^   ^^ u256
   │                        │           
   │                        u256

note: 
   ┌─ enum_match.fe:43:24
   │
43 │                 return u256(x1) + y1
   │                        ^^^^^^^^^^^^^ u256

note: 
   ┌─ enum_match.fe:48:5
   │  
48 │ ╭     pub fn nested_match(x: u32, y: u256) -> u256 {
49 │ │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Tuple(x, y))
50 │ │         match nested {
51 │ │             MyEnumNested::Tuple(x1, y1) | MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) => {
   · │
57 │ │         }
58 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
   ┌─ enum_match.fe:49:13
   │
49 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Tuple(x, y))
   │             ^^^^^^ MyEnumNested

note: 
   ┌─ enum_match.fe:49:71
   │
49 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Tuple(x, y))
   │                                                                       ^  ^ u256
   │                                                                       │   
   │                                                                       u32

note: 
   ┌─ enum_match.fe:49:57
   │
49 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Tuple(x, y))
   │                                                         ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
   ┌─ enum_match.fe:49:36
   │
49 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Tuple(x, y))
   │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEnumNested
50 │         match nested {
   │               ^^^^^^ MyEnumNested
51 │             MyEnumNested::Tuple(x1, y1) | MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) => {
52 │                 return u256(x1) + y1
   │                             ^^ u32

note: 
   ┌─ enum_match.fe:52:24
   │
52 │                 return u256(x1) + y1
   │                        ^^^^^^^^   ^^ u256
   │                        │           
   │                        u256

note: 
   ┌─ enum_match.fe:52:24
   │
52 │                 return u256(x1) + y1
   │                        ^^^^^^^^^^^^^ u256
   ·
55 │                 return 0
   │                        ^ u256

note: 
   ┌─ enum_match.fe:60:5
   │  
60 │ ╭     pub fn nested_match2() -> u256 {
61 │ │         let tup: Tuple2 = Tuple2::Value(MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
62 │ │         let mut res: u256 = 0
63 │ │         match tup {
   · │
72 │ │         return res
73 │ │     }
   │ ╰─────^ params: [] -> u256

note: 
   ┌─ enum_match.fe:61:13
   │
61 │         let tup: Tuple2 = Tuple2::Value(MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │             ^^^ Tuple2
62 │         let mut res: u256 = 0
   │                 ^^^ mut u256

note: 
   ┌─ enum_match.fe:61:55
   │
61 │         let tup: Tuple2 = Tuple2::Value(MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │                                                       ^  ^ u256
   │                                                       │   
   │                                                       u32

note: 
   ┌─ enum_match.fe:61:41
   │
61 │         let tup: Tuple2 = Tuple2::Value(MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │                                         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^ MyEnum
   │                                         │                     
   │                                         MyEnum

note: 
   ┌─ enum_match.fe:61:27
   │
61 │         let tup: Tuple2 = Tuple2::Value(MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Tuple2
62 │         let mut res: u256 = 0
   │                             ^ u256
63 │         match tup {
   │               ^^^ Tuple2
64 │             Tuple2::Value(MyEnum::Unit, MyEnum::Tuple(x, y)) | Tuple2::Value(MyEnum::Tuple(x, y), MyEnum::UnitTuple()) => {
65 │                 res = u256(x) + y
   │                 ^^^        ^ u32
   │                 │           
   │                 mut u256

note: 
   ┌─ enum_match.fe:65:23
   │
65 │                 res = u256(x) + y
   │                       ^^^^^^^   ^ u256
   │                       │          
   │                       u256

note: 
   ┌─ enum_match.fe:65:23
   │
65 │                 res = u256(x) + y
   │                       ^^^^^^^^^^^ u256
   ·
68 │                 return 0
   │                        ^ u256
   ·
72 │         return res
   │                ^^^ mut u256

note: 
   ┌─ enum_match.fe:75:5
   │  
75 │ ╭     pub fn tuple_match() -> u256 {
76 │ │         let tup: (MyEnum, MyEnum) = (MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
77 │ │         match tup {
78 │ │             (MyEnum::Unit, MyEnum::Tuple(x, y)) | (MyEnum::Tuple(x, y), MyEnum::UnitTuple()) => {
   · │
85 │ │         }
86 │ │     }
   │ ╰─────^ params: [] -> u256

note: 
   ┌─ enum_match.fe:76:13
   │
76 │         let tup: (MyEnum, MyEnum) = (MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │             ^^^ (MyEnum, MyEnum)

note: 
   ┌─ enum_match.fe:76:52
   │
76 │         let tup: (MyEnum, MyEnum) = (MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │                                                    ^  ^ u256
   │                                                    │   
   │                                                    u32

note: 
   ┌─ enum_match.fe:76:38
   │
76 │         let tup: (MyEnum, MyEnum) = (MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │                                      ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^ MyEnum
   │                                      │                     
   │                                      MyEnum

note: 
   ┌─ enum_match.fe:76:37
   │
76 │         let tup: (MyEnum, MyEnum) = (MyEnum::Tuple(1, 2), MyEnum::UnitTuple())
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (MyEnum, MyEnum)
77 │         match tup {
   │               ^^^ (MyEnum, MyEnum)
78 │             (MyEnum::Unit, MyEnum::Tuple(x, y)) | (MyEnum::Tuple(x, y), MyEnum::UnitTuple()) => {
79 │                 return u256(x) + y
   │                             ^ u32

note: 
   ┌─ enum_match.fe:79:24
   │
79 │                 return u256(x) + y
   │                        ^^^^^^^   ^ u256
   │                        │          
   │                        u256

note: 
   ┌─ enum_match.fe:79:24
   │
79 │                 return u256(x) + y
   │                        ^^^^^^^^^^^ u256
   ·
83 │                 return 0
   │                        ^ u256

note: 
    ┌─ enum_match.fe:88:5
    │  
 88 │ ╭     pub fn boolean_literal_match(b1: bool, b2: bool) -> u256 {
 89 │ │         match (b1, b2) {
 90 │ │             (true, true) => {
 91 │ │                 return 2
    · │
 99 │ │         }
100 │ │     }
    │ ╰─────^ params: [{ label: None, name: b1, typ: bool }, { label: None, name: b2, typ: bool }] -> u256

note: 
   ┌─ enum_match.fe:89:16
   │
89 │         match (b1, b2) {
   │                ^^  ^^ bool
   │                │    
   │                bool

note: 
   ┌─ enum_match.fe:89:15
   │
89 │         match (b1, b2) {
   │               ^^^^^^^^ (bool, bool)
90 │             (true, true) => {
91 │                 return 2
   │                        ^ u256
   ·
94 │                 return 1
   │                        ^ u256
   ·
97 │                 return 0
   │                        ^ u256

note: 
    ┌─ enum_match.fe:102:5
    │  
102 │ ╭     pub fn wild_card() -> u256 {
103 │ │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)
104 │ │         match nested {
105 │ │             MyEnumNested::Nested(MyEnum::UnitTuple() | MyEnum::Tuple(_, _)) => {
    · │
111 │ │         }
112 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ enum_match.fe:103:13
    │
103 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)
    │             ^^^^^^ MyEnumNested

note: 
    ┌─ enum_match.fe:103:57
    │
103 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)
    │                                                         ^^^^^^^^^^^^ MyEnum

note: 
    ┌─ enum_match.fe:103:36
    │
103 │         let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEnumNested
104 │         match nested {
    │               ^^^^^^ MyEnumNested
105 │             MyEnumNested::Nested(MyEnum::UnitTuple() | MyEnum::Tuple(_, _)) => {
106 │                 return 100
    │                        ^^^ u256
    ·
109 │                 return 0
    │                        ^ u256

note: 
    ┌─ enum_match.fe:114:5
    │  
114 │ ╭     pub fn match_in_if() -> u256 {
115 │ │         let mut res: u256 = 0
116 │ │         let my_enum: MyEnum = MyEnum::Tuple(1, 2);
117 │ │ 
    · │
133 │ │ 
134 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ enum_match.fe:115:17
    │
115 │         let mut res: u256 = 0
    │                 ^^^ mut u256
116 │         let my_enum: MyEnum = MyEnum::Tuple(1, 2);
    │             ^^^^^^^ MyEnum

note: 
    ┌─ enum_match.fe:115:29
    │
115 │         let mut res: u256 = 0
    │                             ^ u256
116 │         let my_enum: MyEnum = MyEnum::Tuple(1, 2);
    │                                             ^  ^ u256
    │                                             │   
    │                                             u32

note: 
    ┌─ enum_match.fe:116:31
    │
116 │         let my_enum: MyEnum = MyEnum::Tuple(1, 2);
    │                               ^^^^^^^^^^^^^^^^^^^ MyEnum
117 │ 
118 │         if true {
    │            ^^^^ bool
119 │             match my_enum {
    │                   ^^^^^^^ MyEnum
120 │                 MyEnum::Tuple(x, y) => {
121 │                     res = u256(x) + y
    │                     ^^^        ^ u32
    │                     │           
    │                     mut u256

note: 
    ┌─ enum_match.fe:121:27
    │
121 │                     res = u256(x) + y
    │                           ^^^^^^^   ^ u256
    │                           │          
    │                           u256

note: 
    ┌─ enum_match.fe:121:27
    │
121 │                     res = u256(x) + y
    │                           ^^^^^^^^^^^ u256
    ·
125 │                     res = 0
    │                     ^^^   ^ u256
    │                     │      
    │                     mut u256
    ·
129 │             res = 100
    │             ^^^   ^^^ u256
    │             │      
    │             mut u256
    ·
132 │         return res
    │                ^^^ mut u256

note: 
    ┌─ enum_match.fe:136:5
    │  
136 │ ╭     pub fn match_in_loop() -> u256 {
137 │ │         let mut res: u256 = 0
138 │ │         let mut state: State = State::Continue
139 │ │ 
    · │
159 │ │         return res
160 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ enum_match.fe:137:17
    │
137 │         let mut res: u256 = 0
    │                 ^^^ mut u256
138 │         let mut state: State = State::Continue
    │                 ^^^^^ mut State
139 │ 
140 │         let mut my_array: Array<u256, 3> = [0; 3]
    │                 ^^^^^^^^ mut Array<u256, 3>
    ·
145 │         for i in my_array {
    │             ^ u256

note: 
    ┌─ enum_match.fe:137:29
    │
137 │         let mut res: u256 = 0
    │                             ^ u256
138 │         let mut state: State = State::Continue
    │                                ^^^^^^^^^^^^^^^ State
139 │ 
140 │         let mut my_array: Array<u256, 3> = [0; 3]
    │                                             ^  ^ u256
    │                                             │   
    │                                             u256

note: 
    ┌─ enum_match.fe:140:44
    │
140 │         let mut my_array: Array<u256, 3> = [0; 3]
    │                                            ^^^^^^ Array<u256, 3>
141 │         my_array[0] = 5
    │         ^^^^^^^^ ^ u256
    │         │         
    │         mut Array<u256, 3>

note: 
    ┌─ enum_match.fe:141:9
    │
141 │         my_array[0] = 5
    │         ^^^^^^^^^^^   ^ u256
    │         │              
    │         mut u256
142 │         my_array[1] = 10
    │         ^^^^^^^^ ^ u256
    │         │         
    │         mut Array<u256, 3>

note: 
    ┌─ enum_match.fe:142:9
    │
142 │         my_array[1] = 10
    │         ^^^^^^^^^^^   ^^ u256
    │         │              
    │         mut u256
143 │         my_array[2] = 15
    │         ^^^^^^^^ ^ u256
    │         │         
    │         mut Array<u256, 3>

note: 
    ┌─ enum_match.fe:143:9
    │
143 │         my_array[2] = 15
    │         ^^^^^^^^^^^   ^^ u256
    │         │              
    │         mut u256
144 │ 
145 │         for i in my_array {
    │                  ^^^^^^^^ mut Array<u256, 3>
146 │             match state {
    │                   ^^^^^ mut State
    ·
153 │             res += i
    │             ^^^    ^ u256
    │             │       
    │             mut u256
154 │             if res == 15 {
    │                ^^^    ^^ u256
    │                │       
    │                mut u256

note: 
    ┌─ enum_match.fe:154:16
    │
154 │             if res == 15 {
    │                ^^^^^^^^^ bool
155 │                 state = State::Done
    │                 ^^^^^   ^^^^^^^^^^^ State
    │                 │        
    │                 mut State
    ·
159 │         return res
    │                ^^^ mut u256

note: 
    ┌─ enum_match.fe:162:5
    │  
162 │ ╭     pub fn match_in_loop_simple() -> u256 {
163 │ │         let mut state: State = State::Continue
164 │ │         let mut count: u256 = 0
165 │ │         while true {
    · │
175 │ │         return count
176 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ enum_match.fe:163:17
    │
163 │         let mut state: State = State::Continue
    │                 ^^^^^ mut State
164 │         let mut count: u256 = 0
    │                 ^^^^^ mut u256

note: 
    ┌─ enum_match.fe:163:32
    │
163 │         let mut state: State = State::Continue
    │                                ^^^^^^^^^^^^^^^ State
164 │         let mut count: u256 = 0
    │                               ^ u256
165 │         while true {
    │               ^^^^ bool
166 │             match state {
    │                   ^^^^^ mut State
    ·
172 │             count += 1
    │             ^^^^^    ^ u256
    │             │         
    │             mut u256
173 │             state = State::Done
    │             ^^^^^   ^^^^^^^^^^^ State
    │             │        
    │             mut State
174 │         }
175 │         return count
    │                ^^^^^ mut u256

note: 
    ┌─ enum_match.fe:179:5
    │  
179 │ ╭     pub fn rest_pattern_head(x: u32, y: u256) -> u256 {
180 │ │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Unit, MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
181 │ │         match pat {
182 │ │             (.., MyEnum::Tuple(x1, y1)) => {
    · │
188 │ │         }
189 │ │     }
    │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
    ┌─ enum_match.fe:180:13
    │
180 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Unit, MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │             ^^^ (MyEnum, MyEnum, MyEnum, MyEnum)

note: 
    ┌─ enum_match.fe:180:54
    │
180 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Unit, MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                      ^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^                ^  ^ u256
    │                                                      │             │             │                           │   
    │                                                      │             │             │                           u32
    │                                                      │             │             MyEnum
    │                                                      │             MyEnum
    │                                                      MyEnum

note: 
    ┌─ enum_match.fe:180:96
    │
180 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Unit, MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                                                                ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
    ┌─ enum_match.fe:180:53
    │
180 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Unit, MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (MyEnum, MyEnum, MyEnum, MyEnum)
181 │         match pat {
    │               ^^^ (MyEnum, MyEnum, MyEnum, MyEnum)
182 │             (.., MyEnum::Tuple(x1, y1)) => {
183 │                 return u256(x1) + y1
    │                             ^^ u32

note: 
    ┌─ enum_match.fe:183:24
    │
183 │                 return u256(x1) + y1
    │                        ^^^^^^^^   ^^ u256
    │                        │           
    │                        u256

note: 
    ┌─ enum_match.fe:183:24
    │
183 │                 return u256(x1) + y1
    │                        ^^^^^^^^^^^^^ u256
    ·
186 │                 return 0
    │                        ^ u256

note: 
    ┌─ enum_match.fe:191:5
    │  
191 │ ╭     pub fn rest_pattern_tail(x: u32, y: u256) -> u256 {
192 │ │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Unit)
193 │ │         match pat {
194 │ │             (MyEnum::Tuple(x1, y1), ..) => {
    · │
200 │ │         }
201 │ │     }
    │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
    ┌─ enum_match.fe:192:13
    │
192 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Unit)
    │             ^^^ (MyEnum, MyEnum, MyEnum, MyEnum)

note: 
    ┌─ enum_match.fe:192:68
    │
192 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Unit)
    │                                                                    ^  ^ u256
    │                                                                    │   
    │                                                                    u32

note: 
    ┌─ enum_match.fe:192:54
    │
192 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Unit)
    │                                                      ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^ MyEnum
    │                                                      │                    │             │              
    │                                                      │                    │             MyEnum
    │                                                      │                    MyEnum
    │                                                      MyEnum

note: 
    ┌─ enum_match.fe:192:53
    │
192 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Unit)
    │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (MyEnum, MyEnum, MyEnum, MyEnum)
193 │         match pat {
    │               ^^^ (MyEnum, MyEnum, MyEnum, MyEnum)
194 │             (MyEnum::Tuple(x1, y1), ..) => {
195 │                 return u256(x1) + y1
    │                             ^^ u32

note: 
    ┌─ enum_match.fe:195:24
    │
195 │                 return u256(x1) + y1
    │                        ^^^^^^^^   ^^ u256
    │                        │           
    │                        u256

note: 
    ┌─ enum_match.fe:195:24
    │
195 │                 return u256(x1) + y1
    │                        ^^^^^^^^^^^^^ u256
    ·
198 │                 return 0
    │                        ^ u256

note: 
    ┌─ enum_match.fe:203:5
    │  
203 │ ╭     pub fn rest_pattern_middle(x: u32, y: u256) -> u256 {
204 │ │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
205 │ │         match pat {
206 │ │             (MyEnum::Tuple(x1, y1), .., MyEnum::Tuple(x2, y2)) => {
    · │
212 │ │         }
213 │ │     }
    │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
    ┌─ enum_match.fe:204:13
    │
204 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │             ^^^ (MyEnum, MyEnum, MyEnum, MyEnum)

note: 
    ┌─ enum_match.fe:204:68
    │
204 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                                    ^  ^ u256
    │                                                                    │   
    │                                                                    u32

note: 
    ┌─ enum_match.fe:204:54
    │
204 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                      ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^                ^  ^ u256
    │                                                      │                    │             │                           │   
    │                                                      │                    │             │                           u32
    │                                                      │                    │             MyEnum
    │                                                      │                    MyEnum
    │                                                      MyEnum

note: 
    ┌─ enum_match.fe:204:103
    │
204 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                                                                       ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
    ┌─ enum_match.fe:204:53
    │
204 │         let pat: (MyEnum, MyEnum, MyEnum, MyEnum) = (MyEnum::Tuple(x, y), MyEnum::Unit, MyEnum::Unit, MyEnum::Tuple(x, y))
    │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (MyEnum, MyEnum, MyEnum, MyEnum)
205 │         match pat {
    │               ^^^ (MyEnum, MyEnum, MyEnum, MyEnum)
206 │             (MyEnum::Tuple(x1, y1), .., MyEnum::Tuple(x2, y2)) => {
207 │                 return u256(x1) + y1 + u256(x2) + y2
    │                             ^^ u32

note: 
    ┌─ enum_match.fe:207:24
    │
207 │                 return u256(x1) + y1 + u256(x2) + y2
    │                        ^^^^^^^^   ^^ u256
    │                        │           
    │                        u256

note: 
    ┌─ enum_match.fe:207:24
    │
207 │                 return u256(x1) + y1 + u256(x2) + y2
    │                        ^^^^^^^^^^^^^        ^^ u32
    │                        │                     
    │                        u256

note: 
    ┌─ enum_match.fe:207:40
    │
207 │                 return u256(x1) + y1 + u256(x2) + y2
    │                                        ^^^^^^^^ u256

note: 
    ┌─ enum_match.fe:207:24
    │
207 │                 return u256(x1) + y1 + u256(x2) + y2
    │                        ^^^^^^^^^^^^^^^^^^^^^^^^   ^^ u256
    │                        │                           
    │                        u256

note: 
    ┌─ enum_match.fe:207:24
    │
207 │                 return u256(x1) + y1 + u256(x2) + y2
    │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
    ·
210 │                 return 0
    │                        ^ u256

note: 
    ┌─ enum_match.fe:215:5
    │  
215 │ ╭     pub fn simple_struct(x: i32, y: i32, b: bool) -> i32 {
216 │ │         let s: SimpleStruct = SimpleStruct(x, y, b)
217 │ │         match s {
218 │ │             SimpleStruct{x: x1, y: y1, b: true} => {
    · │
225 │ │         }
226 │ │     }
    │ ╰─────^ params: [{ label: None, name: x, typ: i32 }, { label: None, name: y, typ: i32 }, { label: None, name: b, typ: bool }] -> i32

note: 
    ┌─ enum_match.fe:216:13
    │
216 │         let s: SimpleStruct = SimpleStruct(x, y, b)
    │             ^ SimpleStruct

note: 
    ┌─ enum_match.fe:216:44
    │
216 │         let s: SimpleStruct = SimpleStruct(x, y, b)
    │                                            ^  ^  ^ bool
    │                                            │  │   
    │                                            │  i32
    │                                            i32

note: 
    ┌─ enum_match.fe:216:31
    │
216 │         let s: SimpleStruct = SimpleStruct(x, y, b)
    │                               ^^^^^^^^^^^^^^^^^^^^^ SimpleStruct
217 │         match s {
    │               ^ SimpleStruct
218 │             SimpleStruct{x: x1, y: y1, b: true} => {
219 │                 return x1 + y1
    │                        ^^   ^^ i32
    │                        │     
    │                        i32

note: 
    ┌─ enum_match.fe:219:24
    │
219 │                 return x1 + y1
    │                        ^^^^^^^ i32
    ·
223 │                 return x1 - y1
    │                        ^^   ^^ i32
    │                        │     
    │                        i32

note: 
    ┌─ enum_match.fe:223:24
    │
223 │                 return x1 - y1
    │                        ^^^^^^^ i32

note: 
    ┌─ enum_match.fe:228:5
    │  
228 │ ╭     pub fn nested_struct() -> u256 {
229 │ │         let e: MyEnum = MyEnum::Tuple(1, 2)
230 │ │         let s: NestedStruct = NestedStruct(x: 3, y: 4, e)
231 │ │         match s {
    · │
239 │ │         }
240 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ enum_match.fe:229:13
    │
229 │         let e: MyEnum = MyEnum::Tuple(1, 2)
    │             ^ MyEnum
230 │         let s: NestedStruct = NestedStruct(x: 3, y: 4, e)
    │             ^ NestedStruct

note: 
    ┌─ enum_match.fe:229:39
    │
229 │         let e: MyEnum = MyEnum::Tuple(1, 2)
    │                                       ^  ^ u256
    │                                       │   
    │                                       u32

note: 
    ┌─ enum_match.fe:229:25
    │
229 │         let e: MyEnum = MyEnum::Tuple(1, 2)
    │                         ^^^^^^^^^^^^^^^^^^^ MyEnum
230 │         let s: NestedStruct = NestedStruct(x: 3, y: 4, e)
    │                                               ^     ^  ^ MyEnum -Copy-> MyEnum
    │                                               │     │   
    │                                               │     u256
    │                                               u256

note: 
    ┌─ enum_match.fe:230:31
    │
230 │         let s: NestedStruct = NestedStruct(x: 3, y: 4, e)
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ NestedStruct
231 │         match s {
    │               ^ NestedStruct
232 │             NestedStruct{e: MyEnum::Unit | MyEnum::UnitTuple(), ..} => {
233 │                 return 0
    │                        ^ u256
    ·
237 │                 return x1 + y1 + u256(x2) + y2
    │                        ^^   ^^ u256
    │                        │     
    │                        u256

note: 
    ┌─ enum_match.fe:237:24
    │
237 │                 return x1 + y1 + u256(x2) + y2
    │                        ^^^^^^^        ^^ u32
    │                        │               
    │                        u256

note: 
    ┌─ enum_match.fe:237:34
    │
237 │                 return x1 + y1 + u256(x2) + y2
    │                                  ^^^^^^^^ u256

note: 
    ┌─ enum_match.fe:237:24
    │
237 │                 return x1 + y1 + u256(x2) + y2
    │                        ^^^^^^^^^^^^^^^^^^   ^^ u256
    │                        │                     
    │                        u256

note: 
    ┌─ enum_match.fe:237:24
    │
237 │                 return x1 + y1 + u256(x2) + y2
    │                        ^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ enum_match.fe:242:5
    │  
242 │ ╭     pub fn enum_storage(mut self, x:u32, y: u256, b: bool) -> u256 {
243 │ │         if b {
244 │ │             self.my_enum = MyEnumNested::Nested(MyEnum::Tuple(x, y))
245 │ │         } else {
    · │
256 │ │         }
257 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }, { label: None, name: b, typ: bool }] -> u256

note: 
    ┌─ enum_match.fe:243:12
    │
243 │         if b {
    │            ^ bool
244 │             self.my_enum = MyEnumNested::Nested(MyEnum::Tuple(x, y))
    │             ^^^^ mut Foo

note: 
    ┌─ enum_match.fe:244:13
    │
244 │             self.my_enum = MyEnumNested::Nested(MyEnum::Tuple(x, y))
    │             ^^^^^^^^^^^^                                      ^  ^ u256
    │             │                                                 │   
    │             │                                                 u32
    │             mut SPtr<MyEnumNested>

note: 
    ┌─ enum_match.fe:244:49
    │
244 │             self.my_enum = MyEnumNested::Nested(MyEnum::Tuple(x, y))
    │                                                 ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
    ┌─ enum_match.fe:244:28
    │
244 │             self.my_enum = MyEnumNested::Nested(MyEnum::Tuple(x, y))
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEnumNested
245 │         } else {
246 │             self.my_enum = MyEnumNested::Nested(MyEnum::Unit)
    │             ^^^^ mut Foo

note: 
    ┌─ enum_match.fe:246:13
    │
246 │             self.my_enum = MyEnumNested::Nested(MyEnum::Unit)
    │             ^^^^^^^^^^^^                        ^^^^^^^^^^^^ MyEnum
    │             │                                    
    │             mut SPtr<MyEnumNested>

note: 
    ┌─ enum_match.fe:246:28
    │
246 │             self.my_enum = MyEnumNested::Nested(MyEnum::Unit)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEnumNested
    ·
249 │         match self.my_enum {
    │               ^^^^ mut Foo

note: 
    ┌─ enum_match.fe:249:15
    │
249 │         match self.my_enum {
    │               ^^^^^^^^^^^^ mut SPtr<MyEnumNested>
250 │             MyEnumNested::Tuple(x1, y1) | MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) => {
251 │                 return u256(x1) + y1
    │                             ^^ u32

note: 
    ┌─ enum_match.fe:251:24
    │
251 │                 return u256(x1) + y1
    │                        ^^^^^^^^   ^^ u256
    │                        │           
    │                        u256

note: 
    ┌─ enum_match.fe:251:24
    │
251 │                 return u256(x1) + y1
    │                        ^^^^^^^^^^^^^ u256
    ·
254 │                 return 100
    │                        ^^^ u256


