---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ enums.fe:2:5
  │
2 │     Unit
  │     ^^^^ unit
3 │     UnitTuple()
  │     ^^^^^^^^^^^ ()
4 │     Tuple(u32, u256)
  │     ^^^^^^^^^^^^^^^^ (u32, u256)

note: 
  ┌─ enums.fe:6:5
  │  
6 │ ╭     pub fn tuple(x: u32, y: u256) -> MyEnum {
7 │ │         return MyEnum::Tuple(x, y)
8 │ │     }
  │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> MyEnum

note: 
  ┌─ enums.fe:7:30
  │
7 │         return MyEnum::Tuple(x, y)
  │                              ^  ^ u256
  │                              │   
  │                              u32

note: 
  ┌─ enums.fe:7:16
  │
7 │         return MyEnum::Tuple(x, y)
  │                ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
   ┌─ enums.fe:10:5
   │  
10 │ ╭     pub fn fold(self) -> u256 {
11 │ │         match self {
12 │ │             MyEnum::Unit => {
13 │ │                return 0
   · │
21 │ │         }
22 │ │     }
   │ ╰─────^ params: [self] -> u256

note: 
   ┌─ enums.fe:11:15
   │
11 │         match self {
   │               ^^^^ MyEnum
12 │             MyEnum::Unit => {
13 │                return 0
   │                       ^ u256
   ·
16 │                 return 1
   │                        ^ u256
   ·
19 │                 return u256(a) + b
   │                             ^ u32

note: 
   ┌─ enums.fe:19:24
   │
19 │                 return u256(a) + b
   │                        ^^^^^^^   ^ u256
   │                        │          
   │                        u256

note: 
   ┌─ enums.fe:19:24
   │
19 │                 return u256(a) + b
   │                        ^^^^^^^^^^^ u256

note: 
   ┌─ enums.fe:26:5
   │  
26 │ ╭     pub fn construct(x: u32, y: u256) {
27 │ │         let unit: MyEnum = MyEnum::Unit
28 │ │         let unit_tuple: MyEnum = MyEnum::UnitTuple()
29 │ │         let tuple: MyEnum = MyEnum::Tuple(x, y)
30 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> ()

note: 
   ┌─ enums.fe:27:13
   │
27 │         let unit: MyEnum = MyEnum::Unit
   │             ^^^^ MyEnum
28 │         let unit_tuple: MyEnum = MyEnum::UnitTuple()
   │             ^^^^^^^^^^ MyEnum
29 │         let tuple: MyEnum = MyEnum::Tuple(x, y)
   │             ^^^^^ MyEnum

note: 
   ┌─ enums.fe:27:28
   │
27 │         let unit: MyEnum = MyEnum::Unit
   │                            ^^^^^^^^^^^^ MyEnum
28 │         let unit_tuple: MyEnum = MyEnum::UnitTuple()
   │                                  ^^^^^^^^^^^^^^^^^^^ MyEnum
29 │         let tuple: MyEnum = MyEnum::Tuple(x, y)
   │                                           ^  ^ u256
   │                                           │   
   │                                           u32

note: 
   ┌─ enums.fe:29:29
   │
29 │         let tuple: MyEnum = MyEnum::Tuple(x, y)
   │                             ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
   ┌─ enums.fe:32:5
   │  
32 │ ╭     pub fn method(x: u32, y: u256) -> u256 {
33 │ │         let tup: MyEnum = MyEnum::Tuple(x, y)
34 │ │         return tup.fold()
35 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
   ┌─ enums.fe:33:13
   │
33 │         let tup: MyEnum = MyEnum::Tuple(x, y)
   │             ^^^ MyEnum

note: 
   ┌─ enums.fe:33:41
   │
33 │         let tup: MyEnum = MyEnum::Tuple(x, y)
   │                                         ^  ^ u256
   │                                         │   
   │                                         u32

note: 
   ┌─ enums.fe:33:27
   │
33 │         let tup: MyEnum = MyEnum::Tuple(x, y)
   │                           ^^^^^^^^^^^^^^^^^^^ MyEnum
34 │         return tup.fold()
   │                ^^^ MyEnum

note: 
   ┌─ enums.fe:34:16
   │
34 │         return tup.fold()
   │                ^^^^^^^^^^ u256

note: 
   ┌─ enums.fe:37:5
   │  
37 │ ╭     pub fn associated_method(x: u32, y: u256) -> u256 {
38 │ │         return MyEnum::tuple(x, y).fold()
39 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u32 }, { label: None, name: y, typ: u256 }] -> u256

note: 
   ┌─ enums.fe:38:30
   │
38 │         return MyEnum::tuple(x, y).fold()
   │                              ^  ^ u256
   │                              │   
   │                              u32

note: 
   ┌─ enums.fe:38:16
   │
38 │         return MyEnum::tuple(x, y).fold()
   │                ^^^^^^^^^^^^^^^^^^^ MyEnum

note: 
   ┌─ enums.fe:38:16
   │
38 │         return MyEnum::tuple(x, y).fold()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256


