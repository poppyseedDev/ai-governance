---
source: crates/analyzer/tests/analysis.rs
assertion_line: 183
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ erc20_token.fe:3:5
  │
3 │     pub owner: address
  │     ^^^^^^^^^^^^^^^^^^ address
4 │     #indexed
5 │     pub spender: address
  │     ^^^^^^^^^^^^^^^^^^^^ address
6 │     pub value: u256
  │     ^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:11:5
   │
11 │     pub from: address
   │     ^^^^^^^^^^^^^^^^^ address
12 │     #indexed
13 │     pub to: address
   │     ^^^^^^^^^^^^^^^ address
14 │     pub value: u256
   │     ^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:18:5
   │
18 │     _balances: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
19 │     _allowances: Map<address, Map<address, u256>>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
20 │     _total_supply: u256
   │     ^^^^^^^^^^^^^^^^^^^ u256
21 │     _name: String<100>
   │     ^^^^^^^^^^^^^^^^^^ String<100>
22 │     _symbol: String<100>
   │     ^^^^^^^^^^^^^^^^^^^^ String<100>
23 │     _decimals: u8
   │     ^^^^^^^^^^^^^ u8

note: 
   ┌─ erc20_token.fe:32:5
   │  
32 │ ╭     pub fn name(self) -> String<100> {
33 │ │         return self._name.to_mem()
34 │ │     }
   │ ╰─────^ params: [self] -> String<100>

note: 
   ┌─ erc20_token.fe:33:16
   │
33 │         return self._name.to_mem()
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:33:16
   │
33 │         return self._name.to_mem()
   │                ^^^^^^^^^^ SPtr<String<100>>

note: 
   ┌─ erc20_token.fe:33:16
   │
33 │         return self._name.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ String<100>

note: 
   ┌─ erc20_token.fe:36:5
   │  
36 │ ╭     pub fn symbol(self) -> String<100> {
37 │ │         return self._symbol.to_mem()
38 │ │     }
   │ ╰─────^ params: [self] -> String<100>

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._symbol.to_mem()
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^ SPtr<String<100>>

note: 
   ┌─ erc20_token.fe:37:16
   │
37 │         return self._symbol.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^ String<100>

note: 
   ┌─ erc20_token.fe:40:5
   │  
40 │ ╭     pub fn decimals(self) -> u8 {
41 │ │         return self._decimals
42 │ │     }
   │ ╰─────^ params: [self] -> u8

note: 
   ┌─ erc20_token.fe:41:16
   │
41 │         return self._decimals
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:41:16
   │
41 │         return self._decimals
   │                ^^^^^^^^^^^^^^ SPtr<u8> -Load-> u8

note: 
   ┌─ erc20_token.fe:44:5
   │  
44 │ ╭     pub fn totalSupply(self) -> u256 {
45 │ │         return self._total_supply
46 │ │     }
   │ ╰─────^ params: [self] -> u256

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._total_supply
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:45:16
   │
45 │         return self._total_supply
   │                ^^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:48:5
   │  
48 │ ╭     pub fn balanceOf(self, _ account: address) -> u256 {
49 │ │         return self._balances[account]
50 │ │     }
   │ ╰─────^ params: [self, { label: Some("_"), name: account, typ: address }] -> u256

note: 
   ┌─ erc20_token.fe:49:16
   │
49 │         return self._balances[account]
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:49:16
   │
49 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^ ^^^^^^^ address
   │                │               
   │                SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:49:16
   │
49 │         return self._balances[account]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:52:5
   │  
52 │ ╭     pub fn transfer(mut self, mut ctx: Context, recipient: address, value: u256) -> bool {
53 │ │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
54 │ │         return true
55 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: recipient, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:53:9
   │
53 │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
   │         ^^^^           ^^^          ^^^ mut Context
   │         │              │             
   │         │              mut Context
   │         mut ERC20

note: 
   ┌─ erc20_token.fe:53:37
   │
53 │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
   │                                     ^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^ u256
   │                                     │                 │           
   │                                     │                 address
   │                                     address

note: 
   ┌─ erc20_token.fe:53:9
   │
53 │         self._transfer(ctx, sender: ctx.msg_sender(), recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
54 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:57:5
   │  
57 │ ╭     pub fn allowance(self, owner: address, spender: address) -> u256 {
58 │ │         return self._allowances[owner][spender]
59 │ │     }
   │ ╰─────^ params: [self, { label: None, name: owner, typ: address }, { label: None, name: spender, typ: address }] -> u256

note: 
   ┌─ erc20_token.fe:58:16
   │
58 │         return self._allowances[owner][spender]
   │                ^^^^ ERC20

note: 
   ┌─ erc20_token.fe:58:16
   │
58 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^ ^^^^^ address
   │                │                 
   │                SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:58:16
   │
58 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
   │                │                        
   │                SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:58:16
   │
58 │         return self._allowances[owner][spender]
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:61:5
   │  
61 │ ╭     pub fn approve(mut self, mut ctx: Context, spender: address, value: u256) -> bool {
62 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
63 │ │         return true
64 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: spender, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:62:9
   │
62 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │         ^^^^          ^^^         ^^^ mut Context
   │         │             │            
   │         │             mut Context
   │         mut ERC20

note: 
   ┌─ erc20_token.fe:62:35
   │
62 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^ u256
   │                                   │                 │         
   │                                   │                 address
   │                                   address

note: 
   ┌─ erc20_token.fe:62:9
   │
62 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
63 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:66:5
   │  
66 │ ╭     pub fn transferFrom(mut self, mut ctx: Context, sender: address, recipient: address, value: u256) -> bool {
67 │ │         assert self._allowances[sender][ctx.msg_sender()] >= value
68 │ │         self._transfer(ctx, sender, recipient, value)
69 │ │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
70 │ │         return true
71 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: sender, typ: address }, { label: None, name: recipient, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:67:16
   │
67 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^ mut ERC20

note: 
   ┌─ erc20_token.fe:67:16
   │
67 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^ ^^^^^^ address
   │                │                 
   │                mut SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:67:16
   │
67 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^ mut Context
   │                │                         
   │                mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:67:41
   │
67 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                                         ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:67:16
   │
67 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ u256
   │                │                                              
   │                mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:67:16
   │
67 │         assert self._allowances[sender][ctx.msg_sender()] >= value
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
68 │         self._transfer(ctx, sender, recipient, value)
   │         ^^^^           ^^^  ^^^^^^  ^^^^^^^^^  ^^^^^ u256
   │         │              │    │       │           
   │         │              │    │       address
   │         │              │    address
   │         │              mut Context
   │         mut ERC20

note: 
   ┌─ erc20_token.fe:68:9
   │
68 │         self._transfer(ctx, sender, recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │         ^^^^          ^^^         ^^^^^^           ^^^ mut Context
   │         │             │           │                 
   │         │             │           address
   │         │             mut Context
   │         mut ERC20

note: 
   ┌─ erc20_token.fe:69:52
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                    ^^^^^^^^^^^^^^^^         ^^^^ mut ERC20
   │                                                    │                         
   │                                                    address

note: 
   ┌─ erc20_token.fe:69:77
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^ ^^^^^^ address
   │                                                                             │                 
   │                                                                             mut SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:69:77
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^ mut Context
   │                                                                             │                         
   │                                                                             mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:69:102
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                                                      ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:69:77
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                                                             │                                             
   │                                                                             mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:69:77
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:69:9
   │
69 │         self._approve(ctx, owner: sender, spender: ctx.msg_sender(), value: self._allowances[sender][ctx.msg_sender()] - value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
70 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:73:5
   │  
73 │ ╭     pub fn increaseAllowance(mut self, mut ctx: Context, spender: address, addedValue: u256) -> bool {
74 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
75 │ │         return true
76 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: spender, typ: address }, { label: None, name: addedValue, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:74:9
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │         ^^^^          ^^^         ^^^ mut Context
   │         │             │            
   │         │             mut Context
   │         mut ERC20

note: 
   ┌─ erc20_token.fe:74:35
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^         ^^^^ mut ERC20
   │                                   │                 │                
   │                                   │                 address
   │                                   address

note: 
   ┌─ erc20_token.fe:74:69
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^ ^^^ mut Context
   │                                                                     │                 
   │                                                                     mut SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:74:86
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                                      ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:74:69
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                                                     │                                   
   │                                                                     mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:74:69
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^ u256
   │                                                                     │                                              
   │                                                                     mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:74:69
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:74:9
   │
74 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] + addedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
75 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:78:5
   │  
78 │ ╭     pub fn decreaseAllowance(mut self, mut ctx: Context, spender: address, subtractedValue: u256) -> bool {
79 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
80 │ │         return true
81 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: spender, typ: address }, { label: None, name: subtractedValue, typ: u256 }] -> bool

note: 
   ┌─ erc20_token.fe:79:9
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │         ^^^^          ^^^         ^^^ mut Context
   │         │             │            
   │         │             mut Context
   │         mut ERC20

note: 
   ┌─ erc20_token.fe:79:35
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^         ^^^^ mut ERC20
   │                                   │                 │                
   │                                   │                 address
   │                                   address

note: 
   ┌─ erc20_token.fe:79:69
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^ ^^^ mut Context
   │                                                                     │                 
   │                                                                     mut SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ erc20_token.fe:79:86
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                                      ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:79:69
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                                                     │                                   
   │                                                                     mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:79:69
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ u256
   │                                                                     │                                              
   │                                                                     mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:79:69
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ erc20_token.fe:79:9
   │
79 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value: self._allowances[ctx.msg_sender()][spender] - subtractedValue)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
80 │         return true
   │                ^^^^ bool

note: 
   ┌─ erc20_token.fe:83:5
   │  
83 │ ╭     fn _transfer(mut self, mut ctx: Context, sender: address, recipient: address, value: u256) {
84 │ │         assert sender != 0
85 │ │         assert recipient != 0
86 │ │         _before_token_transfer(from: sender, to: recipient, value)
   · │
89 │ │         ctx.emit(Transfer(from: sender, to: recipient, value))
90 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: sender, typ: address }, { label: None, name: recipient, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ erc20_token.fe:84:16
   │
84 │         assert sender != 0
   │                ^^^^^^    ^ address
   │                │          
   │                address

note: 
   ┌─ erc20_token.fe:84:16
   │
84 │         assert sender != 0
   │                ^^^^^^^^^^^ bool
85 │         assert recipient != 0
   │                ^^^^^^^^^    ^ address
   │                │             
   │                address

note: 
   ┌─ erc20_token.fe:85:16
   │
85 │         assert recipient != 0
   │                ^^^^^^^^^^^^^^ bool
86 │         _before_token_transfer(from: sender, to: recipient, value)
   │                                      ^^^^^^      ^^^^^^^^^  ^^^^^ u256
   │                                      │           │           
   │                                      │           address
   │                                      address

note: 
   ┌─ erc20_token.fe:86:9
   │
86 │         _before_token_transfer(from: sender, to: recipient, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
87 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^ mut ERC20

note: 
   ┌─ erc20_token.fe:87:9
   │
87 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^ ^^^^^^ address
   │         │               
   │         mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:87:9
   │
87 │         self._balances[sender] = self._balances[sender] - value
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut ERC20
   │         │                         
   │         mut SPtr<u256>

note: 
   ┌─ erc20_token.fe:87:34
   │
87 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^ ^^^^^^ address
   │                                  │               
   │                                  mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:87:34
   │
87 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                  │                         
   │                                  mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:87:34
   │
87 │         self._balances[sender] = self._balances[sender] - value
   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
88 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^ mut ERC20

note: 
   ┌─ erc20_token.fe:88:9
   │
88 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^^^ address
   │         │               
   │         mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:88:9
   │
88 │         self._balances[recipient] = self._balances[recipient] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut ERC20
   │         │                            
   │         mut SPtr<u256>

note: 
   ┌─ erc20_token.fe:88:37
   │
88 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^ ^^^^^^^^^ address
   │                                     │               
   │                                     mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:88:37
   │
88 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                     │                            
   │                                     mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:88:37
   │
88 │         self._balances[recipient] = self._balances[recipient] + value
   │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
89 │         ctx.emit(Transfer(from: sender, to: recipient, value))
   │         ^^^                     ^^^^^^      ^^^^^^^^^  ^^^^^ u256
   │         │                       │           │           
   │         │                       │           address
   │         │                       address
   │         mut Context

note: 
   ┌─ erc20_token.fe:89:18
   │
89 │         ctx.emit(Transfer(from: sender, to: recipient, value))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Transfer

note: 
   ┌─ erc20_token.fe:89:9
   │
89 │         ctx.emit(Transfer(from: sender, to: recipient, value))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ erc20_token.fe:92:5
   │  
92 │ ╭     fn _mint(mut self, mut ctx: Context, account: address, value: u256) {
93 │ │         assert account != address(0)
94 │ │         _before_token_transfer(from: address(0), to: account, value)
95 │ │         self._total_supply = self._total_supply + value
96 │ │         self._balances[account] = self._balances[account] + value
97 │ │         ctx.emit(Transfer(from: address(0), to: account, value))
98 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: account, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ erc20_token.fe:93:16
   │
93 │         assert account != address(0)
   │                ^^^^^^^            ^ u256
   │                │                   
   │                address

note: 
   ┌─ erc20_token.fe:93:27
   │
93 │         assert account != address(0)
   │                           ^^^^^^^^^^ address

note: 
   ┌─ erc20_token.fe:93:16
   │
93 │         assert account != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
94 │         _before_token_transfer(from: address(0), to: account, value)
   │                                              ^ u256

note: 
   ┌─ erc20_token.fe:94:38
   │
94 │         _before_token_transfer(from: address(0), to: account, value)
   │                                      ^^^^^^^^^^      ^^^^^^^  ^^^^^ u256
   │                                      │               │         
   │                                      │               address
   │                                      address

note: 
   ┌─ erc20_token.fe:94:9
   │
94 │         _before_token_transfer(from: address(0), to: account, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
95 │         self._total_supply = self._total_supply + value
   │         ^^^^ mut ERC20

note: 
   ┌─ erc20_token.fe:95:9
   │
95 │         self._total_supply = self._total_supply + value
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ mut ERC20
   │         │                     
   │         mut SPtr<u256>

note: 
   ┌─ erc20_token.fe:95:30
   │
95 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                              │                     
   │                              mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:95:30
   │
95 │         self._total_supply = self._total_supply + value
   │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
96 │         self._balances[account] = self._balances[account] + value
   │         ^^^^ mut ERC20

note: 
   ┌─ erc20_token.fe:96:9
   │
96 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^ ^^^^^^^ address
   │         │               
   │         mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:96:9
   │
96 │         self._balances[account] = self._balances[account] + value
   │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut ERC20
   │         │                          
   │         mut SPtr<u256>

note: 
   ┌─ erc20_token.fe:96:35
   │
96 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address
   │                                   │               
   │                                   mut SPtr<Map<address, u256>>

note: 
   ┌─ erc20_token.fe:96:35
   │
96 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                                   │                          
   │                                   mut SPtr<u256> -Load-> u256

note: 
   ┌─ erc20_token.fe:96:35
   │
96 │         self._balances[account] = self._balances[account] + value
   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
97 │         ctx.emit(Transfer(from: address(0), to: account, value))
   │         ^^^                             ^ u256
   │         │                                
   │         mut Context

note: 
   ┌─ erc20_token.fe:97:33
   │
97 │         ctx.emit(Transfer(from: address(0), to: account, value))
   │                                 ^^^^^^^^^^      ^^^^^^^  ^^^^^ u256
   │                                 │               │         
   │                                 │               address
   │                                 address

note: 
   ┌─ erc20_token.fe:97:18
   │
97 │         ctx.emit(Transfer(from: address(0), to: account, value))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Transfer

note: 
   ┌─ erc20_token.fe:97:9
   │
97 │         ctx.emit(Transfer(from: address(0), to: account, value))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ erc20_token.fe:100:5
    │  
100 │ ╭     fn _burn(mut self, mut ctx: Context, account: address, value: u256) {
101 │ │         assert account != address(0)
102 │ │         _before_token_transfer(from: account, to: address(0), value)
103 │ │         self._balances[account] = self._balances[account] - value
104 │ │         self._total_supply = self._total_supply - value
105 │ │         ctx.emit(Transfer(from: account, to: address(0), value))
106 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: account, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
    ┌─ erc20_token.fe:101:16
    │
101 │         assert account != address(0)
    │                ^^^^^^^            ^ u256
    │                │                   
    │                address

note: 
    ┌─ erc20_token.fe:101:27
    │
101 │         assert account != address(0)
    │                           ^^^^^^^^^^ address

note: 
    ┌─ erc20_token.fe:101:16
    │
101 │         assert account != address(0)
    │                ^^^^^^^^^^^^^^^^^^^^^ bool
102 │         _before_token_transfer(from: account, to: address(0), value)
    │                                      ^^^^^^^              ^ u256
    │                                      │                     
    │                                      address

note: 
    ┌─ erc20_token.fe:102:51
    │
102 │         _before_token_transfer(from: account, to: address(0), value)
    │                                                   ^^^^^^^^^^  ^^^^^ u256
    │                                                   │            
    │                                                   address

note: 
    ┌─ erc20_token.fe:102:9
    │
102 │         _before_token_transfer(from: account, to: address(0), value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
103 │         self._balances[account] = self._balances[account] - value
    │         ^^^^ mut ERC20

note: 
    ┌─ erc20_token.fe:103:9
    │
103 │         self._balances[account] = self._balances[account] - value
    │         ^^^^^^^^^^^^^^ ^^^^^^^ address
    │         │               
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ erc20_token.fe:103:9
    │
103 │         self._balances[account] = self._balances[account] - value
    │         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut ERC20
    │         │                          
    │         mut SPtr<u256>

note: 
    ┌─ erc20_token.fe:103:35
    │
103 │         self._balances[account] = self._balances[account] - value
    │                                   ^^^^^^^^^^^^^^ ^^^^^^^ address
    │                                   │               
    │                                   mut SPtr<Map<address, u256>>

note: 
    ┌─ erc20_token.fe:103:35
    │
103 │         self._balances[account] = self._balances[account] - value
    │                                   ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                                   │                          
    │                                   mut SPtr<u256> -Load-> u256

note: 
    ┌─ erc20_token.fe:103:35
    │
103 │         self._balances[account] = self._balances[account] - value
    │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
104 │         self._total_supply = self._total_supply - value
    │         ^^^^ mut ERC20

note: 
    ┌─ erc20_token.fe:104:9
    │
104 │         self._total_supply = self._total_supply - value
    │         ^^^^^^^^^^^^^^^^^^   ^^^^ mut ERC20
    │         │                     
    │         mut SPtr<u256>

note: 
    ┌─ erc20_token.fe:104:30
    │
104 │         self._total_supply = self._total_supply - value
    │                              ^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                              │                     
    │                              mut SPtr<u256> -Load-> u256

note: 
    ┌─ erc20_token.fe:104:30
    │
104 │         self._total_supply = self._total_supply - value
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
105 │         ctx.emit(Transfer(from: account, to: address(0), value))
    │         ^^^                     ^^^^^^^              ^ u256
    │         │                       │                     
    │         │                       address
    │         mut Context

note: 
    ┌─ erc20_token.fe:105:46
    │
105 │         ctx.emit(Transfer(from: account, to: address(0), value))
    │                                              ^^^^^^^^^^  ^^^^^ u256
    │                                              │            
    │                                              address

note: 
    ┌─ erc20_token.fe:105:18
    │
105 │         ctx.emit(Transfer(from: account, to: address(0), value))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Transfer

note: 
    ┌─ erc20_token.fe:105:9
    │
105 │         ctx.emit(Transfer(from: account, to: address(0), value))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ erc20_token.fe:108:5
    │  
108 │ ╭     fn _approve(mut self, mut ctx: Context, owner: address, spender: address, value: u256) {
109 │ │         assert owner != address(0)
110 │ │         assert spender != address(0)
111 │ │         self._allowances[owner][spender] = value
112 │ │         ctx.emit(Approval(owner, spender, value))
113 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: owner, typ: address }, { label: None, name: spender, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
    ┌─ erc20_token.fe:109:16
    │
109 │         assert owner != address(0)
    │                ^^^^^            ^ u256
    │                │                 
    │                address

note: 
    ┌─ erc20_token.fe:109:25
    │
109 │         assert owner != address(0)
    │                         ^^^^^^^^^^ address

note: 
    ┌─ erc20_token.fe:109:16
    │
109 │         assert owner != address(0)
    │                ^^^^^^^^^^^^^^^^^^^ bool
110 │         assert spender != address(0)
    │                ^^^^^^^            ^ u256
    │                │                   
    │                address

note: 
    ┌─ erc20_token.fe:110:27
    │
110 │         assert spender != address(0)
    │                           ^^^^^^^^^^ address

note: 
    ┌─ erc20_token.fe:110:16
    │
110 │         assert spender != address(0)
    │                ^^^^^^^^^^^^^^^^^^^^^ bool
111 │         self._allowances[owner][spender] = value
    │         ^^^^ mut ERC20

note: 
    ┌─ erc20_token.fe:111:9
    │
111 │         self._allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^ ^^^^^ address
    │         │                 
    │         mut SPtr<Map<address, Map<address, u256>>>

note: 
    ┌─ erc20_token.fe:111:9
    │
111 │         self._allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
    │         │                        
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ erc20_token.fe:111:9
    │
111 │         self._allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │         │                                   
    │         mut SPtr<u256>
112 │         ctx.emit(Approval(owner, spender, value))
    │         ^^^               ^^^^^  ^^^^^^^  ^^^^^ u256
    │         │                 │      │         
    │         │                 │      address
    │         │                 address
    │         mut Context

note: 
    ┌─ erc20_token.fe:112:18
    │
112 │         ctx.emit(Approval(owner, spender, value))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Approval

note: 
    ┌─ erc20_token.fe:112:9
    │
112 │         ctx.emit(Approval(owner, spender, value))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ erc20_token.fe:115:5
    │  
115 │ ╭     fn _setup_decimals(mut self, _ decimals_: u8) {
116 │ │         self._decimals = decimals_
117 │ │     }
    │ ╰─────^ params: [mut self, { label: Some("_"), name: decimals_, typ: u8 }] -> ()

note: 
    ┌─ erc20_token.fe:116:9
    │
116 │         self._decimals = decimals_
    │         ^^^^ mut ERC20

note: 
    ┌─ erc20_token.fe:116:9
    │
116 │         self._decimals = decimals_
    │         ^^^^^^^^^^^^^^   ^^^^^^^^^ u8
    │         │                 
    │         mut SPtr<u8>

note: 
    ┌─ erc20_token.fe:119:5
    │
119 │     fn _before_token_transfer(from: address, to: address, _ value: u256) {}
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ params: [{ label: None, name: from, typ: address }, { label: None, name: to, typ: address }, { label: Some("_"), name: value, typ: u256 }] -> ()


