---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ events.fe:3:5
  │
3 │     pub num1: u256
  │     ^^^^^^^^^^^^^^ u256
4 │     pub num2: u256
  │     ^^^^^^^^^^^^^^ u256

note: 
  ┌─ events.fe:8:5
  │
8 │     pub num: u256
  │     ^^^^^^^^^^^^^ u256
9 │     pub addr: address
  │     ^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ events.fe:13:5
   │
13 │     pub num1: u256
   │     ^^^^^^^^^^^^^^ u256
14 │     #indexed
15 │     pub addr: address
   │     ^^^^^^^^^^^^^^^^^ address
16 │     pub num2: u256
   │     ^^^^^^^^^^^^^^ u256
17 │     pub my_bytes: Array<u8, 100>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 100>

note: 
   ┌─ events.fe:21:5
   │
21 │     pub addrs: Array<address, 2>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 2>

note: 
   ┌─ events.fe:25:5
   │
25 │     pub inner: Array<Array<Nums, 2>, 2>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<Array<Nums, 2>, 2>

note: 
   ┌─ events.fe:30:5
   │  
30 │ ╭     pub fn emit_nums(mut ctx: Context) {
31 │ │         ctx.emit(Nums(num1: 26, num2: 42))
32 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ events.fe:31:9
   │
31 │         ctx.emit(Nums(num1: 26, num2: 42))
   │         ^^^                 ^^        ^^ u256
   │         │                   │          
   │         │                   u256
   │         mut Context

note: 
   ┌─ events.fe:31:18
   │
31 │         ctx.emit(Nums(num1: 26, num2: 42))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^ Nums

note: 
   ┌─ events.fe:31:9
   │
31 │         ctx.emit(Nums(num1: 26, num2: 42))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:34:5
   │  
34 │ ╭     pub fn emit_bases(mut ctx: Context, addr: address) {
35 │ │         ctx.emit(Bases(num: 26, addr))
36 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }, { label: None, name: addr, typ: address }] -> ()

note: 
   ┌─ events.fe:35:9
   │
35 │         ctx.emit(Bases(num: 26, addr))
   │         ^^^                 ^^  ^^^^ address
   │         │                   │    
   │         │                   u256
   │         mut Context

note: 
   ┌─ events.fe:35:18
   │
35 │         ctx.emit(Bases(num: 26, addr))
   │                  ^^^^^^^^^^^^^^^^^^^^ Bases

note: 
   ┌─ events.fe:35:9
   │
35 │         ctx.emit(Bases(num: 26, addr))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:38:5
   │  
38 │ ╭     pub fn emit_mix(mut ctx: Context, addr: address, my_bytes: Array<u8, 100>) {
39 │ │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
40 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }, { label: None, name: addr, typ: address }, { label: None, name: my_bytes, typ: Array<u8, 100> }] -> ()

note: 
   ┌─ events.fe:39:9
   │
39 │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
   │         ^^^                ^^  ^^^^        ^^  ^^^^^^^^ Array<u8, 100> -Copy-> Array<u8, 100>
   │         │                  │   │           │    
   │         │                  │   │           u256
   │         │                  │   address
   │         │                  u256
   │         mut Context

note: 
   ┌─ events.fe:39:18
   │
39 │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Mix

note: 
   ┌─ events.fe:39:9
   │
39 │         ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:42:5
   │  
42 │ ╭     pub fn emit_addresses(mut ctx: Context, addr1: address, addr2: address) {
43 │ │         let mut addrs: Array<address, 2> = [address(0); 2]
44 │ │         addrs[0] = addr1
45 │ │         addrs[1] = addr2
46 │ │         ctx.emit(Addresses(addrs))
47 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }, { label: None, name: addr1, typ: address }, { label: None, name: addr2, typ: address }] -> ()

note: 
   ┌─ events.fe:43:17
   │
43 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                 ^^^^^ mut Array<address, 2>

note: 
   ┌─ events.fe:43:53
   │
43 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                                                     ^ u256

note: 
   ┌─ events.fe:43:45
   │
43 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                                             ^^^^^^^^^^  ^ u256
   │                                             │            
   │                                             address

note: 
   ┌─ events.fe:43:44
   │
43 │         let mut addrs: Array<address, 2> = [address(0); 2]
   │                                            ^^^^^^^^^^^^^^^ Array<address, 2>
44 │         addrs[0] = addr1
   │         ^^^^^ ^ u256
   │         │      
   │         mut Array<address, 2>

note: 
   ┌─ events.fe:44:9
   │
44 │         addrs[0] = addr1
   │         ^^^^^^^^   ^^^^^ address
   │         │           
   │         mut address
45 │         addrs[1] = addr2
   │         ^^^^^ ^ u256
   │         │      
   │         mut Array<address, 2>

note: 
   ┌─ events.fe:45:9
   │
45 │         addrs[1] = addr2
   │         ^^^^^^^^   ^^^^^ address
   │         │           
   │         mut address
46 │         ctx.emit(Addresses(addrs))
   │         ^^^                ^^^^^ mut Array<address, 2> -Copy-> Array<address, 2>
   │         │                   
   │         mut Context

note: 
   ┌─ events.fe:46:18
   │
46 │         ctx.emit(Addresses(addrs))
   │                  ^^^^^^^^^^^^^^^^ Addresses

note: 
   ┌─ events.fe:46:9
   │
46 │         ctx.emit(Addresses(addrs))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ events.fe:49:5
   │  
49 │ ╭     pub fn emit_nested_array(mut ctx: Context) {
50 │ │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
51 │ │         let nested_array: NestedArray = NestedArray(inner)
52 │ │         ctx.emit(nested_array)
53 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ events.fe:50:13
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │             ^^^^^ Array<Array<Nums, 2>, 2>
51 │         let nested_array: NestedArray = NestedArray(inner)
   │             ^^^^^^^^^^^^ NestedArray

note: 
   ┌─ events.fe:50:60
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                            ^        ^ u256
   │                                                            │         
   │                                                            u256

note: 
   ┌─ events.fe:50:49
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                 ^^^^^^^^^^^^^^^^^^^^^^             ^        ^ u256
   │                                                 │                                  │         
   │                                                 │                                  u256
   │                                                 Nums

note: 
   ┌─ events.fe:50:73
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                                         ^^^^^^^^^^^^^^^^^^^^^^ Nums

note: 
   ┌─ events.fe:50:48
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^        ^ u256
   │                                                │                                                             │         
   │                                                │                                                             u256
   │                                                Array<Nums, 2>

note: 
   ┌─ events.fe:50:99
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^             ^        ^ u256
   │                                                                                                   │                                  │         
   │                                                                                                   │                                  u256
   │                                                                                                   Nums

note: 
   ┌─ events.fe:50:123
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^ Nums

note: 
   ┌─ events.fe:50:98
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<Nums, 2>

note: 
   ┌─ events.fe:50:47
   │
50 │         let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
   │                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<Array<Nums, 2>, 2>
51 │         let nested_array: NestedArray = NestedArray(inner)
   │                                                     ^^^^^ Array<Array<Nums, 2>, 2> -Copy-> Array<Array<Nums, 2>, 2>

note: 
   ┌─ events.fe:51:41
   │
51 │         let nested_array: NestedArray = NestedArray(inner)
   │                                         ^^^^^^^^^^^^^^^^^^ NestedArray
52 │         ctx.emit(nested_array)
   │         ^^^      ^^^^^^^^^^^^ NestedArray
   │         │         
   │         mut Context

note: 
   ┌─ events.fe:52:9
   │
52 │         ctx.emit(nested_array)
   │         ^^^^^^^^^^^^^^^^^^^^^^ ()


