---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ external_contract.fe:2:5
  │
2 │     pub my_num: u256
  │     ^^^^^^^^^^^^^^^^ u256
3 │     pub my_addrs: Array<address, 5>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
4 │     pub my_string: String<11>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ String<11>

note: 
   ┌─ external_contract.fe:9:5
   │  
 9 │ ╭     pub fn emit_event(self, mut ctx: Context, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
10 │ │         ctx.emit(MyEvent(my_num, my_addrs, my_string))
11 │ │     }
   │ ╰─────^ params: [self, { label: None, name: ctx, typ: mut Context }, { label: None, name: my_num, typ: u256 }, { label: None, name: my_addrs, typ: Array<address, 5> }, { label: None, name: my_string, typ: String<11> }] -> ()

note: 
   ┌─ external_contract.fe:10:9
   │
10 │         ctx.emit(MyEvent(my_num, my_addrs, my_string))
   │         ^^^              ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11> -Copy-> String<11>
   │         │                │       │          
   │         │                │       Array<address, 5> -Copy-> Array<address, 5>
   │         │                u256
   │         mut Context

note: 
   ┌─ external_contract.fe:10:18
   │
10 │         ctx.emit(MyEvent(my_num, my_addrs, my_string))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEvent

note: 
   ┌─ external_contract.fe:10:9
   │
10 │         ctx.emit(MyEvent(my_num, my_addrs, my_string))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ external_contract.fe:13:5
   │  
13 │ ╭     pub fn build_array(self, a: u256, b: u256) -> Array<u256, 3> {
14 │ │         let mut my_array: Array<u256, 3> = [0; 3]
15 │ │         my_array[0] = a
16 │ │         my_array[1] = a * b
17 │ │         my_array[2] = b
18 │ │         return my_array
19 │ │     }
   │ ╰─────^ params: [self, { label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> Array<u256, 3>

note: 
   ┌─ external_contract.fe:14:17
   │
14 │         let mut my_array: Array<u256, 3> = [0; 3]
   │                 ^^^^^^^^ mut Array<u256, 3>

note: 
   ┌─ external_contract.fe:14:45
   │
14 │         let mut my_array: Array<u256, 3> = [0; 3]
   │                                             ^  ^ u256
   │                                             │   
   │                                             u256

note: 
   ┌─ external_contract.fe:14:44
   │
14 │         let mut my_array: Array<u256, 3> = [0; 3]
   │                                            ^^^^^^ Array<u256, 3>
15 │         my_array[0] = a
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 3>

note: 
   ┌─ external_contract.fe:15:9
   │
15 │         my_array[0] = a
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut u256
16 │         my_array[1] = a * b
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 3>

note: 
   ┌─ external_contract.fe:16:9
   │
16 │         my_array[1] = a * b
   │         ^^^^^^^^^^^   ^   ^ u256
   │         │             │    
   │         │             u256
   │         mut u256

note: 
   ┌─ external_contract.fe:16:23
   │
16 │         my_array[1] = a * b
   │                       ^^^^^ u256
17 │         my_array[2] = b
   │         ^^^^^^^^ ^ u256
   │         │         
   │         mut Array<u256, 3>

note: 
   ┌─ external_contract.fe:17:9
   │
17 │         my_array[2] = b
   │         ^^^^^^^^^^^   ^ u256
   │         │              
   │         mut u256
18 │         return my_array
   │                ^^^^^^^^ mut Array<u256, 3> -Copy-> Array<u256, 3>

note: 
   ┌─ external_contract.fe:21:5
   │  
21 │ ╭     pub fn pure_add(_ x: u256, _ y: u256) -> u256 {
22 │ │         return x + y
23 │ │     }
   │ ╰─────^ params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ external_contract.fe:22:16
   │
22 │         return x + y
   │                ^   ^ u256
   │                │    
   │                u256

note: 
   ┌─ external_contract.fe:22:16
   │
22 │         return x + y
   │                ^^^^^ u256

note: 
   ┌─ external_contract.fe:27:5
   │  
27 │ ╭     pub fn call_emit_event(mut ctx: Context, foo_address: address, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
28 │ │         let foo: Foo = Foo(foo_address)
29 │ │         foo.emit_event(ctx, my_num, my_addrs, my_string)
30 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }, { label: None, name: foo_address, typ: address }, { label: None, name: my_num, typ: u256 }, { label: None, name: my_addrs, typ: Array<address, 5> }, { label: None, name: my_string, typ: String<11> }] -> ()

note: 
   ┌─ external_contract.fe:28:13
   │
28 │         let foo: Foo = Foo(foo_address)
   │             ^^^ Foo

note: 
   ┌─ external_contract.fe:28:28
   │
28 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address

note: 
   ┌─ external_contract.fe:28:24
   │
28 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo
29 │         foo.emit_event(ctx, my_num, my_addrs, my_string)
   │         ^^^            ^^^  ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>
   │         │              │    │       │          
   │         │              │    │       Array<address, 5>
   │         │              │    u256
   │         │              mut Context
   │         Foo

note: 
   ┌─ external_contract.fe:29:9
   │
29 │         foo.emit_event(ctx, my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ external_contract.fe:32:5
   │  
32 │ ╭     pub fn call_build_array(foo_address: address, a: u256, b: u256) -> Array<u256, 3> {
33 │ │         let foo: Foo = Foo(foo_address)
34 │ │         return foo.build_array(a, b)
35 │ │     }
   │ ╰─────^ params: [{ label: None, name: foo_address, typ: address }, { label: None, name: a, typ: u256 }, { label: None, name: b, typ: u256 }] -> Array<u256, 3>

note: 
   ┌─ external_contract.fe:33:13
   │
33 │         let foo: Foo = Foo(foo_address)
   │             ^^^ Foo

note: 
   ┌─ external_contract.fe:33:28
   │
33 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address

note: 
   ┌─ external_contract.fe:33:24
   │
33 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo
34 │         return foo.build_array(a, b)
   │                ^^^             ^  ^ u256
   │                │               │   
   │                │               u256
   │                Foo

note: 
   ┌─ external_contract.fe:34:16
   │
34 │         return foo.build_array(a, b)
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 3> -Copy-> Array<u256, 3>

note: 
   ┌─ external_contract.fe:37:5
   │  
37 │ ╭     pub fn add(_ x: u256, _ y: u256) -> u256 {
38 │ │         return Foo::pure_add(x, y)
39 │ │     }
   │ ╰─────^ params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ external_contract.fe:38:30
   │
38 │         return Foo::pure_add(x, y)
   │                              ^  ^ u256
   │                              │   
   │                              u256

note: 
   ┌─ external_contract.fe:38:16
   │
38 │         return Foo::pure_add(x, y)
   │                ^^^^^^^^^^^^^^^^^^^ u256


