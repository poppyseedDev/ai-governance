---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ guest_book.fe:3:5
  │
3 │     pub book_msg: String<100>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ String<100>

note: 
   ┌─ guest_book.fe:10:5
   │
10 │     messages: Map<address, String<100>>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, String<100>>

note: 
   ┌─ guest_book.fe:14:5
   │  
14 │ ╭     pub fn sign(mut self, mut ctx: Context, book_msg: String<100>) {
15 │ │         // All storage access is explicit using `self.<some-key>`
16 │ │         self.messages[ctx.msg_sender()] = book_msg
17 │ │ 
18 │ │         // Emit the `Signed` event.
19 │ │         ctx.emit(Signed(book_msg))
20 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: book_msg, typ: String<100> }] -> ()

note: 
   ┌─ guest_book.fe:16:9
   │
16 │         self.messages[ctx.msg_sender()] = book_msg
   │         ^^^^ mut GuestBook

note: 
   ┌─ guest_book.fe:16:9
   │
16 │         self.messages[ctx.msg_sender()] = book_msg
   │         ^^^^^^^^^^^^^ ^^^ mut Context
   │         │              
   │         mut SPtr<Map<address, String<100>>>

note: 
   ┌─ guest_book.fe:16:23
   │
16 │         self.messages[ctx.msg_sender()] = book_msg
   │                       ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ guest_book.fe:16:9
   │
16 │         self.messages[ctx.msg_sender()] = book_msg
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^ String<100>
   │         │                                  
   │         mut SPtr<String<100>>
   ·
19 │         ctx.emit(Signed(book_msg))
   │         ^^^             ^^^^^^^^ String<100> -Copy-> String<100>
   │         │                
   │         mut Context

note: 
   ┌─ guest_book.fe:19:18
   │
19 │         ctx.emit(Signed(book_msg))
   │                  ^^^^^^^^^^^^^^^^ Signed

note: 
   ┌─ guest_book.fe:19:9
   │
19 │         ctx.emit(Signed(book_msg))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ guest_book.fe:22:5
   │  
22 │ ╭     pub fn get_msg(self, addr: address) -> String<100> {
23 │ │         // Copying data from storage to memory
24 │ │         // has to be done explicitly via `to_mem()`
25 │ │         return self.messages[addr].to_mem()
26 │ │     }
   │ ╰─────^ params: [self, { label: None, name: addr, typ: address }] -> String<100>

note: 
   ┌─ guest_book.fe:25:16
   │
25 │         return self.messages[addr].to_mem()
   │                ^^^^ GuestBook

note: 
   ┌─ guest_book.fe:25:16
   │
25 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^ ^^^^ address
   │                │              
   │                SPtr<Map<address, String<100>>>

note: 
   ┌─ guest_book.fe:25:16
   │
25 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ SPtr<String<100>>

note: 
   ┌─ guest_book.fe:25:16
   │
25 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<100>


