---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ nested_map.fe:2:5
  │
2 │     bar: Map<address, Map<address, u256>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
3 │     baz: Map<address, Map<u256, bool>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<u256, bool>>

note: 
  ┌─ nested_map.fe:5:5
  │  
5 │ ╭     pub fn read_bar(self, a: address, b: address) -> u256 {
6 │ │         return self.bar[a][b]
7 │ │     }
  │ ╰─────^ params: [self, { label: None, name: a, typ: address }, { label: None, name: b, typ: address }] -> u256

note: 
  ┌─ nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^ Foo

note: 
  ┌─ nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^^^^^ ^ address
  │                │         
  │                SPtr<Map<address, Map<address, u256>>>

note: 
  ┌─ nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^^^^^^^^ ^ address
  │                │            
  │                SPtr<Map<address, u256>>

note: 
  ┌─ nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
   ┌─ nested_map.fe:9:5
   │  
 9 │ ╭     pub fn write_bar(mut self, a: address, b: address, value: u256) {
10 │ │         self.bar[a][b] = value
11 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: a, typ: address }, { label: None, name: b, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ nested_map.fe:10:9
   │
10 │         self.bar[a][b] = value
   │         ^^^^ mut Foo

note: 
   ┌─ nested_map.fe:10:9
   │
10 │         self.bar[a][b] = value
   │         ^^^^^^^^ ^ address
   │         │         
   │         mut SPtr<Map<address, Map<address, u256>>>

note: 
   ┌─ nested_map.fe:10:9
   │
10 │         self.bar[a][b] = value
   │         ^^^^^^^^^^^ ^ address
   │         │            
   │         mut SPtr<Map<address, u256>>

note: 
   ┌─ nested_map.fe:10:9
   │
10 │         self.bar[a][b] = value
   │         ^^^^^^^^^^^^^^   ^^^^^ u256
   │         │                 
   │         mut SPtr<u256>

note: 
   ┌─ nested_map.fe:13:5
   │  
13 │ ╭     pub fn read_baz(self, a: address, b: u256) -> bool {
14 │ │         return self.baz[a][b]
15 │ │     }
   │ ╰─────^ params: [self, { label: None, name: a, typ: address }, { label: None, name: b, typ: u256 }] -> bool

note: 
   ┌─ nested_map.fe:14:16
   │
14 │         return self.baz[a][b]
   │                ^^^^ Foo

note: 
   ┌─ nested_map.fe:14:16
   │
14 │         return self.baz[a][b]
   │                ^^^^^^^^ ^ address
   │                │         
   │                SPtr<Map<address, Map<u256, bool>>>

note: 
   ┌─ nested_map.fe:14:16
   │
14 │         return self.baz[a][b]
   │                ^^^^^^^^^^^ ^ u256
   │                │            
   │                SPtr<Map<u256, bool>>

note: 
   ┌─ nested_map.fe:14:16
   │
14 │         return self.baz[a][b]
   │                ^^^^^^^^^^^^^^ SPtr<bool> -Load-> bool

note: 
   ┌─ nested_map.fe:17:5
   │  
17 │ ╭     pub fn write_baz(mut self, a: address, b: u256, value: bool) {
18 │ │         self.baz[a][b] = value
19 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: a, typ: address }, { label: None, name: b, typ: u256 }, { label: None, name: value, typ: bool }] -> ()

note: 
   ┌─ nested_map.fe:18:9
   │
18 │         self.baz[a][b] = value
   │         ^^^^ mut Foo

note: 
   ┌─ nested_map.fe:18:9
   │
18 │         self.baz[a][b] = value
   │         ^^^^^^^^ ^ address
   │         │         
   │         mut SPtr<Map<address, Map<u256, bool>>>

note: 
   ┌─ nested_map.fe:18:9
   │
18 │         self.baz[a][b] = value
   │         ^^^^^^^^^^^ ^ u256
   │         │            
   │         mut SPtr<Map<u256, bool>>

note: 
   ┌─ nested_map.fe:18:9
   │
18 │         self.baz[a][b] = value
   │         ^^^^^^^^^^^^^^   ^^^^^ bool
   │         │                 
   │         mut SPtr<bool>


