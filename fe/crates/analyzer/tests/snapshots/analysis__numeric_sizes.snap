---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ numeric_sizes.fe:3:1
  │
3 │ const I8_MIN: i8 = -128
  │ ^^^^^^^^^^^^^^^^^^^^^^^ i8

note: 
  ┌─ numeric_sizes.fe:4:1
  │
4 │ const I8_MAX: i8 = 127
  │ ^^^^^^^^^^^^^^^^^^^^^^ i8

note: 
  ┌─ numeric_sizes.fe:5:1
  │
5 │ const U8_MIN: u8 = 0
  │ ^^^^^^^^^^^^^^^^^^^^ u8

note: 
  ┌─ numeric_sizes.fe:6:1
  │
6 │ const U8_MAX: u8 = 255
  │ ^^^^^^^^^^^^^^^^^^^^^^ u8

note: 
  ┌─ numeric_sizes.fe:8:1
  │
8 │ const I16_MIN: i16 = -32768
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ i16

note: 
  ┌─ numeric_sizes.fe:9:1
  │
9 │ const I16_MAX: i16 = 32767
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^ i16

note: 
   ┌─ numeric_sizes.fe:10:1
   │
10 │ const U16_MIN: u16 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^ u16

note: 
   ┌─ numeric_sizes.fe:11:1
   │
11 │ const U16_MAX: u16 = 65535
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^ u16

note: 
   ┌─ numeric_sizes.fe:13:1
   │
13 │ const I32_MIN: i32 = -2147483648
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i32

note: 
   ┌─ numeric_sizes.fe:14:1
   │
14 │ const I32_MAX: i32 = 2147483647
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i32

note: 
   ┌─ numeric_sizes.fe:15:1
   │
15 │ const U32_MIN: u32 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^ u32

note: 
   ┌─ numeric_sizes.fe:16:1
   │
16 │ const U32_MAX: u32 = 4294967295
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u32

note: 
   ┌─ numeric_sizes.fe:18:1
   │
18 │ const I64_MIN: i64 = -9223372036854775808
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i64

note: 
   ┌─ numeric_sizes.fe:19:1
   │
19 │ const I64_MAX: i64 = 9223372036854775807
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i64

note: 
   ┌─ numeric_sizes.fe:20:1
   │
20 │ const U64_MIN: u64 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^ u64

note: 
   ┌─ numeric_sizes.fe:21:1
   │
21 │ const U64_MAX: u64 = 18446744073709551615
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u64

note: 
   ┌─ numeric_sizes.fe:23:1
   │
23 │ const I128_MIN: i128 = -170141183460469231731687303715884105728
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
   ┌─ numeric_sizes.fe:24:1
   │
24 │ const I128_MAX: i128 = 170141183460469231731687303715884105727
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
   ┌─ numeric_sizes.fe:25:1
   │
25 │ const U128_MIN: u128 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^^^ u128

note: 
   ┌─ numeric_sizes.fe:26:1
   │
26 │ const U128_MAX: u128 = 340282366920938463463374607431768211455
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u128

note: 
   ┌─ numeric_sizes.fe:28:1
   │
28 │ const I256_MIN: i256 = -57896044618658097711785492504343953926634992332820282019728792003956564819968
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
   ┌─ numeric_sizes.fe:29:1
   │
29 │ const I256_MAX: i256 = 57896044618658097711785492504343953926634992332820282019728792003956564819967
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
   ┌─ numeric_sizes.fe:30:1
   │
30 │ const U256_MIN: u256 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ numeric_sizes.fe:31:1
   │
31 │ const U256_MAX: u256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ numeric_sizes.fe:35:5
   │  
35 │ ╭     pub fn assert_min_max() {
36 │ │         assert u8::min() == U8_MIN
37 │ │         assert u16::min() == U16_MIN
38 │ │         assert u32::min() == U32_MIN
   · │
62 │ │         assert i256::max() == I256_MAX
63 │ │     }
   │ ╰─────^ params: [] -> ()

note: 
   ┌─ numeric_sizes.fe:36:16
   │
36 │         assert u8::min() == U8_MIN
   │                ^^^^^^^^^    ^^^^^^ u8
   │                │             
   │                Self

note: 
   ┌─ numeric_sizes.fe:36:16
   │
36 │         assert u8::min() == U8_MIN
   │                ^^^^^^^^^^^^^^^^^^^ bool
37 │         assert u16::min() == U16_MIN
   │                ^^^^^^^^^^    ^^^^^^^ u16
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:37:16
   │
37 │         assert u16::min() == U16_MIN
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
38 │         assert u32::min() == U32_MIN
   │                ^^^^^^^^^^    ^^^^^^^ u32
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:38:16
   │
38 │         assert u32::min() == U32_MIN
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
39 │         assert u64::min() == U64_MIN
   │                ^^^^^^^^^^    ^^^^^^^ u64
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:39:16
   │
39 │         assert u64::min() == U64_MIN
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
40 │         assert u128::min() == U128_MIN
   │                ^^^^^^^^^^^    ^^^^^^^^ u128
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:40:16
   │
40 │         assert u128::min() == U128_MIN
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool
41 │         assert u256::min() == U256_MIN
   │                ^^^^^^^^^^^    ^^^^^^^^ u256
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:41:16
   │
41 │         assert u256::min() == U256_MIN
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool
42 │         // TODO: Investigate why these can't be compared against their const values
43 │         assert i8::min() == get_i8_const_min()
   │                ^^^^^^^^^    ^^^^^^^^^^^^^^^^^^ i8
   │                │             
   │                Self

note: 
   ┌─ numeric_sizes.fe:43:16
   │
43 │         assert i8::min() == get_i8_const_min()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
44 │         assert i16::min() == get_i16_const_min()
   │                ^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^ i16
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:44:16
   │
44 │         assert i16::min() == get_i16_const_min()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
45 │         assert i32::min() == get_i32_const_min()
   │                ^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^ i32
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:45:16
   │
45 │         assert i32::min() == get_i32_const_min()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
46 │         assert i64::min() == get_i64_const_min()
   │                ^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^ i64
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:46:16
   │
46 │         assert i64::min() == get_i64_const_min()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
47 │         assert i128::min() == get_i128_const_min()
   │                ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^ i128
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:47:16
   │
47 │         assert i128::min() == get_i128_const_min()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
48 │         assert i256::min() == get_i256_const_min()
   │                ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^ i256
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:48:16
   │
48 │         assert i256::min() == get_i256_const_min()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
49 │ 
50 │         assert u8::max() == U8_MAX
   │                ^^^^^^^^^    ^^^^^^ u8
   │                │             
   │                Self

note: 
   ┌─ numeric_sizes.fe:50:16
   │
50 │         assert u8::max() == U8_MAX
   │                ^^^^^^^^^^^^^^^^^^^ bool
51 │         assert u16::max() == U16_MAX
   │                ^^^^^^^^^^    ^^^^^^^ u16
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:51:16
   │
51 │         assert u16::max() == U16_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
52 │         assert u32::max() == U32_MAX
   │                ^^^^^^^^^^    ^^^^^^^ u32
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:52:16
   │
52 │         assert u32::max() == U32_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
53 │         assert u64::max() == U64_MAX
   │                ^^^^^^^^^^    ^^^^^^^ u64
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:53:16
   │
53 │         assert u64::max() == U64_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
54 │         assert u128::max() == U128_MAX
   │                ^^^^^^^^^^^    ^^^^^^^^ u128
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:54:16
   │
54 │         assert u128::max() == U128_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool
55 │         assert u256::max() == U256_MAX
   │                ^^^^^^^^^^^    ^^^^^^^^ u256
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:55:16
   │
55 │         assert u256::max() == U256_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool
56 │ 
57 │         assert i8::max() == I8_MAX
   │                ^^^^^^^^^    ^^^^^^ i8
   │                │             
   │                Self

note: 
   ┌─ numeric_sizes.fe:57:16
   │
57 │         assert i8::max() == I8_MAX
   │                ^^^^^^^^^^^^^^^^^^^ bool
58 │         assert i16::max() == I16_MAX
   │                ^^^^^^^^^^    ^^^^^^^ i16
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:58:16
   │
58 │         assert i16::max() == I16_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
59 │         assert i32::max() == I32_MAX
   │                ^^^^^^^^^^    ^^^^^^^ i32
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:59:16
   │
59 │         assert i32::max() == I32_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
60 │         assert i64::max() == I64_MAX
   │                ^^^^^^^^^^    ^^^^^^^ i64
   │                │              
   │                Self

note: 
   ┌─ numeric_sizes.fe:60:16
   │
60 │         assert i64::max() == I64_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
61 │         assert i128::max() == I128_MAX
   │                ^^^^^^^^^^^    ^^^^^^^^ i128
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:61:16
   │
61 │         assert i128::max() == I128_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool
62 │         assert i256::max() == I256_MAX
   │                ^^^^^^^^^^^    ^^^^^^^^ i256
   │                │               
   │                Self

note: 
   ┌─ numeric_sizes.fe:62:16
   │
62 │         assert i256::max() == I256_MAX
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ numeric_sizes.fe:65:5
   │  
65 │ ╭     pub fn get_u8_min() -> u8 {
66 │ │         return u8(0)
67 │ │     }
   │ ╰─────^ params: [] -> u8

note: 
   ┌─ numeric_sizes.fe:66:19
   │
66 │         return u8(0)
   │                   ^ u8

note: 
   ┌─ numeric_sizes.fe:66:16
   │
66 │         return u8(0)
   │                ^^^^^ u8

note: 
   ┌─ numeric_sizes.fe:68:5
   │  
68 │ ╭     pub fn get_u8_const_min() -> u8 {
69 │ │         return U8_MIN
70 │ │     }
   │ ╰─────^ params: [] -> u8

note: 
   ┌─ numeric_sizes.fe:69:16
   │
69 │         return U8_MIN
   │                ^^^^^^ u8

note: 
   ┌─ numeric_sizes.fe:72:5
   │  
72 │ ╭     pub fn get_u16_min() -> u16 {
73 │ │         return u16(0)
74 │ │     }
   │ ╰─────^ params: [] -> u16

note: 
   ┌─ numeric_sizes.fe:73:20
   │
73 │         return u16(0)
   │                    ^ u16

note: 
   ┌─ numeric_sizes.fe:73:16
   │
73 │         return u16(0)
   │                ^^^^^^ u16

note: 
   ┌─ numeric_sizes.fe:76:5
   │  
76 │ ╭     pub fn get_u16_const_min() -> u16 {
77 │ │         return U16_MIN
78 │ │     }
   │ ╰─────^ params: [] -> u16

note: 
   ┌─ numeric_sizes.fe:77:16
   │
77 │         return U16_MIN
   │                ^^^^^^^ u16

note: 
   ┌─ numeric_sizes.fe:80:5
   │  
80 │ ╭     pub fn get_u32_min() -> u32 {
81 │ │         return u32(0)
82 │ │     }
   │ ╰─────^ params: [] -> u32

note: 
   ┌─ numeric_sizes.fe:81:20
   │
81 │         return u32(0)
   │                    ^ u32

note: 
   ┌─ numeric_sizes.fe:81:16
   │
81 │         return u32(0)
   │                ^^^^^^ u32

note: 
   ┌─ numeric_sizes.fe:84:5
   │  
84 │ ╭     pub fn get_u32_const_min() -> u32 {
85 │ │         return U32_MIN
86 │ │     }
   │ ╰─────^ params: [] -> u32

note: 
   ┌─ numeric_sizes.fe:85:16
   │
85 │         return U32_MIN
   │                ^^^^^^^ u32

note: 
   ┌─ numeric_sizes.fe:88:5
   │  
88 │ ╭     pub fn get_u64_min() -> u64 {
89 │ │         return u64(0)
90 │ │     }
   │ ╰─────^ params: [] -> u64

note: 
   ┌─ numeric_sizes.fe:89:20
   │
89 │         return u64(0)
   │                    ^ u64

note: 
   ┌─ numeric_sizes.fe:89:16
   │
89 │         return u64(0)
   │                ^^^^^^ u64

note: 
   ┌─ numeric_sizes.fe:92:5
   │  
92 │ ╭     pub fn get_u64_const_min() -> u64 {
93 │ │         return U64_MIN
94 │ │     }
   │ ╰─────^ params: [] -> u64

note: 
   ┌─ numeric_sizes.fe:93:16
   │
93 │         return U64_MIN
   │                ^^^^^^^ u64

note: 
   ┌─ numeric_sizes.fe:96:5
   │  
96 │ ╭     pub fn get_u128_min() -> u128 {
97 │ │         return u128(0)
98 │ │     }
   │ ╰─────^ params: [] -> u128

note: 
   ┌─ numeric_sizes.fe:97:21
   │
97 │         return u128(0)
   │                     ^ u128

note: 
   ┌─ numeric_sizes.fe:97:16
   │
97 │         return u128(0)
   │                ^^^^^^^ u128

note: 
    ┌─ numeric_sizes.fe:100:5
    │  
100 │ ╭     pub fn get_u128_const_min() -> u128 {
101 │ │         return U128_MIN
102 │ │     }
    │ ╰─────^ params: [] -> u128

note: 
    ┌─ numeric_sizes.fe:101:16
    │
101 │         return U128_MIN
    │                ^^^^^^^^ u128

note: 
    ┌─ numeric_sizes.fe:104:5
    │  
104 │ ╭     pub fn get_u256_min() -> u256 {
105 │ │         return u256(0)
106 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ numeric_sizes.fe:105:21
    │
105 │         return u256(0)
    │                     ^ u256

note: 
    ┌─ numeric_sizes.fe:105:16
    │
105 │         return u256(0)
    │                ^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:108:5
    │  
108 │ ╭     pub fn get_u256_const_min() -> u256 {
109 │ │         return U256_MIN
110 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ numeric_sizes.fe:109:16
    │
109 │         return U256_MIN
    │                ^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:112:5
    │  
112 │ ╭     pub fn get_i8_min() -> i8 {
113 │ │         return i8(-128)
114 │ │     }
    │ ╰─────^ params: [] -> i8

note: 
    ┌─ numeric_sizes.fe:113:20
    │
113 │         return i8(-128)
    │                    ^^^ u256

note: 
    ┌─ numeric_sizes.fe:113:19
    │
113 │         return i8(-128)
    │                   ^^^^ i8

note: 
    ┌─ numeric_sizes.fe:113:16
    │
113 │         return i8(-128)
    │                ^^^^^^^^ i8

note: 
    ┌─ numeric_sizes.fe:116:5
    │  
116 │ ╭     pub fn get_i8_const_min() -> i8 {
117 │ │         return I8_MIN
118 │ │     }
    │ ╰─────^ params: [] -> i8

note: 
    ┌─ numeric_sizes.fe:117:16
    │
117 │         return I8_MIN
    │                ^^^^^^ i8

note: 
    ┌─ numeric_sizes.fe:120:5
    │  
120 │ ╭     pub fn get_i16_min() -> i16 {
121 │ │         return i16(-32768)
122 │ │     }
    │ ╰─────^ params: [] -> i16

note: 
    ┌─ numeric_sizes.fe:121:21
    │
121 │         return i16(-32768)
    │                     ^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:121:20
    │
121 │         return i16(-32768)
    │                    ^^^^^^ i16

note: 
    ┌─ numeric_sizes.fe:121:16
    │
121 │         return i16(-32768)
    │                ^^^^^^^^^^^ i16

note: 
    ┌─ numeric_sizes.fe:124:5
    │  
124 │ ╭     pub fn get_i16_const_min() -> i16 {
125 │ │         return I16_MIN
126 │ │     }
    │ ╰─────^ params: [] -> i16

note: 
    ┌─ numeric_sizes.fe:125:16
    │
125 │         return I16_MIN
    │                ^^^^^^^ i16

note: 
    ┌─ numeric_sizes.fe:128:5
    │  
128 │ ╭     pub fn get_i32_min() -> i32 {
129 │ │         return i32(-2147483648)
130 │ │     }
    │ ╰─────^ params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:129:21
    │
129 │         return i32(-2147483648)
    │                     ^^^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:129:20
    │
129 │         return i32(-2147483648)
    │                    ^^^^^^^^^^^ i32

note: 
    ┌─ numeric_sizes.fe:129:16
    │
129 │         return i32(-2147483648)
    │                ^^^^^^^^^^^^^^^^ i32

note: 
    ┌─ numeric_sizes.fe:132:5
    │  
132 │ ╭     pub fn get_i32_const_min() -> i32 {
133 │ │         return I32_MIN
134 │ │     }
    │ ╰─────^ params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:133:16
    │
133 │         return I32_MIN
    │                ^^^^^^^ i32

note: 
    ┌─ numeric_sizes.fe:136:5
    │  
136 │ ╭     pub fn get_i64_min() -> i64 {
137 │ │         return i64(-9223372036854775808)
138 │ │     }
    │ ╰─────^ params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:137:21
    │
137 │         return i64(-9223372036854775808)
    │                     ^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:137:20
    │
137 │         return i64(-9223372036854775808)
    │                    ^^^^^^^^^^^^^^^^^^^^ i64

note: 
    ┌─ numeric_sizes.fe:137:16
    │
137 │         return i64(-9223372036854775808)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^ i64

note: 
    ┌─ numeric_sizes.fe:140:5
    │  
140 │ ╭     pub fn get_i64_const_min() -> i64 {
141 │ │         return I64_MIN
142 │ │     }
    │ ╰─────^ params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:141:16
    │
141 │         return I64_MIN
    │                ^^^^^^^ i64

note: 
    ┌─ numeric_sizes.fe:144:5
    │  
144 │ ╭     pub fn get_i128_min() -> i128 {
145 │ │         return i128(-170141183460469231731687303715884105728)
146 │ │     }
    │ ╰─────^ params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:145:22
    │
145 │         return i128(-170141183460469231731687303715884105728)
    │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:145:21
    │
145 │         return i128(-170141183460469231731687303715884105728)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
    ┌─ numeric_sizes.fe:145:16
    │
145 │         return i128(-170141183460469231731687303715884105728)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
    ┌─ numeric_sizes.fe:148:5
    │  
148 │ ╭     pub fn get_i128_const_min() -> i128 {
149 │ │         return I128_MIN
150 │ │     }
    │ ╰─────^ params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:149:16
    │
149 │         return I128_MIN
    │                ^^^^^^^^ i128

note: 
    ┌─ numeric_sizes.fe:152:5
    │  
152 │ ╭     pub fn get_i256_min() -> i256 {
153 │ │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
154 │ │     }
    │ ╰─────^ params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:153:22
    │
153 │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
    │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:153:21
    │
153 │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
    ┌─ numeric_sizes.fe:153:16
    │
153 │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
    ┌─ numeric_sizes.fe:156:5
    │  
156 │ ╭     pub fn get_i256_const_min() -> i256 {
157 │ │         return I256_MIN
158 │ │     }
    │ ╰─────^ params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:157:16
    │
157 │         return I256_MIN
    │                ^^^^^^^^ i256

note: 
    ┌─ numeric_sizes.fe:160:5
    │  
160 │ ╭     pub fn get_u8_max() -> u8 {
161 │ │         return u8(255)
162 │ │     }
    │ ╰─────^ params: [] -> u8

note: 
    ┌─ numeric_sizes.fe:161:19
    │
161 │         return u8(255)
    │                   ^^^ u8

note: 
    ┌─ numeric_sizes.fe:161:16
    │
161 │         return u8(255)
    │                ^^^^^^^ u8

note: 
    ┌─ numeric_sizes.fe:164:5
    │  
164 │ ╭     pub fn get_u8_const_max() -> u8 {
165 │ │         return U8_MAX
166 │ │     }
    │ ╰─────^ params: [] -> u8

note: 
    ┌─ numeric_sizes.fe:165:16
    │
165 │         return U8_MAX
    │                ^^^^^^ u8

note: 
    ┌─ numeric_sizes.fe:168:5
    │  
168 │ ╭     pub fn get_u16_max() -> u16 {
169 │ │         return u16(65535)
170 │ │     }
    │ ╰─────^ params: [] -> u16

note: 
    ┌─ numeric_sizes.fe:169:20
    │
169 │         return u16(65535)
    │                    ^^^^^ u16

note: 
    ┌─ numeric_sizes.fe:169:16
    │
169 │         return u16(65535)
    │                ^^^^^^^^^^ u16

note: 
    ┌─ numeric_sizes.fe:172:5
    │  
172 │ ╭     pub fn get_u16_const_max() -> u16 {
173 │ │         return U16_MAX
174 │ │     }
    │ ╰─────^ params: [] -> u16

note: 
    ┌─ numeric_sizes.fe:173:16
    │
173 │         return U16_MAX
    │                ^^^^^^^ u16

note: 
    ┌─ numeric_sizes.fe:176:5
    │  
176 │ ╭     pub fn get_u32_max() -> u32 {
177 │ │         return u32(4294967295)
178 │ │     }
    │ ╰─────^ params: [] -> u32

note: 
    ┌─ numeric_sizes.fe:177:20
    │
177 │         return u32(4294967295)
    │                    ^^^^^^^^^^ u32

note: 
    ┌─ numeric_sizes.fe:177:16
    │
177 │         return u32(4294967295)
    │                ^^^^^^^^^^^^^^^ u32

note: 
    ┌─ numeric_sizes.fe:180:5
    │  
180 │ ╭     pub fn get_u32_const_max() -> u32 {
181 │ │         return U32_MAX
182 │ │     }
    │ ╰─────^ params: [] -> u32

note: 
    ┌─ numeric_sizes.fe:181:16
    │
181 │         return U32_MAX
    │                ^^^^^^^ u32

note: 
    ┌─ numeric_sizes.fe:184:5
    │  
184 │ ╭     pub fn get_u64_max() -> u64 {
185 │ │         return u64(18446744073709551615)
186 │ │     }
    │ ╰─────^ params: [] -> u64

note: 
    ┌─ numeric_sizes.fe:185:20
    │
185 │         return u64(18446744073709551615)
    │                    ^^^^^^^^^^^^^^^^^^^^ u64

note: 
    ┌─ numeric_sizes.fe:185:16
    │
185 │         return u64(18446744073709551615)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^ u64

note: 
    ┌─ numeric_sizes.fe:188:5
    │  
188 │ ╭     pub fn get_u64_const_max() -> u64 {
189 │ │         return U64_MAX
190 │ │     }
    │ ╰─────^ params: [] -> u64

note: 
    ┌─ numeric_sizes.fe:189:16
    │
189 │         return U64_MAX
    │                ^^^^^^^ u64

note: 
    ┌─ numeric_sizes.fe:192:5
    │  
192 │ ╭     pub fn get_u128_max() -> u128 {
193 │ │         return u128(340282366920938463463374607431768211455)
194 │ │     }
    │ ╰─────^ params: [] -> u128

note: 
    ┌─ numeric_sizes.fe:193:21
    │
193 │         return u128(340282366920938463463374607431768211455)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u128

note: 
    ┌─ numeric_sizes.fe:193:16
    │
193 │         return u128(340282366920938463463374607431768211455)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u128

note: 
    ┌─ numeric_sizes.fe:196:5
    │  
196 │ ╭     pub fn get_u128_const_max() -> u128 {
197 │ │         return U128_MAX
198 │ │     }
    │ ╰─────^ params: [] -> u128

note: 
    ┌─ numeric_sizes.fe:197:16
    │
197 │         return U128_MAX
    │                ^^^^^^^^ u128

note: 
    ┌─ numeric_sizes.fe:200:5
    │  
200 │ ╭     pub fn get_u256_max() -> u256 {
201 │ │         return u256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
202 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ numeric_sizes.fe:201:21
    │
201 │         return u256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:201:16
    │
201 │         return u256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:204:5
    │  
204 │ ╭     pub fn get_u256_const_max() -> u256 {
205 │ │         return U256_MAX
206 │ │     }
    │ ╰─────^ params: [] -> u256

note: 
    ┌─ numeric_sizes.fe:205:16
    │
205 │         return U256_MAX
    │                ^^^^^^^^ u256

note: 
    ┌─ numeric_sizes.fe:208:5
    │  
208 │ ╭     pub fn get_i8_max() -> i8 {
209 │ │         return i8(127)
210 │ │     }
    │ ╰─────^ params: [] -> i8

note: 
    ┌─ numeric_sizes.fe:209:19
    │
209 │         return i8(127)
    │                   ^^^ i8

note: 
    ┌─ numeric_sizes.fe:209:16
    │
209 │         return i8(127)
    │                ^^^^^^^ i8

note: 
    ┌─ numeric_sizes.fe:212:5
    │  
212 │ ╭     pub fn get_i8_const_max() -> i8 {
213 │ │         return I8_MAX
214 │ │     }
    │ ╰─────^ params: [] -> i8

note: 
    ┌─ numeric_sizes.fe:213:16
    │
213 │         return I8_MAX
    │                ^^^^^^ i8

note: 
    ┌─ numeric_sizes.fe:216:5
    │  
216 │ ╭     pub fn get_i16_max() -> i16 {
217 │ │         return i16(32767)
218 │ │     }
    │ ╰─────^ params: [] -> i16

note: 
    ┌─ numeric_sizes.fe:217:20
    │
217 │         return i16(32767)
    │                    ^^^^^ i16

note: 
    ┌─ numeric_sizes.fe:217:16
    │
217 │         return i16(32767)
    │                ^^^^^^^^^^ i16

note: 
    ┌─ numeric_sizes.fe:220:5
    │  
220 │ ╭     pub fn get_i16_const_max() -> i16 {
221 │ │         return I16_MAX
222 │ │     }
    │ ╰─────^ params: [] -> i16

note: 
    ┌─ numeric_sizes.fe:221:16
    │
221 │         return I16_MAX
    │                ^^^^^^^ i16

note: 
    ┌─ numeric_sizes.fe:224:5
    │  
224 │ ╭     pub fn get_i32_max() -> i32 {
225 │ │         return i32(2147483647)
226 │ │     }
    │ ╰─────^ params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:225:20
    │
225 │         return i32(2147483647)
    │                    ^^^^^^^^^^ i32

note: 
    ┌─ numeric_sizes.fe:225:16
    │
225 │         return i32(2147483647)
    │                ^^^^^^^^^^^^^^^ i32

note: 
    ┌─ numeric_sizes.fe:228:5
    │  
228 │ ╭     pub fn get_i32_const_max() -> i32 {
229 │ │         return I32_MAX
230 │ │     }
    │ ╰─────^ params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:229:16
    │
229 │         return I32_MAX
    │                ^^^^^^^ i32

note: 
    ┌─ numeric_sizes.fe:232:5
    │  
232 │ ╭     pub fn get_i64_max() -> i64 {
233 │ │         return i64(9223372036854775807)
234 │ │     }
    │ ╰─────^ params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:233:20
    │
233 │         return i64(9223372036854775807)
    │                    ^^^^^^^^^^^^^^^^^^^ i64

note: 
    ┌─ numeric_sizes.fe:233:16
    │
233 │         return i64(9223372036854775807)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ i64

note: 
    ┌─ numeric_sizes.fe:236:5
    │  
236 │ ╭     pub fn get_i64_const_max() -> i64 {
237 │ │         return I64_MAX
238 │ │     }
    │ ╰─────^ params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:237:16
    │
237 │         return I64_MAX
    │                ^^^^^^^ i64

note: 
    ┌─ numeric_sizes.fe:240:5
    │  
240 │ ╭     pub fn get_i128_max() -> i128 {
241 │ │         return i128(170141183460469231731687303715884105727)
242 │ │     }
    │ ╰─────^ params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:241:21
    │
241 │         return i128(170141183460469231731687303715884105727)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
    ┌─ numeric_sizes.fe:241:16
    │
241 │         return i128(170141183460469231731687303715884105727)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
    ┌─ numeric_sizes.fe:244:5
    │  
244 │ ╭     pub fn get_i128_const_max() -> i128 {
245 │ │         return I128_MAX
246 │ │     }
    │ ╰─────^ params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:245:16
    │
245 │         return I128_MAX
    │                ^^^^^^^^ i128

note: 
    ┌─ numeric_sizes.fe:248:5
    │  
248 │ ╭     pub fn get_i256_max() -> i256 {
249 │ │         return i256(57896044618658097711785492504343953926634992332820282019728792003956564819967)
250 │ │     }
    │ ╰─────^ params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:249:21
    │
249 │         return i256(57896044618658097711785492504343953926634992332820282019728792003956564819967)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
    ┌─ numeric_sizes.fe:249:16
    │
249 │         return i256(57896044618658097711785492504343953926634992332820282019728792003956564819967)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
    ┌─ numeric_sizes.fe:252:5
    │  
252 │ ╭     pub fn get_i256_const_max() -> i256 {
253 │ │         return I256_MAX
254 │ │     }
    │ ╰─────^ params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:253:16
    │
253 │         return I256_MAX
    │                ^^^^^^^^ i256


