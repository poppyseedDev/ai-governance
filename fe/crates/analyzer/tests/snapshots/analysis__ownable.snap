---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ ownable.fe:3:5
  │
3 │     pub previousOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ address
4 │     #indexed
5 │     pub newOwner: address
  │     ^^^^^^^^^^^^^^^^^^^^^ address

note: 
  ┌─ ownable.fe:9:5
  │
9 │     _owner: address
  │     ^^^^^^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:15:5
   │  
15 │ ╭     pub fn owner(self) -> address {
16 │ │         return self._owner
17 │ │     }
   │ ╰─────^ params: [self] -> address

note: 
   ┌─ ownable.fe:16:16
   │
16 │         return self._owner
   │                ^^^^ Ownable

note: 
   ┌─ ownable.fe:16:16
   │
16 │         return self._owner
   │                ^^^^^^^^^^^ SPtr<address> -Load-> address

note: 
   ┌─ ownable.fe:19:5
   │  
19 │ ╭     pub fn renounceOwnership(mut self, mut ctx: Context) {
20 │ │         assert ctx.msg_sender() == self._owner
21 │ │         self._owner = address(0)
22 │ │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
23 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ ownable.fe:20:16
   │
20 │         assert ctx.msg_sender() == self._owner
   │                ^^^ mut Context

note: 
   ┌─ ownable.fe:20:16
   │
20 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^    ^^^^ mut Ownable
   │                │                    
   │                address

note: 
   ┌─ ownable.fe:20:36
   │
20 │         assert ctx.msg_sender() == self._owner
   │                                    ^^^^^^^^^^^ mut SPtr<address> -Load-> address

note: 
   ┌─ ownable.fe:20:16
   │
20 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
21 │         self._owner = address(0)
   │         ^^^^ mut Ownable

note: 
   ┌─ ownable.fe:21:9
   │
21 │         self._owner = address(0)
   │         ^^^^^^^^^^^           ^ u256
   │         │                      
   │         mut SPtr<address>

note: 
   ┌─ ownable.fe:21:23
   │
21 │         self._owner = address(0)
   │                       ^^^^^^^^^^ address
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │         ^^^                                          ^^^ mut Context
   │         │                                             
   │         mut Context

note: 
   ┌─ ownable.fe:22:54
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │                                                      ^^^^^^^^^^^^^^^^                    ^ u256
   │                                                      │                                    
   │                                                      address

note: 
   ┌─ ownable.fe:22:82
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │                                                                                  ^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:22:18
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ OwnershipTransferred

note: 
   ┌─ ownable.fe:22:9
   │
22 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ ownable.fe:25:5
   │  
25 │ ╭     pub fn transferOwnership(mut self, mut ctx: Context, newOwner: address) {
26 │ │         assert ctx.msg_sender() == self._owner
27 │ │         assert newOwner != address(0)
28 │ │         self._owner = newOwner
29 │ │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
30 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: newOwner, typ: address }] -> ()

note: 
   ┌─ ownable.fe:26:16
   │
26 │         assert ctx.msg_sender() == self._owner
   │                ^^^ mut Context

note: 
   ┌─ ownable.fe:26:16
   │
26 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^    ^^^^ mut Ownable
   │                │                    
   │                address

note: 
   ┌─ ownable.fe:26:36
   │
26 │         assert ctx.msg_sender() == self._owner
   │                                    ^^^^^^^^^^^ mut SPtr<address> -Load-> address

note: 
   ┌─ ownable.fe:26:16
   │
26 │         assert ctx.msg_sender() == self._owner
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
27 │         assert newOwner != address(0)
   │                ^^^^^^^^            ^ u256
   │                │                    
   │                address

note: 
   ┌─ ownable.fe:27:28
   │
27 │         assert newOwner != address(0)
   │                            ^^^^^^^^^^ address

note: 
   ┌─ ownable.fe:27:16
   │
27 │         assert newOwner != address(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^ bool
28 │         self._owner = newOwner
   │         ^^^^ mut Ownable

note: 
   ┌─ ownable.fe:28:9
   │
28 │         self._owner = newOwner
   │         ^^^^^^^^^^^   ^^^^^^^^ address
   │         │              
   │         mut SPtr<address>
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │         ^^^                                          ^^^ mut Context
   │         │                                             
   │         mut Context

note: 
   ┌─ ownable.fe:29:54
   │
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │                                                      ^^^^^^^^^^^^^^^^  ^^^^^^^^ address
   │                                                      │                  
   │                                                      address

note: 
   ┌─ ownable.fe:29:18
   │
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ OwnershipTransferred

note: 
   ┌─ ownable.fe:29:9
   │
29 │         ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()


