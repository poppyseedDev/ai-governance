---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ sized_vals_in_sto.fe:2:5
  │
2 │     pub num: u256
  │     ^^^^^^^^^^^^^ u256
3 │     pub nums: Array<u256, 42>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u256, 42>
4 │     pub str: String<26>
  │     ^^^^^^^^^^^^^^^^^^^ String<26>

note: 
   ┌─ sized_vals_in_sto.fe:8:5
   │
 8 │     num: u256
   │     ^^^^^^^^^ u256
 9 │     nums: Array<u256, 42>
   │     ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 42>
10 │     str: String<26>
   │     ^^^^^^^^^^^^^^^ String<26>

note: 
   ┌─ sized_vals_in_sto.fe:12:5
   │  
12 │ ╭     pub fn write_num(mut self, x: u256) {
13 │ │         self.num = x
14 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: x, typ: u256 }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:13:9
   │
13 │         self.num = x
   │         ^^^^ mut Foo

note: 
   ┌─ sized_vals_in_sto.fe:13:9
   │
13 │         self.num = x
   │         ^^^^^^^^   ^ u256
   │         │           
   │         mut SPtr<u256>

note: 
   ┌─ sized_vals_in_sto.fe:16:5
   │  
16 │ ╭     pub fn read_num(self) -> u256 {
17 │ │         return self.num
18 │ │     }
   │ ╰─────^ params: [self] -> u256

note: 
   ┌─ sized_vals_in_sto.fe:17:16
   │
17 │         return self.num
   │                ^^^^ Foo

note: 
   ┌─ sized_vals_in_sto.fe:17:16
   │
17 │         return self.num
   │                ^^^^^^^^ SPtr<u256> -Load-> u256

note: 
   ┌─ sized_vals_in_sto.fe:20:5
   │  
20 │ ╭     pub fn write_nums(mut self, x: Array<u256, 42>) {
21 │ │         self.nums = x
22 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: x, typ: Array<u256, 42> }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:21:9
   │
21 │         self.nums = x
   │         ^^^^ mut Foo

note: 
   ┌─ sized_vals_in_sto.fe:21:9
   │
21 │         self.nums = x
   │         ^^^^^^^^^   ^ Array<u256, 42>
   │         │            
   │         mut SPtr<Array<u256, 42>>

note: 
   ┌─ sized_vals_in_sto.fe:24:5
   │  
24 │ ╭     pub fn read_nums(self) -> Array<u256, 42> {
25 │ │         return self.nums.to_mem()
26 │ │     }
   │ ╰─────^ params: [self] -> Array<u256, 42>

note: 
   ┌─ sized_vals_in_sto.fe:25:16
   │
25 │         return self.nums.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ sized_vals_in_sto.fe:25:16
   │
25 │         return self.nums.to_mem()
   │                ^^^^^^^^^ SPtr<Array<u256, 42>>

note: 
   ┌─ sized_vals_in_sto.fe:25:16
   │
25 │         return self.nums.to_mem()
   │                ^^^^^^^^^^^^^^^^^^ Array<u256, 42>

note: 
   ┌─ sized_vals_in_sto.fe:28:5
   │  
28 │ ╭     pub fn write_str(mut self, x: String<26>) {
29 │ │         self.str = x
30 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: x, typ: String<26> }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:29:9
   │
29 │         self.str = x
   │         ^^^^ mut Foo

note: 
   ┌─ sized_vals_in_sto.fe:29:9
   │
29 │         self.str = x
   │         ^^^^^^^^   ^ String<26>
   │         │           
   │         mut SPtr<String<26>>

note: 
   ┌─ sized_vals_in_sto.fe:32:5
   │  
32 │ ╭     pub fn read_str(self) -> String<26> {
33 │ │         return self.str.to_mem()
34 │ │     }
   │ ╰─────^ params: [self] -> String<26>

note: 
   ┌─ sized_vals_in_sto.fe:33:16
   │
33 │         return self.str.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ sized_vals_in_sto.fe:33:16
   │
33 │         return self.str.to_mem()
   │                ^^^^^^^^ SPtr<String<26>>

note: 
   ┌─ sized_vals_in_sto.fe:33:16
   │
33 │         return self.str.to_mem()
   │                ^^^^^^^^^^^^^^^^^ String<26>

note: 
   ┌─ sized_vals_in_sto.fe:36:5
   │  
36 │ ╭     pub fn emit_event(self, mut ctx: Context) {
37 │ │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
38 │ │     }
   │ ╰─────^ params: [self, { label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:37:9
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │         ^^^                   ^^^^ Foo
   │         │                      
   │         mut Context

note: 
   ┌─ sized_vals_in_sto.fe:37:31
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │                               ^^^^^^^^        ^^^^ Foo
   │                               │                
   │                               SPtr<u256> -Load-> u256

note: 
   ┌─ sized_vals_in_sto.fe:37:47
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │                                               ^^^^^^^^^ SPtr<Array<u256, 42>>

note: 
   ┌─ sized_vals_in_sto.fe:37:47
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │                                               ^^^^^^^^^^^^^^^^^^       ^^^^ Foo
   │                                               │                         
   │                                               Array<u256, 42>

note: 
   ┌─ sized_vals_in_sto.fe:37:72
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │                                                                        ^^^^^^^^ SPtr<String<26>>

note: 
   ┌─ sized_vals_in_sto.fe:37:72
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │                                                                        ^^^^^^^^^^^^^^^^^ String<26>

note: 
   ┌─ sized_vals_in_sto.fe:37:18
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ MyEvent

note: 
   ┌─ sized_vals_in_sto.fe:37:9
   │
37 │         ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()


