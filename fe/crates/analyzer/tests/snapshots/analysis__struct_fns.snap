---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ struct_fns.fe:2:5
  │
2 │     pub x: u64
  │     ^^^^^^^^^^ u64
3 │     pub y: u64
  │     ^^^^^^^^^^ u64

note: 
  ┌─ struct_fns.fe:5:5
  │  
5 │ ╭     fn internal_new(x: u64, y: u64) -> Point {
6 │ │         return Point(x, y)
7 │ │     }
  │ ╰─────^ params: [{ label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> Point

note: 
  ┌─ struct_fns.fe:6:22
  │
6 │         return Point(x, y)
  │                      ^  ^ u64
  │                      │   
  │                      u64

note: 
  ┌─ struct_fns.fe:6:16
  │
6 │         return Point(x, y)
  │                ^^^^^^^^^^^ Point

note: 
   ┌─ struct_fns.fe:9:5
   │  
 9 │ ╭     pub fn new(x: u64, y: u64) -> Point {
10 │ │         return Point::internal_new(x, y)
11 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> Point

note: 
   ┌─ struct_fns.fe:10:36
   │
10 │         return Point::internal_new(x, y)
   │                                    ^  ^ u64
   │                                    │   
   │                                    u64

note: 
   ┌─ struct_fns.fe:10:16
   │
10 │         return Point::internal_new(x, y)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^ Point -Copy-> Point

note: 
   ┌─ struct_fns.fe:13:5
   │  
13 │ ╭     pub fn origin() -> Point {
14 │ │         return Point(x: 0, y: 0)
15 │ │     }
   │ ╰─────^ params: [] -> Point

note: 
   ┌─ struct_fns.fe:14:25
   │
14 │         return Point(x: 0, y: 0)
   │                         ^     ^ u64
   │                         │      
   │                         u64

note: 
   ┌─ struct_fns.fe:14:16
   │
14 │         return Point(x: 0, y: 0)
   │                ^^^^^^^^^^^^^^^^^ Point

note: 
   ┌─ struct_fns.fe:17:5
   │  
17 │ ╭     pub fn x(self) -> u64 {
18 │ │         return self.x
19 │ │     }
   │ ╰─────^ params: [self] -> u64

note: 
   ┌─ struct_fns.fe:18:16
   │
18 │         return self.x
   │                ^^^^ Point

note: 
   ┌─ struct_fns.fe:18:16
   │
18 │         return self.x
   │                ^^^^^^ u64

note: 
   ┌─ struct_fns.fe:21:5
   │  
21 │ ╭     pub fn set_x(mut self, _ x: u64) -> u64 {
22 │ │         let old: u64 = self.x
23 │ │         self.x = x
24 │ │         return old
25 │ │     }
   │ ╰─────^ params: [mut self, { label: Some("_"), name: x, typ: u64 }] -> u64

note: 
   ┌─ struct_fns.fe:22:13
   │
22 │         let old: u64 = self.x
   │             ^^^ u64

note: 
   ┌─ struct_fns.fe:22:24
   │
22 │         let old: u64 = self.x
   │                        ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:22:24
   │
22 │         let old: u64 = self.x
   │                        ^^^^^^ mut u64
23 │         self.x = x
   │         ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:23:9
   │
23 │         self.x = x
   │         ^^^^^^   ^ u64
   │         │         
   │         mut u64
24 │         return old
   │                ^^^ u64

note: 
   ┌─ struct_fns.fe:27:5
   │  
27 │ ╭     pub fn reflect(mut self) {
28 │ │         let x: u64 = self.x
29 │ │         let y: u64 = self.y
30 │ │         self.x = y
31 │ │         self.y = x
32 │ │     }
   │ ╰─────^ params: [mut self] -> ()

note: 
   ┌─ struct_fns.fe:28:13
   │
28 │         let x: u64 = self.x
   │             ^ u64
29 │         let y: u64 = self.y
   │             ^ u64

note: 
   ┌─ struct_fns.fe:28:22
   │
28 │         let x: u64 = self.x
   │                      ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:28:22
   │
28 │         let x: u64 = self.x
   │                      ^^^^^^ mut u64
29 │         let y: u64 = self.y
   │                      ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:29:22
   │
29 │         let y: u64 = self.y
   │                      ^^^^^^ mut u64
30 │         self.x = y
   │         ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:30:9
   │
30 │         self.x = y
   │         ^^^^^^   ^ u64
   │         │         
   │         mut u64
31 │         self.y = x
   │         ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:31:9
   │
31 │         self.y = x
   │         ^^^^^^   ^ u64
   │         │         
   │         mut u64

note: 
   ┌─ struct_fns.fe:34:5
   │  
34 │ ╭     pub fn translate(mut self, x: u64, y: u64) {
35 │ │         self.x += x
36 │ │         self.y += y
37 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> ()

note: 
   ┌─ struct_fns.fe:35:9
   │
35 │         self.x += x
   │         ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:35:9
   │
35 │         self.x += x
   │         ^^^^^^    ^ u64
   │         │          
   │         mut u64
36 │         self.y += y
   │         ^^^^ mut Point

note: 
   ┌─ struct_fns.fe:36:9
   │
36 │         self.y += y
   │         ^^^^^^    ^ u64
   │         │          
   │         mut u64

note: 
   ┌─ struct_fns.fe:39:5
   │  
39 │ ╭     pub fn add(self, _ other: Point) -> Point {
40 │ │         let x: u64 = self.x + other.x
41 │ │         let y: u64 = self.y + other.y
42 │ │         return Point(x, y)
43 │ │     }
   │ ╰─────^ params: [self, { label: Some("_"), name: other, typ: Point }] -> Point

note: 
   ┌─ struct_fns.fe:40:13
   │
40 │         let x: u64 = self.x + other.x
   │             ^ u64
41 │         let y: u64 = self.y + other.y
   │             ^ u64

note: 
   ┌─ struct_fns.fe:40:22
   │
40 │         let x: u64 = self.x + other.x
   │                      ^^^^ Point

note: 
   ┌─ struct_fns.fe:40:22
   │
40 │         let x: u64 = self.x + other.x
   │                      ^^^^^^   ^^^^^ Point
   │                      │         
   │                      u64

note: 
   ┌─ struct_fns.fe:40:31
   │
40 │         let x: u64 = self.x + other.x
   │                               ^^^^^^^ u64

note: 
   ┌─ struct_fns.fe:40:22
   │
40 │         let x: u64 = self.x + other.x
   │                      ^^^^^^^^^^^^^^^^ u64
41 │         let y: u64 = self.y + other.y
   │                      ^^^^ Point

note: 
   ┌─ struct_fns.fe:41:22
   │
41 │         let y: u64 = self.y + other.y
   │                      ^^^^^^   ^^^^^ Point
   │                      │         
   │                      u64

note: 
   ┌─ struct_fns.fe:41:31
   │
41 │         let y: u64 = self.y + other.y
   │                               ^^^^^^^ u64

note: 
   ┌─ struct_fns.fe:41:22
   │
41 │         let y: u64 = self.y + other.y
   │                      ^^^^^^^^^^^^^^^^ u64
42 │         return Point(x, y)
   │                      ^  ^ u64
   │                      │   
   │                      u64

note: 
   ┌─ struct_fns.fe:42:16
   │
42 │         return Point(x, y)
   │                ^^^^^^^^^^^ Point

note: 
   ┌─ struct_fns.fe:46:1
   │  
46 │ ╭ pub fn do_pointy_things() {
47 │ │     let mut p1: Point = Point::origin()
48 │ │     p1.translate(x: 5, y: 10)
49 │ │     let p2: Point = Point(x: 1, y: 2)
50 │ │     let p3: Point = p1.add(p2)
51 │ │     assert p3.x == 6 and p3.y == 12
52 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ struct_fns.fe:47:13
   │
47 │     let mut p1: Point = Point::origin()
   │             ^^ mut Point
48 │     p1.translate(x: 5, y: 10)
49 │     let p2: Point = Point(x: 1, y: 2)
   │         ^^ Point
50 │     let p3: Point = p1.add(p2)
   │         ^^ Point

note: 
   ┌─ struct_fns.fe:47:25
   │
47 │     let mut p1: Point = Point::origin()
   │                         ^^^^^^^^^^^^^^^ Point -Copy-> Point
48 │     p1.translate(x: 5, y: 10)
   │     ^^              ^     ^^ u64
   │     │               │      
   │     │               u64
   │     mut Point

note: 
   ┌─ struct_fns.fe:48:5
   │
48 │     p1.translate(x: 5, y: 10)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^ ()
49 │     let p2: Point = Point(x: 1, y: 2)
   │                              ^     ^ u64
   │                              │      
   │                              u64

note: 
   ┌─ struct_fns.fe:49:21
   │
49 │     let p2: Point = Point(x: 1, y: 2)
   │                     ^^^^^^^^^^^^^^^^^ Point
50 │     let p3: Point = p1.add(p2)
   │                     ^^     ^^ Point
   │                     │       
   │                     mut Point

note: 
   ┌─ struct_fns.fe:50:21
   │
50 │     let p3: Point = p1.add(p2)
   │                     ^^^^^^^^^^ Point
51 │     assert p3.x == 6 and p3.y == 12
   │            ^^ Point

note: 
   ┌─ struct_fns.fe:51:12
   │
51 │     assert p3.x == 6 and p3.y == 12
   │            ^^^^    ^ u64
   │            │        
   │            u64

note: 
   ┌─ struct_fns.fe:51:12
   │
51 │     assert p3.x == 6 and p3.y == 12
   │            ^^^^^^^^^     ^^ Point
   │            │              
   │            bool

note: 
   ┌─ struct_fns.fe:51:26
   │
51 │     assert p3.x == 6 and p3.y == 12
   │                          ^^^^    ^^ u64
   │                          │        
   │                          u64

note: 
   ┌─ struct_fns.fe:51:26
   │
51 │     assert p3.x == 6 and p3.y == 12
   │                          ^^^^^^^^^^ bool

note: 
   ┌─ struct_fns.fe:51:12
   │
51 │     assert p3.x == 6 and p3.y == 12
   │            ^^^^^^^^^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ struct_fns.fe:55:5
   │  
55 │ ╭     pub fn bar(x: u64, y: u64) -> u64 {
56 │ │         do_pointy_things()
57 │ │         let mut p: Point = Point::new(x, y)
58 │ │         assert p.x == x and p.y == y
   · │
62 │ │         return p.y
63 │ │     }
   │ ╰─────^ params: [{ label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> u64

note: 
   ┌─ struct_fns.fe:57:17
   │
57 │         let mut p: Point = Point::new(x, y)
   │                 ^ mut Point

note: 
   ┌─ struct_fns.fe:56:9
   │
56 │         do_pointy_things()
   │         ^^^^^^^^^^^^^^^^^^ ()
57 │         let mut p: Point = Point::new(x, y)
   │                                       ^  ^ u64
   │                                       │   
   │                                       u64

note: 
   ┌─ struct_fns.fe:57:28
   │
57 │         let mut p: Point = Point::new(x, y)
   │                            ^^^^^^^^^^^^^^^^ Point -Copy-> Point
58 │         assert p.x == x and p.y == y
   │                ^ mut Point

note: 
   ┌─ struct_fns.fe:58:16
   │
58 │         assert p.x == x and p.y == y
   │                ^^^    ^ u64
   │                │       
   │                mut u64

note: 
   ┌─ struct_fns.fe:58:16
   │
58 │         assert p.x == x and p.y == y
   │                ^^^^^^^^     ^ mut Point
   │                │             
   │                bool

note: 
   ┌─ struct_fns.fe:58:29
   │
58 │         assert p.x == x and p.y == y
   │                             ^^^    ^ u64
   │                             │       
   │                             mut u64

note: 
   ┌─ struct_fns.fe:58:29
   │
58 │         assert p.x == x and p.y == y
   │                             ^^^^^^^^ bool

note: 
   ┌─ struct_fns.fe:58:16
   │
58 │         assert p.x == x and p.y == y
   │                ^^^^^^^^^^^^^^^^^^^^^ bool
59 │         p.set_x(100)
   │         ^       ^^^ u64
   │         │        
   │         mut Point

note: 
   ┌─ struct_fns.fe:59:9
   │
59 │         p.set_x(100)
   │         ^^^^^^^^^^^^ u64
60 │         p.reflect()
   │         ^ mut Point

note: 
   ┌─ struct_fns.fe:60:9
   │
60 │         p.reflect()
   │         ^^^^^^^^^^^ ()
61 │         assert p.x() == y and p.y == 100
   │                ^ mut Point

note: 
   ┌─ struct_fns.fe:61:16
   │
61 │         assert p.x() == y and p.y == 100
   │                ^^^^^    ^ u64
   │                │         
   │                u64

note: 
   ┌─ struct_fns.fe:61:16
   │
61 │         assert p.x() == y and p.y == 100
   │                ^^^^^^^^^^     ^ mut Point
   │                │               
   │                bool

note: 
   ┌─ struct_fns.fe:61:31
   │
61 │         assert p.x() == y and p.y == 100
   │                               ^^^    ^^^ u64
   │                               │       
   │                               mut u64

note: 
   ┌─ struct_fns.fe:61:31
   │
61 │         assert p.x() == y and p.y == 100
   │                               ^^^^^^^^^^ bool

note: 
   ┌─ struct_fns.fe:61:16
   │
61 │         assert p.x() == y and p.y == 100
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^ bool
62 │         return p.y
   │                ^ mut Point

note: 
   ┌─ struct_fns.fe:62:16
   │
62 │         return p.y
   │                ^^^ mut u64


