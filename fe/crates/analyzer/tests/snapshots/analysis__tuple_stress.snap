---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ tuple_stress.fe:2:5
  │
2 │     pub my_tuple: (u256, bool, address)
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
  ┌─ tuple_stress.fe:6:5
  │
6 │     my_sto_tuple: (u256, i32)
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32)

note: 
   ┌─ tuple_stress.fe:8:5
   │  
 8 │ ╭     pub fn build_my_tuple(my_num: u256, my_bool: bool, my_address: address) -> (u256, bool, address) {
 9 │ │         return (my_num, my_bool, my_address)
10 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_num, typ: u256 }, { label: None, name: my_bool, typ: bool }, { label: None, name: my_address, typ: address }] -> (u256, bool, address)

note: 
  ┌─ tuple_stress.fe:9:17
  │
9 │         return (my_num, my_bool, my_address)
  │                 ^^^^^^  ^^^^^^^  ^^^^^^^^^^ address
  │                 │       │         
  │                 │       bool
  │                 u256

note: 
  ┌─ tuple_stress.fe:9:16
  │
9 │         return (my_num, my_bool, my_address)
  │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:12:5
   │  
12 │ ╭     pub fn read_my_tuple_item0(my_tuple: (u256, bool, address)) -> u256 {
13 │ │         return my_tuple.item0
14 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> u256

note: 
   ┌─ tuple_stress.fe:13:16
   │
13 │         return my_tuple.item0
   │                ^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:13:16
   │
13 │         return my_tuple.item0
   │                ^^^^^^^^^^^^^^ u256

note: 
   ┌─ tuple_stress.fe:16:5
   │  
16 │ ╭     pub fn read_my_tuple_item1(my_tuple: (u256, bool, address)) -> bool {
17 │ │         return my_tuple.item1
18 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> bool

note: 
   ┌─ tuple_stress.fe:17:16
   │
17 │         return my_tuple.item1
   │                ^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:17:16
   │
17 │         return my_tuple.item1
   │                ^^^^^^^^^^^^^^ bool

note: 
   ┌─ tuple_stress.fe:20:5
   │  
20 │ ╭     pub fn read_my_tuple_item2(my_tuple: (u256, bool, address)) -> address {
21 │ │         return my_tuple.item2
22 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> address

note: 
   ┌─ tuple_stress.fe:21:16
   │
21 │         return my_tuple.item2
   │                ^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:21:16
   │
21 │         return my_tuple.item2
   │                ^^^^^^^^^^^^^^ address

note: 
   ┌─ tuple_stress.fe:24:5
   │  
24 │ ╭     pub fn read_my_tuple_item10(my_tuple: (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address)) -> address {
25 │ │         return my_tuple.item10
26 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_tuple, typ: (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address) }] -> address

note: 
   ┌─ tuple_stress.fe:25:16
   │
25 │         return my_tuple.item10
   │                ^^^^^^^^ (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address)

note: 
   ┌─ tuple_stress.fe:25:16
   │
25 │         return my_tuple.item10
   │                ^^^^^^^^^^^^^^^ address

note: 
   ┌─ tuple_stress.fe:28:5
   │  
28 │ ╭     pub fn emit_my_event(mut ctx: Context, my_tuple: (u256, bool, address)) {
29 │ │         ctx.emit(MyEvent(my_tuple))
30 │ │     }
   │ ╰─────^ params: [{ label: None, name: ctx, typ: mut Context }, { label: None, name: my_tuple, typ: (u256, bool, address) }] -> ()

note: 
   ┌─ tuple_stress.fe:29:9
   │
29 │         ctx.emit(MyEvent(my_tuple))
   │         ^^^              ^^^^^^^^ (u256, bool, address) -Copy-> (u256, bool, address)
   │         │                 
   │         mut Context

note: 
   ┌─ tuple_stress.fe:29:18
   │
29 │         ctx.emit(MyEvent(my_tuple))
   │                  ^^^^^^^^^^^^^^^^^ MyEvent

note: 
   ┌─ tuple_stress.fe:29:9
   │
29 │         ctx.emit(MyEvent(my_tuple))
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ tuple_stress.fe:32:5
   │  
32 │ ╭     pub fn set_my_sto_tuple(mut self, my_u256: u256, my_i32: i32) {
33 │ │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
34 │ │         self.my_sto_tuple = (my_u256, my_i32)
35 │ │     }
   │ ╰─────^ params: [mut self, { label: None, name: my_u256, typ: u256 }, { label: None, name: my_i32, typ: i32 }] -> ()

note: 
   ┌─ tuple_stress.fe:33:16
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^ mut Foo

note: 
   ┌─ tuple_stress.fe:33:16
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^ mut SPtr<(u256, i32)>

note: 
   ┌─ tuple_stress.fe:33:16
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^         ^ u256
   │                │                                
   │                mut SPtr<u256> -Load-> u256

note: 
   ┌─ tuple_stress.fe:33:43
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                           ^^^^^^^ u256

note: 
   ┌─ tuple_stress.fe:33:16
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^ mut Foo
   │                │                                       
   │                bool

note: 
   ┌─ tuple_stress.fe:33:55
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^ mut SPtr<(u256, i32)>

note: 
   ┌─ tuple_stress.fe:33:55
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^        ^ i32
   │                                                       │                               
   │                                                       mut SPtr<i32> -Load-> i32

note: 
   ┌─ tuple_stress.fe:33:82
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                                                  ^^^^^^ i32

note: 
   ┌─ tuple_stress.fe:33:55
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ tuple_stress.fe:33:16
   │
33 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
34 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^ mut Foo

note: 
   ┌─ tuple_stress.fe:34:9
   │
34 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^^^^^^^^^^^^^^    ^^^^^^^  ^^^^^^ i32
   │         │                    │         
   │         │                    u256
   │         mut SPtr<(u256, i32)>

note: 
   ┌─ tuple_stress.fe:34:29
   │
34 │         self.my_sto_tuple = (my_u256, my_i32)
   │                             ^^^^^^^^^^^^^^^^^ (u256, i32)

note: 
   ┌─ tuple_stress.fe:37:5
   │  
37 │ ╭     pub fn get_my_sto_tuple(self) -> (u256, i32) {
38 │ │         return self.my_sto_tuple.to_mem()
39 │ │     }
   │ ╰─────^ params: [self] -> (u256, i32)

note: 
   ┌─ tuple_stress.fe:38:16
   │
38 │         return self.my_sto_tuple.to_mem()
   │                ^^^^ Foo

note: 
   ┌─ tuple_stress.fe:38:16
   │
38 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^ SPtr<(u256, i32)>

note: 
   ┌─ tuple_stress.fe:38:16
   │
38 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32)

note: 
   ┌─ tuple_stress.fe:41:5
   │  
41 │ ╭     pub fn build_tuple_and_emit(self, mut ctx: Context) {
42 │ │         let my_num: u256 = self.my_sto_tuple.item0
43 │ │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
44 │ │         emit_my_event(ctx, my_tuple)
45 │ │     }
   │ ╰─────^ params: [self, { label: None, name: ctx, typ: mut Context }] -> ()

note: 
   ┌─ tuple_stress.fe:42:13
   │
42 │         let my_num: u256 = self.my_sto_tuple.item0
   │             ^^^^^^ u256
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │             ^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:42:28
   │
42 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^ Foo

note: 
   ┌─ tuple_stress.fe:42:28
   │
42 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^ SPtr<(u256, i32)>

note: 
   ┌─ tuple_stress.fe:42:28
   │
42 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                ^^^^ Foo

note: 
   ┌─ tuple_stress.fe:43:48
   │
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                ^^^^^^^^^^^^^^^^^ SPtr<(u256, i32)>

note: 
   ┌─ tuple_stress.fe:43:48
   │
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^     ^^^^^ bool
   │                                                │                        │         
   │                                                │                        bool
   │                                                SPtr<u256> -Load-> u256

note: 
   ┌─ tuple_stress.fe:43:73
   │
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                                         ^^^^^^^^^^^^^^          ^^ u256
   │                                                                         │                        
   │                                                                         bool

note: 
   ┌─ tuple_stress.fe:43:89
   │
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                                                         ^^^^^^^^^^^ address

note: 
   ┌─ tuple_stress.fe:43:47
   │
43 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)
44 │         emit_my_event(ctx, my_tuple)
   │                       ^^^  ^^^^^^^^ (u256, bool, address)
   │                       │     
   │                       mut Context

note: 
   ┌─ tuple_stress.fe:44:9
   │
44 │         emit_my_event(ctx, my_tuple)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
   ┌─ tuple_stress.fe:47:5
   │  
47 │ ╭     pub fn encode_my_tuple(my_tuple: (u256, bool, address)) -> Array<u8, 96> {
48 │ │         return my_tuple.abi_encode()
49 │ │     }
   │ ╰─────^ params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> Array<u8, 96>

note: 
   ┌─ tuple_stress.fe:48:16
   │
48 │         return my_tuple.abi_encode()
   │                ^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:48:16
   │
48 │         return my_tuple.abi_encode()
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u8, 96>


