---
source: crates/analyzer/tests/analysis.rs
assertion_line: 186
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ uniswap.fe:3:5
  │  
3 │ ╭     pub fn balanceOf(self, _ account: address) -> u256 {
4 │ │         revert
5 │ │     }
  │ ╰─────^ params: [self, { label: Some("_"), name: account, typ: address }] -> u256

note: 
  ┌─ uniswap.fe:7:5
  │  
7 │ ╭     pub fn transfer(self, to: address, _ amount: u256) -> bool {
8 │ │         revert
9 │ │     }
  │ ╰─────^ params: [self, { label: None, name: to, typ: address }, { label: Some("_"), name: amount, typ: u256 }] -> bool

note: 
   ┌─ uniswap.fe:14:5
   │
14 │     pub owner: address
   │     ^^^^^^^^^^^^^^^^^^ address
15 │     #indexed
16 │     pub spender: address
   │     ^^^^^^^^^^^^^^^^^^^^ address
17 │     pub value: u256
   │     ^^^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:22:5
   │
22 │     pub from: address
   │     ^^^^^^^^^^^^^^^^^ address
23 │     #indexed
24 │     pub to: address
   │     ^^^^^^^^^^^^^^^ address
25 │     pub value: u256
   │     ^^^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:30:5
   │
30 │     pub sender: address
   │     ^^^^^^^^^^^^^^^^^^^ address
31 │     pub amount0: u256
   │     ^^^^^^^^^^^^^^^^^ u256
32 │     pub amount1: u256
   │     ^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:37:5
   │
37 │     pub sender: address
   │     ^^^^^^^^^^^^^^^^^^^ address
38 │     pub amount0: u256
   │     ^^^^^^^^^^^^^^^^^ u256
39 │     pub amount1: u256
   │     ^^^^^^^^^^^^^^^^^ u256
40 │     #indexed
41 │     pub to: address
   │     ^^^^^^^^^^^^^^^ address

note: 
   ┌─ uniswap.fe:46:5
   │
46 │     pub sender: address
   │     ^^^^^^^^^^^^^^^^^^^ address
47 │     pub amount0_in: u256
   │     ^^^^^^^^^^^^^^^^^^^^ u256
48 │     pub amount1_in: u256
   │     ^^^^^^^^^^^^^^^^^^^^ u256
49 │     pub amount0_out: u256
   │     ^^^^^^^^^^^^^^^^^^^^^ u256
50 │     pub amount1_out: u256
   │     ^^^^^^^^^^^^^^^^^^^^^ u256
51 │     #indexed
52 │     pub to: address
   │     ^^^^^^^^^^^^^^^ address

note: 
   ┌─ uniswap.fe:56:5
   │
56 │     pub reserve0: u256
   │     ^^^^^^^^^^^^^^^^^^ u256
57 │     pub reserve1: u256
   │     ^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:60:1
   │
60 │ const MINIMUM_LIQUIDITY: u256 = 1000
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:64:5
   │
64 │     balances: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
65 │     allowances: Map<address, Map<address, u256>>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>
66 │     total_supply: u256
   │     ^^^^^^^^^^^^^^^^^^ u256
67 │ 
68 │     nonces: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
69 │ 
70 │     factory: address
   │     ^^^^^^^^^^^^^^^^ address
71 │     token0: ERC20
   │     ^^^^^^^^^^^^^ ERC20
72 │     token1: ERC20
   │     ^^^^^^^^^^^^^ ERC20
73 │ 
74 │     reserve0: u256
   │     ^^^^^^^^^^^^^^ u256
75 │     reserve1: u256
   │     ^^^^^^^^^^^^^^ u256
76 │     block_timestamp_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
77 │ 
78 │     price0_cumulative_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
79 │     price1_cumulative_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
80 │     k_last: u256
   │     ^^^^^^^^^^^^ u256

note: 
   ┌─ uniswap.fe:86:5
   │  
86 │ ╭     pub fn factory(self) -> address {
87 │ │         return self.factory
88 │ │     }
   │ ╰─────^ params: [self] -> address

note: 
   ┌─ uniswap.fe:87:16
   │
87 │         return self.factory
   │                ^^^^ UniswapV2Pair

note: 
   ┌─ uniswap.fe:87:16
   │
87 │         return self.factory
   │                ^^^^^^^^^^^^ SPtr<address> -Load-> address

note: 
   ┌─ uniswap.fe:90:5
   │  
90 │ ╭     pub fn token0(self) -> address {
91 │ │         return address(self.token0)
92 │ │     }
   │ ╰─────^ params: [self] -> address

note: 
   ┌─ uniswap.fe:91:24
   │
91 │         return address(self.token0)
   │                        ^^^^ UniswapV2Pair

note: 
   ┌─ uniswap.fe:91:24
   │
91 │         return address(self.token0)
   │                        ^^^^^^^^^^^ SPtr<ERC20> -Load-> ERC20

note: 
   ┌─ uniswap.fe:91:16
   │
91 │         return address(self.token0)
   │                ^^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ uniswap.fe:94:5
   │  
94 │ ╭     pub fn token1(self) -> address {
95 │ │         return address(self.token1)
96 │ │     }
   │ ╰─────^ params: [self] -> address

note: 
   ┌─ uniswap.fe:95:24
   │
95 │         return address(self.token1)
   │                        ^^^^ UniswapV2Pair

note: 
   ┌─ uniswap.fe:95:24
   │
95 │         return address(self.token1)
   │                        ^^^^^^^^^^^ SPtr<ERC20> -Load-> ERC20

note: 
   ┌─ uniswap.fe:95:16
   │
95 │         return address(self.token1)
   │                ^^^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:98:5
    │  
 98 │ ╭     fn _mint(mut self, mut ctx: Context, to: address, value: u256) {
 99 │ │         self.total_supply = self.total_supply + value
100 │ │         self.balances[to] = self.balances[to] + value
101 │ │         ctx.emit(Transfer(from: address(0), to, value))
102 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: to, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
   ┌─ uniswap.fe:99:9
   │
99 │         self.total_supply = self.total_supply + value
   │         ^^^^ mut UniswapV2Pair

note: 
   ┌─ uniswap.fe:99:9
   │
99 │         self.total_supply = self.total_supply + value
   │         ^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
   │         │                    
   │         mut SPtr<u256>

note: 
   ┌─ uniswap.fe:99:29
   │
99 │         self.total_supply = self.total_supply + value
   │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256
   │                             │                    
   │                             mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:99:29
    │
 99 │         self.total_supply = self.total_supply + value
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256
100 │         self.balances[to] = self.balances[to] + value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:100:9
    │
100 │         self.balances[to] = self.balances[to] + value
    │         ^^^^^^^^^^^^^ ^^ address
    │         │              
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:100:9
    │
100 │         self.balances[to] = self.balances[to] + value
    │         ^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │         │                    
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:100:29
    │
100 │         self.balances[to] = self.balances[to] + value
    │                             ^^^^^^^^^^^^^ ^^ address
    │                             │              
    │                             mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:100:29
    │
100 │         self.balances[to] = self.balances[to] + value
    │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                             │                    
    │                             mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:100:29
    │
100 │         self.balances[to] = self.balances[to] + value
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256
101 │         ctx.emit(Transfer(from: address(0), to, value))
    │         ^^^                             ^ u256
    │         │                                
    │         mut Context

note: 
    ┌─ uniswap.fe:101:33
    │
101 │         ctx.emit(Transfer(from: address(0), to, value))
    │                                 ^^^^^^^^^^  ^^  ^^^^^ u256
    │                                 │           │    
    │                                 │           address
    │                                 address

note: 
    ┌─ uniswap.fe:101:18
    │
101 │         ctx.emit(Transfer(from: address(0), to, value))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Transfer

note: 
    ┌─ uniswap.fe:101:9
    │
101 │         ctx.emit(Transfer(from: address(0), to, value))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ uniswap.fe:104:5
    │  
104 │ ╭     fn _burn(mut self, mut ctx: Context, from: address, value: u256) {
105 │ │         self.balances[from] = self.balances[from] - value
106 │ │         self.total_supply = self.total_supply - value
107 │ │         ctx.emit(Transfer(from, to: address(0), value))
108 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: from, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
    ┌─ uniswap.fe:105:9
    │
105 │         self.balances[from] = self.balances[from] - value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:105:9
    │
105 │         self.balances[from] = self.balances[from] - value
    │         ^^^^^^^^^^^^^ ^^^^ address
    │         │              
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:105:9
    │
105 │         self.balances[from] = self.balances[from] - value
    │         ^^^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │         │                      
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:105:31
    │
105 │         self.balances[from] = self.balances[from] - value
    │                               ^^^^^^^^^^^^^ ^^^^ address
    │                               │              
    │                               mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:105:31
    │
105 │         self.balances[from] = self.balances[from] - value
    │                               ^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                               │                      
    │                               mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:105:31
    │
105 │         self.balances[from] = self.balances[from] - value
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
106 │         self.total_supply = self.total_supply - value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:106:9
    │
106 │         self.total_supply = self.total_supply - value
    │         ^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │         │                    
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:106:29
    │
106 │         self.total_supply = self.total_supply - value
    │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                             │                    
    │                             mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:106:29
    │
106 │         self.total_supply = self.total_supply - value
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256
107 │         ctx.emit(Transfer(from, to: address(0), value))
    │         ^^^               ^^^^              ^ u256
    │         │                 │                  
    │         │                 address
    │         mut Context

note: 
    ┌─ uniswap.fe:107:37
    │
107 │         ctx.emit(Transfer(from, to: address(0), value))
    │                                     ^^^^^^^^^^  ^^^^^ u256
    │                                     │            
    │                                     address

note: 
    ┌─ uniswap.fe:107:18
    │
107 │         ctx.emit(Transfer(from, to: address(0), value))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Transfer

note: 
    ┌─ uniswap.fe:107:9
    │
107 │         ctx.emit(Transfer(from, to: address(0), value))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ uniswap.fe:110:5
    │  
110 │ ╭     fn _approve(mut self, mut ctx: Context, owner: address, spender: address, value: u256) {
111 │ │         self.allowances[owner][spender] = value
112 │ │         ctx.emit(Approval(owner, spender, value))
113 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: owner, typ: address }, { label: None, name: spender, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
    ┌─ uniswap.fe:111:9
    │
111 │         self.allowances[owner][spender] = value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:111:9
    │
111 │         self.allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^ ^^^^^ address
    │         │                
    │         mut SPtr<Map<address, Map<address, u256>>>

note: 
    ┌─ uniswap.fe:111:9
    │
111 │         self.allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ address
    │         │                       
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:111:9
    │
111 │         self.allowances[owner][spender] = value
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │         │                                  
    │         mut SPtr<u256>
112 │         ctx.emit(Approval(owner, spender, value))
    │         ^^^               ^^^^^  ^^^^^^^  ^^^^^ u256
    │         │                 │      │         
    │         │                 │      address
    │         │                 address
    │         mut Context

note: 
    ┌─ uniswap.fe:112:18
    │
112 │         ctx.emit(Approval(owner, spender, value))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Approval

note: 
    ┌─ uniswap.fe:112:9
    │
112 │         ctx.emit(Approval(owner, spender, value))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ uniswap.fe:115:5
    │  
115 │ ╭     fn _transfer(mut self, mut ctx: Context, from: address, to: address, value: u256) {
116 │ │         self.balances[from] = self.balances[from] - value
117 │ │         self.balances[to] = self.balances[to] + value
118 │ │         ctx.emit(Transfer(from, to, value))
119 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: from, typ: address }, { label: None, name: to, typ: address }, { label: None, name: value, typ: u256 }] -> ()

note: 
    ┌─ uniswap.fe:116:9
    │
116 │         self.balances[from] = self.balances[from] - value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:116:9
    │
116 │         self.balances[from] = self.balances[from] - value
    │         ^^^^^^^^^^^^^ ^^^^ address
    │         │              
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:116:9
    │
116 │         self.balances[from] = self.balances[from] - value
    │         ^^^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │         │                      
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:116:31
    │
116 │         self.balances[from] = self.balances[from] - value
    │                               ^^^^^^^^^^^^^ ^^^^ address
    │                               │              
    │                               mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:116:31
    │
116 │         self.balances[from] = self.balances[from] - value
    │                               ^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                               │                      
    │                               mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:116:31
    │
116 │         self.balances[from] = self.balances[from] - value
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
117 │         self.balances[to] = self.balances[to] + value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:117:9
    │
117 │         self.balances[to] = self.balances[to] + value
    │         ^^^^^^^^^^^^^ ^^ address
    │         │              
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:117:9
    │
117 │         self.balances[to] = self.balances[to] + value
    │         ^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │         │                    
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:117:29
    │
117 │         self.balances[to] = self.balances[to] + value
    │                             ^^^^^^^^^^^^^ ^^ address
    │                             │              
    │                             mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:117:29
    │
117 │         self.balances[to] = self.balances[to] + value
    │                             ^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                             │                    
    │                             mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:117:29
    │
117 │         self.balances[to] = self.balances[to] + value
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256
118 │         ctx.emit(Transfer(from, to, value))
    │         ^^^               ^^^^  ^^  ^^^^^ u256
    │         │                 │     │    
    │         │                 │     address
    │         │                 address
    │         mut Context

note: 
    ┌─ uniswap.fe:118:18
    │
118 │         ctx.emit(Transfer(from, to, value))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^ Transfer

note: 
    ┌─ uniswap.fe:118:9
    │
118 │         ctx.emit(Transfer(from, to, value))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ uniswap.fe:121:5
    │  
121 │ ╭     pub fn approve(mut self, mut ctx: Context, spender: address, value: u256) -> bool {
122 │ │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
123 │ │         return true
124 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: spender, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
    ┌─ uniswap.fe:122:9
    │
122 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
    │         ^^^^          ^^^         ^^^ mut Context
    │         │             │            
    │         │             mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:122:35
    │
122 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
    │                                   ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^ u256
    │                                   │                 │         
    │                                   │                 address
    │                                   address

note: 
    ┌─ uniswap.fe:122:9
    │
122 │         self._approve(ctx, owner: ctx.msg_sender(), spender, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
123 │         return true
    │                ^^^^ bool

note: 
    ┌─ uniswap.fe:126:5
    │  
126 │ ╭     pub fn transfer(mut self, mut ctx: Context, to: address, value: u256) -> bool {
127 │ │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
128 │ │         return true
129 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: to, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
    ┌─ uniswap.fe:127:9
    │
127 │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
    │         ^^^^           ^^^        ^^^ mut Context
    │         │              │           
    │         │              mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:127:35
    │
127 │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
    │                                   ^^^^^^^^^^^^^^^^  ^^  ^^^^^ u256
    │                                   │                 │    
    │                                   │                 address
    │                                   address

note: 
    ┌─ uniswap.fe:127:9
    │
127 │         self._transfer(ctx, from: ctx.msg_sender(), to, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
128 │         return true
    │                ^^^^ bool

note: 
    ┌─ uniswap.fe:131:5
    │  
131 │ ╭     pub fn transferFrom(mut self, mut ctx: Context, from: address, to: address, value: u256) -> bool {
132 │ │         assert self.allowances[from][ctx.msg_sender()] >= value
133 │ │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
134 │ │         self._transfer(ctx, from, to, value)
135 │ │         return true
136 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: from, typ: address }, { label: None, name: to, typ: address }, { label: None, name: value, typ: u256 }] -> bool

note: 
    ┌─ uniswap.fe:132:16
    │
132 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:132:16
    │
132 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^ ^^^^ address
    │                │                
    │                mut SPtr<Map<address, Map<address, u256>>>

note: 
    ┌─ uniswap.fe:132:16
    │
132 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^ ^^^ mut Context
    │                │                      
    │                mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:132:38
    │
132 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                                      ^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:132:16
    │
132 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ u256
    │                │                                           
    │                mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:132:16
    │
132 │         assert self.allowances[from][ctx.msg_sender()] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:133:9
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^^^^^^^^^^^^ ^^^^ address
    │         │                
    │         mut SPtr<Map<address, Map<address, u256>>>

note: 
    ┌─ uniswap.fe:133:9
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^^^^^^^^^^^^^^^^^^ ^^^ mut Context
    │         │                      
    │         mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:133:31
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                               ^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:133:9
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │         │                                          
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:133:51
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^ ^^^^ address
    │                                                   │                
    │                                                   mut SPtr<Map<address, Map<address, u256>>>

note: 
    ┌─ uniswap.fe:133:51
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^^^^^^^ ^^^ mut Context
    │                                                   │                      
    │                                                   mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:133:73
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                                         ^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:133:51
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ u256
    │                                                   │                                          
    │                                                   mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:133:51
    │
133 │         self.allowances[from][ctx.msg_sender()] = self.allowances[from][ctx.msg_sender()] - value
    │                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
134 │         self._transfer(ctx, from, to, value)
    │         ^^^^           ^^^  ^^^^  ^^  ^^^^^ u256
    │         │              │    │     │    
    │         │              │    │     address
    │         │              │    address
    │         │              mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:134:9
    │
134 │         self._transfer(ctx, from, to, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
135 │         return true
    │                ^^^^ bool

note: 
    ┌─ uniswap.fe:138:5
    │  
138 │ ╭     pub fn balanceOf(self, _ account: address) -> u256 {
139 │ │         return self.balances[account]
140 │ │     }
    │ ╰─────^ params: [self, { label: Some("_"), name: account, typ: address }] -> u256

note: 
    ┌─ uniswap.fe:139:16
    │
139 │         return self.balances[account]
    │                ^^^^ UniswapV2Pair

note: 
    ┌─ uniswap.fe:139:16
    │
139 │         return self.balances[account]
    │                ^^^^^^^^^^^^^ ^^^^^^^ address
    │                │              
    │                SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:139:16
    │
139 │         return self.balances[account]
    │                ^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:142:5
    │  
142 │ ╭     pub fn get_reserves(self) -> (u256, u256, u256) {
143 │ │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
144 │ │     }
    │ ╰─────^ params: [self] -> (u256, u256, u256)

note: 
    ┌─ uniswap.fe:143:17
    │
143 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                 ^^^^ UniswapV2Pair

note: 
    ┌─ uniswap.fe:143:17
    │
143 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                 ^^^^^^^^^^^^^  ^^^^ UniswapV2Pair
    │                 │               
    │                 SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:143:32
    │
143 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                                ^^^^^^^^^^^^^  ^^^^ UniswapV2Pair
    │                                │               
    │                                SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:143:47
    │
143 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:143:16
    │
143 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, u256, u256)

note: 
    ┌─ uniswap.fe:147:5
    │  
147 │ ╭     pub fn initialize(mut self, ctx: Context, token0: ERC20, token1: ERC20) {
148 │ │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
149 │ │         self.token0 = token0
150 │ │         self.token1 = token1
151 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: Context }, { label: None, name: token0, typ: ERC20 }, { label: None, name: token1, typ: ERC20 }] -> ()

note: 
    ┌─ uniswap.fe:148:16
    │
148 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^ Context

note: 
    ┌─ uniswap.fe:148:16
    │
148 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^    ^^^^ mut UniswapV2Pair
    │                │                    
    │                address

note: 
    ┌─ uniswap.fe:148:36
    │
148 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                                    ^^^^^^^^^^^^ mut SPtr<address> -Load-> address

note: 
    ┌─ uniswap.fe:148:16
    │
148 │         assert ctx.msg_sender() == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^ String<20>
    │                │                                  
    │                bool
149 │         self.token0 = token0
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:149:9
    │
149 │         self.token0 = token0
    │         ^^^^^^^^^^^   ^^^^^^ ERC20
    │         │              
    │         mut SPtr<ERC20>
150 │         self.token1 = token1
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:150:9
    │
150 │         self.token1 = token1
    │         ^^^^^^^^^^^   ^^^^^^ ERC20
    │         │              
    │         mut SPtr<ERC20>

note: 
    ┌─ uniswap.fe:154:5
    │  
154 │ ╭     fn _update(mut self, mut ctx: Context, balance0: u256, balance1: u256, reserve0: u256, reserve1: u256) {
155 │ │         // changed from u32s
156 │ │         // TODO: reproduce desired overflow (https://github.com/ethereum/fe/issues/286)
157 │ │         let block_timestamp: u256 = ctx.block_timestamp() % 2 ** 32
    · │
166 │ │         ctx.emit(Sync(reserve0: self.reserve0, reserve1: self.reserve1))
167 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: balance0, typ: u256 }, { label: None, name: balance1, typ: u256 }, { label: None, name: reserve0, typ: u256 }, { label: None, name: reserve1, typ: u256 }] -> ()

note: 
    ┌─ uniswap.fe:157:13
    │
157 │         let block_timestamp: u256 = ctx.block_timestamp() % 2 ** 32
    │             ^^^^^^^^^^^^^^^ u256
158 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last
    │             ^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:157:37
    │
157 │         let block_timestamp: u256 = ctx.block_timestamp() % 2 ** 32
    │                                     ^^^ mut Context

note: 
    ┌─ uniswap.fe:157:37
    │
157 │         let block_timestamp: u256 = ctx.block_timestamp() % 2 ** 32
    │                                     ^^^^^^^^^^^^^^^^^^^^^   ^    ^^ u256
    │                                     │                       │     
    │                                     │                       u256
    │                                     u256

note: 
    ┌─ uniswap.fe:157:61
    │
157 │         let block_timestamp: u256 = ctx.block_timestamp() % 2 ** 32
    │                                                             ^^^^^^^ u256

note: 
    ┌─ uniswap.fe:157:37
    │
157 │         let block_timestamp: u256 = ctx.block_timestamp() % 2 ** 32
    │                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
158 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last
    │                                  ^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │                                  │                  
    │                                  u256

note: 
    ┌─ uniswap.fe:158:52
    │
158 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last
    │                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:158:34
    │
158 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last
    │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
159 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0 {
    │            ^^^^^^^^^^^^   ^ u256
    │            │               
    │            u256

note: 
    ┌─ uniswap.fe:159:12
    │
159 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0 {
    │            ^^^^^^^^^^^^^^^^     ^^^^^^^^    ^ u256
    │            │                    │            
    │            │                    u256
    │            bool

note: 
    ┌─ uniswap.fe:159:33
    │
159 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0 {
    │                                 ^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:159:12
    │
159 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0 {
    │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^    ^ u256
    │            │                                      │            
    │            │                                      u256
    │            bool

note: 
    ┌─ uniswap.fe:159:51
    │
159 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0 {
    │                                                   ^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:159:12
    │
159 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0 {
    │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
160 │             self.price0_cumulative_last = self.price0_cumulative_last + reserve1 / reserve0 * time_elapsed
    │             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:160:13
    │
160 │             self.price0_cumulative_last = self.price0_cumulative_last + reserve1 / reserve0 * time_elapsed
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │             │                              
    │             mut SPtr<u256>

note: 
    ┌─ uniswap.fe:160:43
    │
160 │             self.price0_cumulative_last = self.price0_cumulative_last + reserve1 / reserve0 * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^   ^^^^^^^^ u256
    │                                           │                             │           
    │                                           │                             u256
    │                                           mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:160:73
    │
160 │             self.price0_cumulative_last = self.price0_cumulative_last + reserve1 / reserve0 * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256
    │                                                                         │                      
    │                                                                         u256

note: 
    ┌─ uniswap.fe:160:73
    │
160 │             self.price0_cumulative_last = self.price0_cumulative_last + reserve1 / reserve0 * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:160:43
    │
160 │             self.price0_cumulative_last = self.price0_cumulative_last + reserve1 / reserve0 * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
161 │             self.price1_cumulative_last = self.price1_cumulative_last + reserve0 / reserve1 * time_elapsed
    │             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:161:13
    │
161 │             self.price1_cumulative_last = self.price1_cumulative_last + reserve0 / reserve1 * time_elapsed
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Pair
    │             │                              
    │             mut SPtr<u256>

note: 
    ┌─ uniswap.fe:161:43
    │
161 │             self.price1_cumulative_last = self.price1_cumulative_last + reserve0 / reserve1 * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^   ^^^^^^^^ u256
    │                                           │                             │           
    │                                           │                             u256
    │                                           mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:161:73
    │
161 │             self.price1_cumulative_last = self.price1_cumulative_last + reserve0 / reserve1 * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256
    │                                                                         │                      
    │                                                                         u256

note: 
    ┌─ uniswap.fe:161:73
    │
161 │             self.price1_cumulative_last = self.price1_cumulative_last + reserve0 / reserve1 * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:161:43
    │
161 │             self.price1_cumulative_last = self.price1_cumulative_last + reserve0 / reserve1 * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
162 │         }
163 │         self.reserve0 = balance0
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:163:9
    │
163 │         self.reserve0 = balance0
    │         ^^^^^^^^^^^^^   ^^^^^^^^ u256
    │         │                
    │         mut SPtr<u256>
164 │         self.reserve1 = balance1
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:164:9
    │
164 │         self.reserve1 = balance1
    │         ^^^^^^^^^^^^^   ^^^^^^^^ u256
    │         │                
    │         mut SPtr<u256>
165 │         self.block_timestamp_last = block_timestamp
    │         ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:165:9
    │
165 │         self.block_timestamp_last = block_timestamp
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^ u256
    │         │                            
    │         mut SPtr<u256>
166 │         ctx.emit(Sync(reserve0: self.reserve0, reserve1: self.reserve1))
    │         ^^^                     ^^^^ mut UniswapV2Pair
    │         │                        
    │         mut Context

note: 
    ┌─ uniswap.fe:166:33
    │
166 │         ctx.emit(Sync(reserve0: self.reserve0, reserve1: self.reserve1))
    │                                 ^^^^^^^^^^^^^            ^^^^ mut UniswapV2Pair
    │                                 │                         
    │                                 mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:166:58
    │
166 │         ctx.emit(Sync(reserve0: self.reserve0, reserve1: self.reserve1))
    │                                                          ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:166:18
    │
166 │         ctx.emit(Sync(reserve0: self.reserve0, reserve1: self.reserve1))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Sync

note: 
    ┌─ uniswap.fe:166:9
    │
166 │         ctx.emit(Sync(reserve0: self.reserve0, reserve1: self.reserve1))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ uniswap.fe:169:5
    │  
169 │ ╭     fn _mint_fee(mut self, mut ctx: Context, reserve0: u256, reserve1: u256) -> bool {
170 │ │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
171 │ │         let fee_on: bool = fee_to != address(0)
172 │ │         let k_last: u256 = self.k_last
    · │
189 │ │         return fee_on
190 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: reserve0, typ: u256 }, { label: None, name: reserve1, typ: u256 }] -> bool

note: 
    ┌─ uniswap.fe:170:13
    │
170 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │             ^^^^^^ address
171 │         let fee_on: bool = fee_to != address(0)
    │             ^^^^^^ bool
172 │         let k_last: u256 = self.k_last
    │             ^^^^^^ u256
    ·
175 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                     ^^^^^^ u256
176 │                 let root_k_last: u256 = sqrt(k_last)
    │                     ^^^^^^^^^^^ u256
177 │                 if root_k > root_k_last {
178 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                         ^^^^^^^^^ u256
179 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                         ^^^^^^^^^^^ u256
180 │                     let liquidity: u256 = numerator / denominator
    │                         ^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:170:48
    │
170 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                                                ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:170:48
    │
170 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                                                ^^^^^^^^^^^^ mut SPtr<address> -Load-> address

note: 
    ┌─ uniswap.fe:170:31
    │
170 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UniswapV2Factory

note: 
    ┌─ uniswap.fe:170:31
    │
170 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address
171 │         let fee_on: bool = fee_to != address(0)
    │                            ^^^^^^            ^ u256
    │                            │                  
    │                            address

note: 
    ┌─ uniswap.fe:171:38
    │
171 │         let fee_on: bool = fee_to != address(0)
    │                                      ^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:171:28
    │
171 │         let fee_on: bool = fee_to != address(0)
    │                            ^^^^^^^^^^^^^^^^^^^^ bool
172 │         let k_last: u256 = self.k_last
    │                            ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:172:28
    │
172 │         let k_last: u256 = self.k_last
    │                            ^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
173 │         if fee_on {
    │            ^^^^^^ bool
174 │             if k_last != 0 {
    │                ^^^^^^    ^ u256
    │                │          
    │                u256

note: 
    ┌─ uniswap.fe:174:16
    │
174 │             if k_last != 0 {
    │                ^^^^^^^^^^^ bool
175 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                         ^^^^^^^^   ^^^^^^^^ u256
    │                                         │           
    │                                         u256

note: 
    ┌─ uniswap.fe:175:41
    │
175 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                         ^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:175:36
    │
175 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ u256
176 │                 let root_k_last: u256 = sqrt(k_last)
    │                                              ^^^^^^ u256

note: 
    ┌─ uniswap.fe:176:41
    │
176 │                 let root_k_last: u256 = sqrt(k_last)
    │                                         ^^^^^^^^^^^^ u256
177 │                 if root_k > root_k_last {
    │                    ^^^^^^   ^^^^^^^^^^^ u256
    │                    │         
    │                    u256

note: 
    ┌─ uniswap.fe:177:20
    │
177 │                 if root_k > root_k_last {
    │                    ^^^^^^^^^^^^^^^^^^^^ bool
178 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:178:43
    │
178 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^   ^^^^^^ u256
    │                                           │                    
    │                                           mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:178:43
    │
178 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^ u256
    │                                           │                             
    │                                           u256

note: 
    ┌─ uniswap.fe:178:43
    │
178 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
179 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^   ^ u256
    │                                             │         
    │                                             u256

note: 
    ┌─ uniswap.fe:179:45
    │
179 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^^^^^   ^^^^^^^^^^^ u256
    │                                             │             
    │                                             u256

note: 
    ┌─ uniswap.fe:179:45
    │
179 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256
180 │                     let liquidity: u256 = numerator / denominator
    │                                           ^^^^^^^^^   ^^^^^^^^^^^ u256
    │                                           │            
    │                                           u256

note: 
    ┌─ uniswap.fe:180:43
    │
180 │                     let liquidity: u256 = numerator / denominator
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^ u256
181 │                     if liquidity > 0 {
    │                        ^^^^^^^^^   ^ u256
    │                        │            
    │                        u256

note: 
    ┌─ uniswap.fe:181:24
    │
181 │                     if liquidity > 0 {
    │                        ^^^^^^^^^^^^^ bool
182 │                         self._mint(ctx, to: fee_to, value: liquidity)
    │                         ^^^^       ^^^      ^^^^^^         ^^^^^^^^^ u256
    │                         │          │        │               
    │                         │          │        address
    │                         │          mut Context
    │                         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:182:25
    │
182 │                         self._mint(ctx, to: fee_to, value: liquidity)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
    ·
186 │         } else if k_last != 0 {
    │                   ^^^^^^    ^ u256
    │                   │          
    │                   u256

note: 
    ┌─ uniswap.fe:186:19
    │
186 │         } else if k_last != 0 {
    │                   ^^^^^^^^^^^ bool
187 │             self.k_last = 0
    │             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:187:13
    │
187 │             self.k_last = 0
    │             ^^^^^^^^^^^   ^ u256
    │             │              
    │             mut SPtr<u256>
188 │         }
189 │         return fee_on
    │                ^^^^^^ bool

note: 
    ┌─ uniswap.fe:193:5
    │  
193 │ ╭     pub fn mint(mut self, mut ctx: Context, to: address) -> u256 {
194 │ │         let reserve0: u256 = self.reserve0
195 │ │         let reserve1: u256 = self.reserve1
196 │ │         let balance0: u256 = self.token0.balanceOf(ctx.self_address())
    · │
216 │ │         return liquidity
217 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: to, typ: address }] -> u256

note: 
    ┌─ uniswap.fe:194:13
    │
194 │         let reserve0: u256 = self.reserve0
    │             ^^^^^^^^ u256
195 │         let reserve1: u256 = self.reserve1
    │             ^^^^^^^^ u256
196 │         let balance0: u256 = self.token0.balanceOf(ctx.self_address())
    │             ^^^^^^^^ u256
197 │         let balance1: u256 = self.token1.balanceOf(ctx.self_address())
    │             ^^^^^^^^ u256
198 │         let amount0: u256 = balance0 - self.reserve0
    │             ^^^^^^^ u256
199 │         let amount1: u256 = balance1 - self.reserve1
    │             ^^^^^^^ u256
200 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │             ^^^^^^ bool
201 │         let total_supply: u256 = self.total_supply // gas savings, must be defined here since totalSupply can update in _mintFee
    │             ^^^^^^^^^^^^ u256
202 │         let mut liquidity: u256 = 0
    │                 ^^^^^^^^^ mut u256

note: 
    ┌─ uniswap.fe:194:30
    │
194 │         let reserve0: u256 = self.reserve0
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:194:30
    │
194 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
195 │         let reserve1: u256 = self.reserve1
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:195:30
    │
195 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
196 │         let balance0: u256 = self.token0.balanceOf(ctx.self_address())
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:196:30
    │
196 │         let balance0: u256 = self.token0.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^           ^^^ mut Context
    │                              │                      
    │                              mut SPtr<ERC20> -Load-> ERC20

note: 
    ┌─ uniswap.fe:196:52
    │
196 │         let balance0: u256 = self.token0.balanceOf(ctx.self_address())
    │                                                    ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:196:30
    │
196 │         let balance0: u256 = self.token0.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
197 │         let balance1: u256 = self.token1.balanceOf(ctx.self_address())
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:197:30
    │
197 │         let balance1: u256 = self.token1.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^           ^^^ mut Context
    │                              │                      
    │                              mut SPtr<ERC20> -Load-> ERC20

note: 
    ┌─ uniswap.fe:197:52
    │
197 │         let balance1: u256 = self.token1.balanceOf(ctx.self_address())
    │                                                    ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:197:30
    │
197 │         let balance1: u256 = self.token1.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
198 │         let amount0: u256 = balance0 - self.reserve0
    │                             ^^^^^^^^   ^^^^ mut UniswapV2Pair
    │                             │           
    │                             u256

note: 
    ┌─ uniswap.fe:198:40
    │
198 │         let amount0: u256 = balance0 - self.reserve0
    │                                        ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:198:29
    │
198 │         let amount0: u256 = balance0 - self.reserve0
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256
199 │         let amount1: u256 = balance1 - self.reserve1
    │                             ^^^^^^^^   ^^^^ mut UniswapV2Pair
    │                             │           
    │                             u256

note: 
    ┌─ uniswap.fe:199:40
    │
199 │         let amount1: u256 = balance1 - self.reserve1
    │                                        ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:199:29
    │
199 │         let amount1: u256 = balance1 - self.reserve1
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256
200 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^           ^^^  ^^^^^^^^  ^^^^^^^^ u256
    │                            │              │    │          
    │                            │              │    u256
    │                            │              mut Context
    │                            mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:200:28
    │
200 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
201 │         let total_supply: u256 = self.total_supply // gas savings, must be defined here since totalSupply can update in _mintFee
    │                                  ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:201:34
    │
201 │         let total_supply: u256 = self.total_supply // gas savings, must be defined here since totalSupply can update in _mintFee
    │                                  ^^^^^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
202 │         let mut liquidity: u256 = 0
    │                                   ^ u256
203 │         if total_supply == 0 {
    │            ^^^^^^^^^^^^    ^ u256
    │            │                
    │            u256

note: 
    ┌─ uniswap.fe:203:12
    │
203 │         if total_supply == 0 {
    │            ^^^^^^^^^^^^^^^^^ bool
204 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │             ^^^^^^^^^        ^^^^^^^   ^^^^^^^ u256
    │             │                │          
    │             │                u256
    │             mut u256

note: 
    ┌─ uniswap.fe:204:30
    │
204 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                              ^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:204:25
    │
204 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ u256
    │                         │                          
    │                         u256

note: 
    ┌─ uniswap.fe:204:25
    │
204 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
205 │             self._mint(ctx, to: address(0), value: MINIMUM_LIQUIDITY) // permanently lock the first MINIMUM_LIQUIDITY tokens
    │             ^^^^       ^^^              ^ u256
    │             │          │                 
    │             │          mut Context
    │             mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:205:33
    │
205 │             self._mint(ctx, to: address(0), value: MINIMUM_LIQUIDITY) // permanently lock the first MINIMUM_LIQUIDITY tokens
    │                                 ^^^^^^^^^^         ^^^^^^^^^^^^^^^^^ u256
    │                                 │                   
    │                                 address

note: 
    ┌─ uniswap.fe:205:13
    │
205 │             self._mint(ctx, to: address(0), value: MINIMUM_LIQUIDITY) // permanently lock the first MINIMUM_LIQUIDITY tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
206 │         } else {
207 │             liquidity = min(amount0 * total_supply / reserve0, amount1 * total_supply / reserve1)
    │             ^^^^^^^^^       ^^^^^^^   ^^^^^^^^^^^^ u256
    │             │               │          
    │             │               u256
    │             mut u256

note: 
    ┌─ uniswap.fe:207:29
    │
207 │             liquidity = min(amount0 * total_supply / reserve0, amount1 * total_supply / reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^ u256
    │                             │                         
    │                             u256

note: 
    ┌─ uniswap.fe:207:29
    │
207 │             liquidity = min(amount0 * total_supply / reserve0, amount1 * total_supply / reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^   ^^^^^^^^^^^^ u256
    │                             │                                  │          
    │                             │                                  u256
    │                             u256

note: 
    ┌─ uniswap.fe:207:64
    │
207 │             liquidity = min(amount0 * total_supply / reserve0, amount1 * total_supply / reserve1)
    │                                                                ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^ u256
    │                                                                │                         
    │                                                                u256

note: 
    ┌─ uniswap.fe:207:64
    │
207 │             liquidity = min(amount0 * total_supply / reserve0, amount1 * total_supply / reserve1)
    │                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:207:25
    │
207 │             liquidity = min(amount0 * total_supply / reserve0, amount1 * total_supply / reserve1)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
208 │         }
209 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                ^^^^^^^^^   ^ u256
    │                │            
    │                mut u256

note: 
    ┌─ uniswap.fe:209:16
    │
209 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<40>
    │                │               
    │                bool
210 │         self._mint(ctx, to, value: liquidity)
    │         ^^^^       ^^^  ^^         ^^^^^^^^^ mut u256
    │         │          │    │           
    │         │          │    address
    │         │          mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:210:9
    │
210 │         self._mint(ctx, to, value: liquidity)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
211 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^         ^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^ u256
    │         │            │    │         │         │          
    │         │            │    │         │         u256
    │         │            │    │         u256
    │         │            │    u256
    │         │            mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:211:9
    │
211 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
212 │         if fee_on {
    │            ^^^^^^ bool
213 │             self.k_last = reserve0 * reserve1 // reserve0 and reserve1 are up-to-date
    │             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:213:13
    │
213 │             self.k_last = reserve0 * reserve1 // reserve0 and reserve1 are up-to-date
    │             ^^^^^^^^^^^   ^^^^^^^^   ^^^^^^^^ u256
    │             │             │           
    │             │             u256
    │             mut SPtr<u256>

note: 
    ┌─ uniswap.fe:213:27
    │
213 │             self.k_last = reserve0 * reserve1 // reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^^^^^^^^^^^^ u256
214 │         }
215 │         ctx.emit(Mint(sender: ctx.msg_sender(), amount0, amount1))
    │         ^^^                   ^^^ mut Context
    │         │                      
    │         mut Context

note: 
    ┌─ uniswap.fe:215:31
    │
215 │         ctx.emit(Mint(sender: ctx.msg_sender(), amount0, amount1))
    │                               ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^ u256
    │                               │                 │         
    │                               │                 u256
    │                               address

note: 
    ┌─ uniswap.fe:215:18
    │
215 │         ctx.emit(Mint(sender: ctx.msg_sender(), amount0, amount1))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Mint

note: 
    ┌─ uniswap.fe:215:9
    │
215 │         ctx.emit(Mint(sender: ctx.msg_sender(), amount0, amount1))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
216 │         return liquidity
    │                ^^^^^^^^^ mut u256

note: 
    ┌─ uniswap.fe:220:5
    │  
220 │ ╭     pub fn burn(mut self, mut ctx: Context, to: address) -> (u256, u256) {
221 │ │         let reserve0: u256 = self.reserve0
222 │ │         let reserve1: u256 = self.reserve1
223 │ │         let token0: ERC20 = self.token0
    · │
244 │ │         return (amount0, amount1)
245 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: to, typ: address }] -> (u256, u256)

note: 
    ┌─ uniswap.fe:221:13
    │
221 │         let reserve0: u256 = self.reserve0
    │             ^^^^^^^^ u256
222 │         let reserve1: u256 = self.reserve1
    │             ^^^^^^^^ u256
223 │         let token0: ERC20 = self.token0
    │             ^^^^^^ ERC20
224 │         let token1: ERC20 = self.token1
    │             ^^^^^^ ERC20
225 │         let mut balance0: u256 = token0.balanceOf(ctx.self_address())
    │                 ^^^^^^^^ mut u256
226 │         let mut balance1: u256 = token1.balanceOf(ctx.self_address())
    │                 ^^^^^^^^ mut u256
227 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │             ^^^^^^^^^ u256
228 │ 
229 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │             ^^^^^^ bool
230 │         let total_supply: u256 = self.total_supply // gas savings, must be defined here since total_supply can update in _mintFee
    │             ^^^^^^^^^^^^ u256
231 │         let amount0: u256 = (liquidity * balance0) / total_supply // using balances ensures pro-rata distribution
    │             ^^^^^^^ u256
232 │         let amount1: u256 = (liquidity * balance1) / total_supply // using balances ensures pro-rata distribution
    │             ^^^^^^^ u256

note: 
    ┌─ uniswap.fe:221:30
    │
221 │         let reserve0: u256 = self.reserve0
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:221:30
    │
221 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
222 │         let reserve1: u256 = self.reserve1
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:222:30
    │
222 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
223 │         let token0: ERC20 = self.token0
    │                             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:223:29
    │
223 │         let token0: ERC20 = self.token0
    │                             ^^^^^^^^^^^ mut SPtr<ERC20> -Load-> ERC20
224 │         let token1: ERC20 = self.token1
    │                             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:224:29
    │
224 │         let token1: ERC20 = self.token1
    │                             ^^^^^^^^^^^ mut SPtr<ERC20> -Load-> ERC20
225 │         let mut balance0: u256 = token0.balanceOf(ctx.self_address())
    │                                  ^^^^^^           ^^^ mut Context
    │                                  │                 
    │                                  ERC20

note: 
    ┌─ uniswap.fe:225:51
    │
225 │         let mut balance0: u256 = token0.balanceOf(ctx.self_address())
    │                                                   ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:225:34
    │
225 │         let mut balance0: u256 = token0.balanceOf(ctx.self_address())
    │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
226 │         let mut balance1: u256 = token1.balanceOf(ctx.self_address())
    │                                  ^^^^^^           ^^^ mut Context
    │                                  │                 
    │                                  ERC20

note: 
    ┌─ uniswap.fe:226:51
    │
226 │         let mut balance1: u256 = token1.balanceOf(ctx.self_address())
    │                                                   ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:226:34
    │
226 │         let mut balance1: u256 = token1.balanceOf(ctx.self_address())
    │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
227 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                               ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:227:31
    │
227 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                               ^^^^^^^^^^^^^ ^^^ mut Context
    │                               │              
    │                               mut SPtr<Map<address, u256>>

note: 
    ┌─ uniswap.fe:227:45
    │
227 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                                             ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:227:31
    │
227 │         let liquidity: u256 = self.balances[ctx.self_address()]
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
228 │ 
229 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^           ^^^  ^^^^^^^^  ^^^^^^^^ u256
    │                            │              │    │          
    │                            │              │    u256
    │                            │              mut Context
    │                            mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:229:28
    │
229 │         let fee_on: bool = self._mint_fee(ctx, reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
230 │         let total_supply: u256 = self.total_supply // gas savings, must be defined here since total_supply can update in _mintFee
    │                                  ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:230:34
    │
230 │         let total_supply: u256 = self.total_supply // gas savings, must be defined here since total_supply can update in _mintFee
    │                                  ^^^^^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
231 │         let amount0: u256 = (liquidity * balance0) / total_supply // using balances ensures pro-rata distribution
    │                              ^^^^^^^^^   ^^^^^^^^ mut u256
    │                              │            
    │                              u256

note: 
    ┌─ uniswap.fe:231:29
    │
231 │         let amount0: u256 = (liquidity * balance0) / total_supply // using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256
    │                             │                         
    │                             u256

note: 
    ┌─ uniswap.fe:231:29
    │
231 │         let amount0: u256 = (liquidity * balance0) / total_supply // using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
232 │         let amount1: u256 = (liquidity * balance1) / total_supply // using balances ensures pro-rata distribution
    │                              ^^^^^^^^^   ^^^^^^^^ mut u256
    │                              │            
    │                              u256

note: 
    ┌─ uniswap.fe:232:29
    │
232 │         let amount1: u256 = (liquidity * balance1) / total_supply // using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^ u256
    │                             │                         
    │                             u256

note: 
    ┌─ uniswap.fe:232:29
    │
232 │         let amount1: u256 = (liquidity * balance1) / total_supply // using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
233 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^   ^ u256
    │                │          
    │                u256

note: 
    ┌─ uniswap.fe:233:16
    │
233 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^^^^^     ^^^^^^^   ^ u256
    │                │               │          
    │                │               u256
    │                bool

note: 
    ┌─ uniswap.fe:233:32
    │
233 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                                ^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:233:16
    │
233 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<40>
    │                │                             
    │                bool
234 │         self._burn(ctx, from: ctx.self_address(), value: liquidity)
    │         ^^^^       ^^^        ^^^ mut Context
    │         │          │           
    │         │          mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:234:31
    │
234 │         self._burn(ctx, from: ctx.self_address(), value: liquidity)
    │                               ^^^^^^^^^^^^^^^^^^         ^^^^^^^^^ u256
    │                               │                           
    │                               address

note: 
    ┌─ uniswap.fe:234:9
    │
234 │         self._burn(ctx, from: ctx.self_address(), value: liquidity)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
235 │         token0.transfer(to, amount0)
    │         ^^^^^^          ^^  ^^^^^^^ u256
    │         │               │    
    │         │               address
    │         ERC20

note: 
    ┌─ uniswap.fe:235:9
    │
235 │         token0.transfer(to, amount0)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
236 │         token1.transfer(to, amount1)
    │         ^^^^^^          ^^  ^^^^^^^ u256
    │         │               │    
    │         │               address
    │         ERC20

note: 
    ┌─ uniswap.fe:236:9
    │
236 │         token1.transfer(to, amount1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
237 │         balance0 = token0.balanceOf(ctx.self_address())
    │         ^^^^^^^^   ^^^^^^           ^^^ mut Context
    │         │          │                 
    │         │          ERC20
    │         mut u256

note: 
    ┌─ uniswap.fe:237:37
    │
237 │         balance0 = token0.balanceOf(ctx.self_address())
    │                                     ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:237:20
    │
237 │         balance0 = token0.balanceOf(ctx.self_address())
    │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
238 │         balance1 = token1.balanceOf(ctx.self_address())
    │         ^^^^^^^^   ^^^^^^           ^^^ mut Context
    │         │          │                 
    │         │          ERC20
    │         mut u256

note: 
    ┌─ uniswap.fe:238:37
    │
238 │         balance1 = token1.balanceOf(ctx.self_address())
    │                                     ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:238:20
    │
238 │         balance1 = token1.balanceOf(ctx.self_address())
    │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
239 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^         ^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^ u256
    │         │            │    │         │         │          
    │         │            │    │         │         u256
    │         │            │    │         mut u256
    │         │            │    mut u256
    │         │            mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:239:9
    │
239 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
240 │         if fee_on {
    │            ^^^^^^ bool
241 │             self.k_last = reserve0 * reserve1
    │             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:241:13
    │
241 │             self.k_last = reserve0 * reserve1
    │             ^^^^^^^^^^^   ^^^^^^^^   ^^^^^^^^ u256
    │             │             │           
    │             │             u256
    │             mut SPtr<u256>

note: 
    ┌─ uniswap.fe:241:27
    │
241 │             self.k_last = reserve0 * reserve1
    │                           ^^^^^^^^^^^^^^^^^^^ u256
242 │         }
243 │         ctx.emit(Burn(sender: ctx.msg_sender(), amount0, amount1, to))
    │         ^^^                   ^^^ mut Context
    │         │                      
    │         mut Context

note: 
    ┌─ uniswap.fe:243:31
    │
243 │         ctx.emit(Burn(sender: ctx.msg_sender(), amount0, amount1, to))
    │                               ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^  ^^ address
    │                               │                 │        │         
    │                               │                 │        u256
    │                               │                 u256
    │                               address

note: 
    ┌─ uniswap.fe:243:18
    │
243 │         ctx.emit(Burn(sender: ctx.msg_sender(), amount0, amount1, to))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Burn

note: 
    ┌─ uniswap.fe:243:9
    │
243 │         ctx.emit(Burn(sender: ctx.msg_sender(), amount0, amount1, to))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
244 │         return (amount0, amount1)
    │                 ^^^^^^^  ^^^^^^^ u256
    │                 │         
    │                 u256

note: 
    ┌─ uniswap.fe:244:16
    │
244 │         return (amount0, amount1)
    │                ^^^^^^^^^^^^^^^^^^ (u256, u256)

note: 
    ┌─ uniswap.fe:250:5
    │  
250 │ ╭     pub fn swap(mut self, mut ctx: Context, amount0_out: u256, amount1_out: u256, to: address) {
251 │ │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
252 │ │         let reserve0: u256 = self.reserve0
253 │ │         let reserve1: u256 = self.reserve1
    · │
286 │ │         ctx.emit(Swap(sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to))
287 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: None, name: amount0_out, typ: u256 }, { label: None, name: amount1_out, typ: u256 }, { label: None, name: to, typ: address }] -> ()

note: 
    ┌─ uniswap.fe:252:13
    │
252 │         let reserve0: u256 = self.reserve0
    │             ^^^^^^^^ u256
253 │         let reserve1: u256 = self.reserve1
    │             ^^^^^^^^ u256
    ·
256 │         let token0: ERC20 = self.token0
    │             ^^^^^^ ERC20
257 │         let token1: ERC20 = self.token1
    │             ^^^^^^ ERC20
    ·
272 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │             ^^^^^^^^ u256
273 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │             ^^^^^^^^ u256
274 │ 
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │             ^^^^^^^^^^ u256
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │             ^^^^^^^^^^ u256
    ·
280 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │             ^^^^^^^^^^^^^^^^^ u256
281 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │             ^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:251:16
    │
251 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^   ^ u256
    │                │              
    │                u256

note: 
    ┌─ uniswap.fe:251:16
    │
251 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^    ^^^^^^^^^^^   ^ u256
    │                │                  │              
    │                │                  u256
    │                bool

note: 
    ┌─ uniswap.fe:251:35
    │
251 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                                   ^^^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:251:16
    │
251 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<37>
    │                │                                    
    │                bool
252 │         let reserve0: u256 = self.reserve0
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:252:30
    │
252 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
253 │         let reserve1: u256 = self.reserve1
    │                              ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:253:30
    │
253 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
254 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^   ^^^^^^^^ u256
    │                │              
    │                u256

note: 
    ┌─ uniswap.fe:254:16
    │
254 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^   ^^^^^^^^ u256
    │                │                          │              
    │                │                          u256
    │                bool

note: 
    ┌─ uniswap.fe:254:43
    │
254 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                                           ^^^^^^^^^^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:254:16
    │
254 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<33>
    │                │                                                   
    │                bool
255 │ 
256 │         let token0: ERC20 = self.token0
    │                             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:256:29
    │
256 │         let token0: ERC20 = self.token0
    │                             ^^^^^^^^^^^ mut SPtr<ERC20> -Load-> ERC20
257 │         let token1: ERC20 = self.token1
    │                             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:257:29
    │
257 │         let token1: ERC20 = self.token1
    │                             ^^^^^^^^^^^ mut SPtr<ERC20> -Load-> ERC20
    ·
260 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^            ^^^^^^ ERC20
    │                │              
    │                address

note: 
    ┌─ uniswap.fe:260:22
    │
260 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                      ^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:260:16
    │
260 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^^^^^^^^^^^^^^^^^^^^     ^^            ^^^^^^ ERC20
    │                │                         │              
    │                │                         address
    │                bool

note: 
    ┌─ uniswap.fe:260:48
    │
260 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                                ^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:260:42
    │
260 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                          ^^^^^^^^^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:260:16
    │
260 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^ String<21>
    │                │                                                 
    │                bool
261 │ 
262 │         if amount0_out > 0 {
    │            ^^^^^^^^^^^   ^ u256
    │            │              
    │            u256

note: 
    ┌─ uniswap.fe:262:12
    │
262 │         if amount0_out > 0 {
    │            ^^^^^^^^^^^^^^^ bool
263 │             token0.transfer(to, amount0_out) // optimistically transfer tokens
    │             ^^^^^^          ^^  ^^^^^^^^^^^ u256
    │             │               │    
    │             │               address
    │             ERC20

note: 
    ┌─ uniswap.fe:263:13
    │
263 │             token0.transfer(to, amount0_out) // optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
264 │         }
265 │         if amount1_out > 0 {
    │            ^^^^^^^^^^^   ^ u256
    │            │              
    │            u256

note: 
    ┌─ uniswap.fe:265:12
    │
265 │         if amount1_out > 0 {
    │            ^^^^^^^^^^^^^^^ bool
266 │             token1.transfer(to, amount1_out) // optimistically transfer tokens
    │             ^^^^^^          ^^  ^^^^^^^^^^^ u256
    │             │               │    
    │             │               address
    │             ERC20

note: 
    ┌─ uniswap.fe:266:13
    │
266 │             token1.transfer(to, amount1_out) // optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
    ·
272 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                              ^^^^^^           ^^^ mut Context
    │                              │                 
    │                              ERC20

note: 
    ┌─ uniswap.fe:272:47
    │
272 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                                               ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:272:30
    │
272 │         let balance0: u256 = token0.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
273 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                              ^^^^^^           ^^^ mut Context
    │                              │                 
    │                              ERC20

note: 
    ┌─ uniswap.fe:273:47
    │
273 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                                               ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:273:30
    │
273 │         let balance1: u256 = token1.balanceOf(ctx.self_address())
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
274 │ 
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                       ^^^^^^^^   ^^^^^^^^   ^^^^^^^^^^^ u256
    │                                                                       │          │           
    │                                                                       │          u256
    │                                                                       u256

note: 
    ┌─ uniswap.fe:275:82
    │
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                                  ^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:275:32
    │
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
    │                                │                                       
    │                                u256

note: 
    ┌─ uniswap.fe:275:44
    │
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                            ^^^^^^^^   ^^^^^^^^^^^ u256
    │                                            │           
    │                                            u256

note: 
    ┌─ uniswap.fe:275:43
    │
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:275:32
    │
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^ u256
    │                                │                                                                              
    │                                u256

note: 
    ┌─ uniswap.fe:275:32
    │
275 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                       ^^^^^^^^   ^^^^^^^^   ^^^^^^^^^^^ u256
    │                                                                       │          │           
    │                                                                       │          u256
    │                                                                       u256

note: 
    ┌─ uniswap.fe:276:82
    │
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                                  ^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:276:32
    │
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
    │                                │                                       
    │                                u256

note: 
    ┌─ uniswap.fe:276:44
    │
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                            ^^^^^^^^   ^^^^^^^^^^^ u256
    │                                            │           
    │                                            u256

note: 
    ┌─ uniswap.fe:276:43
    │
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:276:32
    │
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^ u256
    │                                │                                                                              
    │                                u256

note: 
    ┌─ uniswap.fe:276:32
    │
276 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
277 │ 
278 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^   ^ u256
    │                │             
    │                u256

note: 
    ┌─ uniswap.fe:278:16
    │
278 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^    ^^^^^^^^^^   ^ u256
    │                │                 │             
    │                │                 u256
    │                bool

note: 
    ┌─ uniswap.fe:278:34
    │
278 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                                  ^^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:278:16
    │
278 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<36>
    │                │                                  
    │                bool
279 │ 
280 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^   ^^^^ u256
    │                                       │           
    │                                       u256

note: 
    ┌─ uniswap.fe:280:39
    │
280 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^^^^^^^^   ^^^^^^^^^^   ^ u256
    │                                       │                 │             
    │                                       │                 u256
    │                                       u256

note: 
    ┌─ uniswap.fe:280:57
    │
280 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                                         ^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:280:39
    │
280 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
281 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^   ^^^^ u256
    │                                       │           
    │                                       u256

note: 
    ┌─ uniswap.fe:281:39
    │
281 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^^^^^^^^   ^^^^^^^^^^   ^ u256
    │                                       │                 │             
    │                                       │                 u256
    │                                       u256

note: 
    ┌─ uniswap.fe:281:57
    │
281 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                                         ^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:281:39
    │
281 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
282 │ 
283 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ u256
    │                │                    
    │                u256

note: 
    ┌─ uniswap.fe:283:16
    │
283 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^   ^^^^^^^^ u256
    │                │                                        │           
    │                │                                        u256
    │                u256

note: 
    ┌─ uniswap.fe:283:57
    │
283 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^^^^^^^^^^^^   ^^^^^^^ u256
    │                                                         │                      
    │                                                         u256

note: 
    ┌─ uniswap.fe:283:57
    │
283 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:283:16
    │
283 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ String<12>
    │                │                                                                        
    │                bool
284 │ 
285 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^         ^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^  ^^^^^^^^ u256
    │         │            │    │         │         │          
    │         │            │    │         │         u256
    │         │            │    │         u256
    │         │            │    u256
    │         │            mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:285:9
    │
285 │         self._update(ctx, balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
286 │         ctx.emit(Swap(sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to))
    │         ^^^                   ^^^ mut Context
    │         │                      
    │         mut Context

note: 
    ┌─ uniswap.fe:286:31
    │
286 │         ctx.emit(Swap(sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to))
    │                               ^^^^^^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^  ^^ address
    │                               │                 │           │           │            │             
    │                               │                 │           │           │            u256
    │                               │                 │           │           u256
    │                               │                 │           u256
    │                               │                 u256
    │                               address

note: 
    ┌─ uniswap.fe:286:18
    │
286 │         ctx.emit(Swap(sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Swap

note: 
    ┌─ uniswap.fe:286:9
    │
286 │         ctx.emit(Swap(sender: ctx.msg_sender(), amount0_in, amount1_in, amount0_out, amount1_out, to))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()

note: 
    ┌─ uniswap.fe:290:5
    │  
290 │ ╭     pub fn skim(self, ctx: Context, to: address) {
291 │ │         let token0: ERC20 = self.token0 // gas savings
292 │ │         let token1: ERC20 = self.token1 // gas savings
293 │ │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
294 │ │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
295 │ │     }
    │ ╰─────^ params: [self, { label: None, name: ctx, typ: Context }, { label: None, name: to, typ: address }] -> ()

note: 
    ┌─ uniswap.fe:291:13
    │
291 │         let token0: ERC20 = self.token0 // gas savings
    │             ^^^^^^ ERC20
292 │         let token1: ERC20 = self.token1 // gas savings
    │             ^^^^^^ ERC20

note: 
    ┌─ uniswap.fe:291:29
    │
291 │         let token0: ERC20 = self.token0 // gas savings
    │                             ^^^^ UniswapV2Pair

note: 
    ┌─ uniswap.fe:291:29
    │
291 │         let token0: ERC20 = self.token0 // gas savings
    │                             ^^^^^^^^^^^ SPtr<ERC20> -Load-> ERC20
292 │         let token1: ERC20 = self.token1 // gas savings
    │                             ^^^^ UniswapV2Pair

note: 
    ┌─ uniswap.fe:292:29
    │
292 │         let token1: ERC20 = self.token1 // gas savings
    │                             ^^^^^^^^^^^ SPtr<ERC20> -Load-> ERC20
293 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │         ^^^^^^          ^^  ^^^^^^           ^^^ Context
    │         │               │   │                 
    │         │               │   ERC20
    │         │               address
    │         ERC20

note: 
    ┌─ uniswap.fe:293:46
    │
293 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                                              ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:293:29
    │
293 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair
    │                             │                                       
    │                             u256

note: 
    ┌─ uniswap.fe:293:68
    │
293 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                                                                    ^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:293:29
    │
293 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:293:9
    │
293 │         token0.transfer(to, token0.balanceOf(ctx.self_address()) - self.reserve0)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool
294 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │         ^^^^^^          ^^  ^^^^^^           ^^^ Context
    │         │               │   │                 
    │         │               │   ERC20
    │         │               address
    │         ERC20

note: 
    ┌─ uniswap.fe:294:46
    │
294 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                                              ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:294:29
    │
294 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^ UniswapV2Pair
    │                             │                                       
    │                             u256

note: 
    ┌─ uniswap.fe:294:68
    │
294 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                                                                    ^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:294:29
    │
294 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:294:9
    │
294 │         token1.transfer(to, token1.balanceOf(ctx.self_address()) - self.reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool

note: 
    ┌─ uniswap.fe:298:5
    │  
298 │ ╭     pub fn sync(mut self, mut ctx: Context) {
299 │ │         let token0: ERC20 = self.token0
300 │ │         let token1: ERC20 = self.token1
301 │ │         self._update(ctx,
    · │
305 │ │                      reserve1: self.reserve1)
306 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }] -> ()

note: 
    ┌─ uniswap.fe:299:13
    │
299 │         let token0: ERC20 = self.token0
    │             ^^^^^^ ERC20
300 │         let token1: ERC20 = self.token1
    │             ^^^^^^ ERC20

note: 
    ┌─ uniswap.fe:299:29
    │
299 │         let token0: ERC20 = self.token0
    │                             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:299:29
    │
299 │         let token0: ERC20 = self.token0
    │                             ^^^^^^^^^^^ mut SPtr<ERC20> -Load-> ERC20
300 │         let token1: ERC20 = self.token1
    │                             ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:300:29
    │
300 │         let token1: ERC20 = self.token1
    │                             ^^^^^^^^^^^ mut SPtr<ERC20> -Load-> ERC20
301 │         self._update(ctx,
    │         ^^^^         ^^^ mut Context
    │         │             
    │         mut UniswapV2Pair
302 │                      balance0: token0.balanceOf(ctx.self_address()),
    │                                ^^^^^^           ^^^ mut Context
    │                                │                 
    │                                ERC20

note: 
    ┌─ uniswap.fe:302:49
    │
302 │                      balance0: token0.balanceOf(ctx.self_address()),
    │                                                 ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:302:32
    │
302 │                      balance0: token0.balanceOf(ctx.self_address()),
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
303 │                      balance1: token1.balanceOf(ctx.self_address()),
    │                                ^^^^^^           ^^^ mut Context
    │                                │                 
    │                                ERC20

note: 
    ┌─ uniswap.fe:303:49
    │
303 │                      balance1: token1.balanceOf(ctx.self_address()),
    │                                                 ^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:303:32
    │
303 │                      balance1: token1.balanceOf(ctx.self_address()),
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
304 │                      reserve0: self.reserve0,
    │                                ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:304:32
    │
304 │                      reserve0: self.reserve0,
    │                                ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256
305 │                      reserve1: self.reserve1)
    │                                ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:305:32
    │
305 │                      reserve1: self.reserve1)
    │                                ^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:301:9
    │  
301 │ ╭         self._update(ctx,
302 │ │                      balance0: token0.balanceOf(ctx.self_address()),
303 │ │                      balance1: token1.balanceOf(ctx.self_address()),
304 │ │                      reserve0: self.reserve0,
305 │ │                      reserve1: self.reserve1)
    │ ╰─────────────────────────────────────────────^ ()

note: 
    ┌─ uniswap.fe:311:5
    │
311 │     pub token0: address
    │     ^^^^^^^^^^^^^^^^^^^ address
312 │     #indexed
313 │     pub token1: address
    │     ^^^^^^^^^^^^^^^^^^^ address
314 │     pub pair: address
    │     ^^^^^^^^^^^^^^^^^ address
315 │     pub index: u256
    │     ^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:319:5
    │
319 │     fee_to: address
    │     ^^^^^^^^^^^^^^^ address
320 │     fee_to_setter: address
    │     ^^^^^^^^^^^^^^^^^^^^^^ address
321 │ 
322 │     pairs: Map<address, Map<address, address>>
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, address>>
323 │ 
324 │     all_pairs: Array<address, 100>
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 100>
325 │     pair_counter: u256
    │     ^^^^^^^^^^^^^^^^^^ u256

note: 
    ┌─ uniswap.fe:331:5
    │  
331 │ ╭     pub fn fee_to(self) -> address {
332 │ │         return self.fee_to
333 │ │     }
    │ ╰─────^ params: [self] -> address

note: 
    ┌─ uniswap.fe:332:16
    │
332 │         return self.fee_to
    │                ^^^^ UniswapV2Factory

note: 
    ┌─ uniswap.fe:332:16
    │
332 │         return self.fee_to
    │                ^^^^^^^^^^^ SPtr<address> -Load-> address

note: 
    ┌─ uniswap.fe:335:5
    │  
335 │ ╭     pub fn fee_to_setter(self) -> address {
336 │ │         return self.fee_to_setter
337 │ │     }
    │ ╰─────^ params: [self] -> address

note: 
    ┌─ uniswap.fe:336:16
    │
336 │         return self.fee_to_setter
    │                ^^^^ UniswapV2Factory

note: 
    ┌─ uniswap.fe:336:16
    │
336 │         return self.fee_to_setter
    │                ^^^^^^^^^^^^^^^^^^ SPtr<address> -Load-> address

note: 
    ┌─ uniswap.fe:339:5
    │  
339 │ ╭     pub fn all_pairs_length(self) -> u256 {
340 │ │         return self.pair_counter
341 │ │     }
    │ ╰─────^ params: [self] -> u256

note: 
    ┌─ uniswap.fe:340:16
    │
340 │         return self.pair_counter
    │                ^^^^ UniswapV2Factory

note: 
    ┌─ uniswap.fe:340:16
    │
340 │         return self.pair_counter
    │                ^^^^^^^^^^^^^^^^^ SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:343:5
    │  
343 │ ╭     pub fn create_pair(mut self, mut ctx: Context, _ token_a: address, _ token_b: address) -> address {
344 │ │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
345 │ │ 
346 │ │         let token0: address = token_a if token_a < token_b else token_b
    · │
361 │ │         return address(pair)
362 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: mut Context }, { label: Some("_"), name: token_a, typ: address }, { label: Some("_"), name: token_b, typ: address }] -> address

note: 
    ┌─ uniswap.fe:346:13
    │
346 │         let token0: address = token_a if token_a < token_b else token_b
    │             ^^^^^^ address
347 │         let token1: address = token_a if token_a > token_b else token_b
    │             ^^^^^^ address
    ·
351 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │             ^^^^ u256
352 │         let mut pair: UniswapV2Pair = UniswapV2Pair.create2(ctx, 0, salt)
    │                 ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:344:16
    │
344 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                ^^^^^^^    ^^^^^^^ address
    │                │           
    │                address

note: 
    ┌─ uniswap.fe:344:16
    │
344 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<30>
    │                │                    
    │                bool
345 │ 
346 │         let token0: address = token_a if token_a < token_b else token_b
    │                                          ^^^^^^^   ^^^^^^^ address
    │                                          │          
    │                                          address

note: 
    ┌─ uniswap.fe:346:31
    │
346 │         let token0: address = token_a if token_a < token_b else token_b
    │                               ^^^^^^^    ^^^^^^^^^^^^^^^^^      ^^^^^^^ address
    │                               │          │                       
    │                               │          bool
    │                               address

note: 
    ┌─ uniswap.fe:346:31
    │
346 │         let token0: address = token_a if token_a < token_b else token_b
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address
347 │         let token1: address = token_a if token_a > token_b else token_b
    │                                          ^^^^^^^   ^^^^^^^ address
    │                                          │          
    │                                          address

note: 
    ┌─ uniswap.fe:347:31
    │
347 │         let token1: address = token_a if token_a > token_b else token_b
    │                               ^^^^^^^    ^^^^^^^^^^^^^^^^^      ^^^^^^^ address
    │                               │          │                       
    │                               │          bool
    │                               address

note: 
    ┌─ uniswap.fe:347:31
    │
347 │         let token1: address = token_a if token_a > token_b else token_b
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address
348 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                ^^^^^^            ^ u256
    │                │                  
    │                address

note: 
    ┌─ uniswap.fe:348:26
    │
348 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                          ^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:348:16
    │
348 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^ String<23>
    │                │                      
    │                bool
349 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:349:16
    │
349 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^ ^^^^^^ address
    │                │           
    │                mut SPtr<Map<address, Map<address, address>>>

note: 
    ┌─ uniswap.fe:349:16
    │
349 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^ ^^^^^^ address
    │                │                   
    │                mut SPtr<Map<address, address>>

note: 
    ┌─ uniswap.fe:349:16
    │
349 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^            ^ u256
    │                │                                      
    │                mut SPtr<address> -Load-> address

note: 
    ┌─ uniswap.fe:349:46
    │
349 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                              ^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:349:16
    │
349 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^ String<22>
    │                │                                          
    │                bool
350 │ 
351 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                     ^^^^^^  ^^^^^^ address
    │                                     │        
    │                                     address

note: 
    ┌─ uniswap.fe:351:36
    │
351 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^ (address, address)

note: 
    ┌─ uniswap.fe:351:36
    │
351 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 64>

note: 
    ┌─ uniswap.fe:351:26
    │
351 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256
352 │         let mut pair: UniswapV2Pair = UniswapV2Pair.create2(ctx, 0, salt)
    │                                                             ^^^  ^  ^^^^ u256
    │                                                             │    │   
    │                                                             │    u256
    │                                                             mut Context

note: 
    ┌─ uniswap.fe:352:39
    │
352 │         let mut pair: UniswapV2Pair = UniswapV2Pair.create2(ctx, 0, salt)
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UniswapV2Pair
353 │         pair.initialize(ctx, token0: ERC20(token0), token1: ERC20(token1))
    │         ^^^^            ^^^                ^^^^^^ address
    │         │               │                   
    │         │               mut Context
    │         mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:353:38
    │
353 │         pair.initialize(ctx, token0: ERC20(token0), token1: ERC20(token1))
    │                                      ^^^^^^^^^^^^^                ^^^^^^ address
    │                                      │                             
    │                                      ERC20

note: 
    ┌─ uniswap.fe:353:61
    │
353 │         pair.initialize(ctx, token0: ERC20(token0), token1: ERC20(token1))
    │                                                             ^^^^^^^^^^^^^ ERC20

note: 
    ┌─ uniswap.fe:353:9
    │
353 │         pair.initialize(ctx, token0: ERC20(token0), token1: ERC20(token1))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
354 │ 
355 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:355:9
    │
355 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^ ^^^^^^ address
    │         │           
    │         mut SPtr<Map<address, Map<address, address>>>

note: 
    ┌─ uniswap.fe:355:9
    │
355 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^ ^^^^^^ address
    │         │                   
    │         mut SPtr<Map<address, address>>

note: 
    ┌─ uniswap.fe:355:9
    │
355 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ mut UniswapV2Pair
    │         │                                     
    │         mut SPtr<address>

note: 
    ┌─ uniswap.fe:355:38
    │
355 │         self.pairs[token0][token1] = address(pair)
    │                                      ^^^^^^^^^^^^^ address
356 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:356:9
    │
356 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^ ^^^^^^ address
    │         │           
    │         mut SPtr<Map<address, Map<address, address>>>

note: 
    ┌─ uniswap.fe:356:9
    │
356 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^ ^^^^^^ address
    │         │                   
    │         mut SPtr<Map<address, address>>

note: 
    ┌─ uniswap.fe:356:9
    │
356 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ mut UniswapV2Pair
    │         │                                     
    │         mut SPtr<address>

note: 
    ┌─ uniswap.fe:356:38
    │
356 │         self.pairs[token1][token0] = address(pair)
    │                                      ^^^^^^^^^^^^^ address
357 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:357:9
    │
357 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^^^^^^^^^^^ ^^^^ mut UniswapV2Factory
    │         │               
    │         mut SPtr<Array<address, 100>>

note: 
    ┌─ uniswap.fe:357:24
    │
357 │         self.all_pairs[self.pair_counter] = address(pair)
    │                        ^^^^^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:357:9
    │
357 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^ mut UniswapV2Pair
    │         │                                            
    │         mut SPtr<address>

note: 
    ┌─ uniswap.fe:357:45
    │
357 │         self.all_pairs[self.pair_counter] = address(pair)
    │                                             ^^^^^^^^^^^^^ address
358 │         self.pair_counter = self.pair_counter + 1
    │         ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:358:9
    │
358 │         self.pair_counter = self.pair_counter + 1
    │         ^^^^^^^^^^^^^^^^^   ^^^^ mut UniswapV2Factory
    │         │                    
    │         mut SPtr<u256>

note: 
    ┌─ uniswap.fe:358:29
    │
358 │         self.pair_counter = self.pair_counter + 1
    │                             ^^^^^^^^^^^^^^^^^   ^ u256
    │                             │                    
    │                             mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:358:29
    │
358 │         self.pair_counter = self.pair_counter + 1
    │                             ^^^^^^^^^^^^^^^^^^^^^ u256
359 │ 
360 │         ctx.emit(PairCreated(token0, token1, pair: address(pair), index: self.pair_counter))
    │         ^^^                  ^^^^^^  ^^^^^^                ^^^^ mut UniswapV2Pair
    │         │                    │       │                      
    │         │                    │       address
    │         │                    address
    │         mut Context

note: 
    ┌─ uniswap.fe:360:52
    │
360 │         ctx.emit(PairCreated(token0, token1, pair: address(pair), index: self.pair_counter))
    │                                                    ^^^^^^^^^^^^^         ^^^^ mut UniswapV2Factory
    │                                                    │                      
    │                                                    address

note: 
    ┌─ uniswap.fe:360:74
    │
360 │         ctx.emit(PairCreated(token0, token1, pair: address(pair), index: self.pair_counter))
    │                                                                          ^^^^^^^^^^^^^^^^^ mut SPtr<u256> -Load-> u256

note: 
    ┌─ uniswap.fe:360:18
    │
360 │         ctx.emit(PairCreated(token0, token1, pair: address(pair), index: self.pair_counter))
    │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PairCreated

note: 
    ┌─ uniswap.fe:360:9
    │
360 │         ctx.emit(PairCreated(token0, token1, pair: address(pair), index: self.pair_counter))
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
361 │         return address(pair)
    │                        ^^^^ mut UniswapV2Pair

note: 
    ┌─ uniswap.fe:361:16
    │
361 │         return address(pair)
    │                ^^^^^^^^^^^^^ address

note: 
    ┌─ uniswap.fe:364:5
    │  
364 │ ╭     pub fn set_fee_to(mut self, ctx: Context, fee_to: address) {
365 │ │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
366 │ │         self.fee_to = fee_to
367 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: Context }, { label: None, name: fee_to, typ: address }] -> ()

note: 
    ┌─ uniswap.fe:365:16
    │
365 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^ Context

note: 
    ┌─ uniswap.fe:365:16
    │
365 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^    ^^^^ mut UniswapV2Factory
    │                │                    
    │                address

note: 
    ┌─ uniswap.fe:365:36
    │
365 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                                    ^^^^^^^^^^^^^^^^^^ mut SPtr<address> -Load-> address

note: 
    ┌─ uniswap.fe:365:16
    │
365 │         assert ctx.msg_sender() == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^ String<20>
    │                │                                        
    │                bool
366 │         self.fee_to = fee_to
    │         ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:366:9
    │
366 │         self.fee_to = fee_to
    │         ^^^^^^^^^^^   ^^^^^^ address
    │         │              
    │         mut SPtr<address>

note: 
    ┌─ uniswap.fe:369:5
    │  
369 │ ╭     pub fn set_fee_to_setter(mut self, ctx: Context, fee_to_setter: address) {
370 │ │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
371 │ │         self.fee_to_setter = fee_to_setter
372 │ │     }
    │ ╰─────^ params: [mut self, { label: None, name: ctx, typ: Context }, { label: None, name: fee_to_setter, typ: address }] -> ()

note: 
    ┌─ uniswap.fe:370:16
    │
370 │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^ Context

note: 
    ┌─ uniswap.fe:370:16
    │
370 │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^ address
    │                │                    
    │                address

note: 
    ┌─ uniswap.fe:370:16
    │
370 │         assert ctx.msg_sender() == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^ String<20>
    │                │                                   
    │                bool
371 │         self.fee_to_setter = fee_to_setter
    │         ^^^^ mut UniswapV2Factory

note: 
    ┌─ uniswap.fe:371:9
    │
371 │         self.fee_to_setter = fee_to_setter
    │         ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^ address
    │         │                     
    │         mut SPtr<address>

note: 
    ┌─ uniswap.fe:375:1
    │  
375 │ ╭ fn sqrt(_ val: u256) -> u256 {
376 │ │     let mut z: u256
377 │ │     if val > 3 {
378 │ │         z = val
    · │
387 │ │     return z
388 │ │ }
    │ ╰─^ params: [{ label: Some("_"), name: val, typ: u256 }] -> u256

note: 
    ┌─ uniswap.fe:376:13
    │
376 │     let mut z: u256
    │             ^ mut u256
    ·
379 │         let mut x: u256 = val / 2 + 1
    │                 ^ mut u256

note: 
    ┌─ uniswap.fe:377:8
    │
377 │     if val > 3 {
    │        ^^^   ^ u256
    │        │      
    │        u256

note: 
    ┌─ uniswap.fe:377:8
    │
377 │     if val > 3 {
    │        ^^^^^^^ bool
378 │         z = val
    │         ^   ^^^ u256
    │         │    
    │         mut u256
379 │         let mut x: u256 = val / 2 + 1
    │                           ^^^   ^ u256
    │                           │      
    │                           u256

note: 
    ┌─ uniswap.fe:379:27
    │
379 │         let mut x: u256 = val / 2 + 1
    │                           ^^^^^^^   ^ u256
    │                           │          
    │                           u256

note: 
    ┌─ uniswap.fe:379:27
    │
379 │         let mut x: u256 = val / 2 + 1
    │                           ^^^^^^^^^^^ u256
380 │         while x < z {
    │               ^   ^ mut u256
    │               │    
    │               mut u256

note: 
    ┌─ uniswap.fe:380:15
    │
380 │         while x < z {
    │               ^^^^^ bool
381 │             z = x
    │             ^   ^ mut u256
    │             │    
    │             mut u256
382 │             x = (val / x + x) / 2
    │             ^    ^^^   ^ mut u256
    │             │    │      
    │             │    u256
    │             mut u256

note: 
    ┌─ uniswap.fe:382:18
    │
382 │             x = (val / x + x) / 2
    │                  ^^^^^^^   ^ mut u256
    │                  │          
    │                  u256

note: 
    ┌─ uniswap.fe:382:17
    │
382 │             x = (val / x + x) / 2
    │                 ^^^^^^^^^^^^^   ^ u256
    │                 │                
    │                 u256

note: 
    ┌─ uniswap.fe:382:17
    │
382 │             x = (val / x + x) / 2
    │                 ^^^^^^^^^^^^^^^^^ u256
383 │         }
384 │     } else if val != 0 {
    │               ^^^    ^ u256
    │               │       
    │               u256

note: 
    ┌─ uniswap.fe:384:15
    │
384 │     } else if val != 0 {
    │               ^^^^^^^^ bool
385 │         z = 1
    │         ^   ^ u256
    │         │    
    │         mut u256
386 │     }
387 │     return z
    │            ^ mut u256

note: 
    ┌─ uniswap.fe:390:1
    │  
390 │ ╭ fn min(_ x: u256, _ y: u256) -> u256 {
391 │ │     return x if x < y else y
392 │ │ }
    │ ╰─^ params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
    ┌─ uniswap.fe:391:17
    │
391 │     return x if x < y else y
    │                 ^   ^ u256
    │                 │    
    │                 u256

note: 
    ┌─ uniswap.fe:391:12
    │
391 │     return x if x < y else y
    │            ^    ^^^^^      ^ u256
    │            │    │           
    │            │    bool
    │            u256

note: 
    ┌─ uniswap.fe:391:12
    │
391 │     return x if x < y else y
    │            ^^^^^^^^^^^^^^^^^ u256


