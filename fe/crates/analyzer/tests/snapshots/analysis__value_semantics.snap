---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"
---
note: 
  ┌─ value_semantics.fe:2:5
  │
2 │     my_array: Array<u8, 3>
  │     ^^^^^^^^^^^^^^^^^^^^^^ Array<u8, 3>

note: 
   ┌─ value_semantics.fe:4:5
   │  
 4 │ ╭     pub fn bar(mut self) -> bool {
 5 │ │         self.set_array()
 6 │ │         tuple_of_primitive()
 7 │ │         tuple_of_structs()
   · │
14 │ │         return true
15 │ │     }
   │ ╰─────^ params: [mut self] -> bool

note: 
  ┌─ value_semantics.fe:5:9
  │
5 │         self.set_array()
  │         ^^^^ mut Foo

note: 
   ┌─ value_semantics.fe:5:9
   │
 5 │         self.set_array()
   │         ^^^^^^^^^^^^^^^^ ()
 6 │         tuple_of_primitive()
   │         ^^^^^^^^^^^^^^^^^^^^ ()
 7 │         tuple_of_structs()
   │         ^^^^^^^^^^^^^^^^^^ ()
 8 │         struct_constructor()
   │         ^^^^^^^^^^^^^^^^^^^^ ()
 9 │         copies()
   │         ^^^^^^^^ ()
10 │         struct_field_copies()
   │         ^^^^^^^^^^^^^^^^^^^^^ ()
11 │         ternary(true)
   │                 ^^^^ bool

note: 
   ┌─ value_semantics.fe:11:9
   │
11 │         ternary(true)
   │         ^^^^^^^^^^^^^ ()
12 │         ternary(false)
   │                 ^^^^^ bool

note: 
   ┌─ value_semantics.fe:12:9
   │
12 │         ternary(false)
   │         ^^^^^^^^^^^^^^ ()
13 │ 
14 │         return true
   │                ^^^^ bool

note: 
   ┌─ value_semantics.fe:17:5
   │  
17 │ ╭     pub fn set_array(mut self) {
18 │ │         self.my_array = [42; 3]
19 │ │     }
   │ ╰─────^ params: [mut self] -> ()

note: 
   ┌─ value_semantics.fe:18:9
   │
18 │         self.my_array = [42; 3]
   │         ^^^^ mut Foo

note: 
   ┌─ value_semantics.fe:18:9
   │
18 │         self.my_array = [42; 3]
   │         ^^^^^^^^^^^^^    ^^  ^ u256
   │         │                │    
   │         │                u8
   │         mut SPtr<Array<u8, 3>>

note: 
   ┌─ value_semantics.fe:18:25
   │
18 │         self.my_array = [42; 3]
   │                         ^^^^^^^ Array<u8, 3>

note: 
   ┌─ value_semantics.fe:23:1
   │  
23 │ ╭ fn tuple_of_primitive() {
24 │ │     let mut tup_a: (u8, u8) = (1, 2);
25 │ │     let mut tup_b: (u8, u8) = tup_a
26 │ │     tup_a.item0 = 5
   · │
39 │ │     assert tup_imm.item0 == 1
40 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ value_semantics.fe:24:13
   │
24 │     let mut tup_a: (u8, u8) = (1, 2);
   │             ^^^^^ mut (u8, u8)
25 │     let mut tup_b: (u8, u8) = tup_a
   │             ^^^^^ mut (u8, u8)
   ·
29 │     let tup_imm: (u8, u8) = (1, 2)
   │         ^^^^^^^ (u8, u8)
30 │     let mut tup_c: (u8, u8) = tup_imm
   │             ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:24:32
   │
24 │     let mut tup_a: (u8, u8) = (1, 2);
   │                                ^  ^ u8
   │                                │   
   │                                u8

note: 
   ┌─ value_semantics.fe:24:31
   │
24 │     let mut tup_a: (u8, u8) = (1, 2);
   │                               ^^^^^^ (u8, u8)
25 │     let mut tup_b: (u8, u8) = tup_a
   │                               ^^^^^ mut (u8, u8) -Copy-> (u8, u8)
26 │     tup_a.item0 = 5
   │     ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:26:5
   │
26 │     tup_a.item0 = 5
   │     ^^^^^^^^^^^   ^ u8
   │     │              
   │     mut u8
27 │     assert tup_b.item0 == 1
   │            ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:27:12
   │
27 │     assert tup_b.item0 == 1
   │            ^^^^^^^^^^^    ^ u8
   │            │               
   │            mut u8

note: 
   ┌─ value_semantics.fe:27:12
   │
27 │     assert tup_b.item0 == 1
   │            ^^^^^^^^^^^^^^^^ bool
28 │ 
29 │     let tup_imm: (u8, u8) = (1, 2)
   │                              ^  ^ u8
   │                              │   
   │                              u8

note: 
   ┌─ value_semantics.fe:29:29
   │
29 │     let tup_imm: (u8, u8) = (1, 2)
   │                             ^^^^^^ (u8, u8)
30 │     let mut tup_c: (u8, u8) = tup_imm
   │                               ^^^^^^^ (u8, u8) -Copy-> (u8, u8)
31 │ 
32 │     tup_c.item0 = 10
   │     ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:32:5
   │
32 │     tup_c.item0 = 10
   │     ^^^^^^^^^^^   ^^ u8
   │     │              
   │     mut u8
33 │     assert tup_imm.item0 == 1
   │            ^^^^^^^ (u8, u8)

note: 
   ┌─ value_semantics.fe:33:12
   │
33 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^    ^ u8
   │            │                 
   │            u8

note: 
   ┌─ value_semantics.fe:33:12
   │
33 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^^^^^^ bool
34 │ 
35 │     tup_c = tup_imm
   │     ^^^^^   ^^^^^^^ (u8, u8) -Copy-> (u8, u8)
   │     │        
   │     mut (u8, u8)
36 │     assert tup_c.item0 == 1
   │            ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:36:12
   │
36 │     assert tup_c.item0 == 1
   │            ^^^^^^^^^^^    ^ u8
   │            │               
   │            mut u8

note: 
   ┌─ value_semantics.fe:36:12
   │
36 │     assert tup_c.item0 == 1
   │            ^^^^^^^^^^^^^^^^ bool
37 │     tup_c.item0 = 10
   │     ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:37:5
   │
37 │     tup_c.item0 = 10
   │     ^^^^^^^^^^^   ^^ u8
   │     │              
   │     mut u8
38 │     assert tup_c.item0 == 10
   │            ^^^^^ mut (u8, u8)

note: 
   ┌─ value_semantics.fe:38:12
   │
38 │     assert tup_c.item0 == 10
   │            ^^^^^^^^^^^    ^^ u8
   │            │               
   │            mut u8

note: 
   ┌─ value_semantics.fe:38:12
   │
38 │     assert tup_c.item0 == 10
   │            ^^^^^^^^^^^^^^^^^ bool
39 │     assert tup_imm.item0 == 1
   │            ^^^^^^^ (u8, u8)

note: 
   ┌─ value_semantics.fe:39:12
   │
39 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^    ^ u8
   │            │                 
   │            u8

note: 
   ┌─ value_semantics.fe:39:12
   │
39 │     assert tup_imm.item0 == 1
   │            ^^^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ value_semantics.fe:42:1
   │  
42 │ ╭ fn tuple_of_structs() {
43 │ │     let mut p: Point = Point(x: 0, y: 0)
44 │ │     let q: Point = Point(x: 0, y: 0)
45 │ │     let mut pair: (Point, Point) = (p, q)
   · │
49 │ │     assert q.x == 0
50 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ value_semantics.fe:43:13
   │
43 │     let mut p: Point = Point(x: 0, y: 0)
   │             ^ mut Point
44 │     let q: Point = Point(x: 0, y: 0)
   │         ^ Point
45 │     let mut pair: (Point, Point) = (p, q)
   │             ^^^^ mut (Point, Point)

note: 
   ┌─ value_semantics.fe:43:33
   │
43 │     let mut p: Point = Point(x: 0, y: 0)
   │                                 ^     ^ u64
   │                                 │      
   │                                 u64

note: 
   ┌─ value_semantics.fe:43:24
   │
43 │     let mut p: Point = Point(x: 0, y: 0)
   │                        ^^^^^^^^^^^^^^^^^ Point
44 │     let q: Point = Point(x: 0, y: 0)
   │                             ^     ^ u64
   │                             │      
   │                             u64

note: 
   ┌─ value_semantics.fe:44:20
   │
44 │     let q: Point = Point(x: 0, y: 0)
   │                    ^^^^^^^^^^^^^^^^^ Point
45 │     let mut pair: (Point, Point) = (p, q)
   │                                     ^  ^ Point
   │                                     │   
   │                                     mut Point

note: 
   ┌─ value_semantics.fe:45:36
   │
45 │     let mut pair: (Point, Point) = (p, q)
   │                                    ^^^^^^ (Point, Point)
46 │     pair.item0.x = 100
   │     ^^^^ mut (Point, Point)

note: 
   ┌─ value_semantics.fe:46:5
   │
46 │     pair.item0.x = 100
   │     ^^^^^^^^^^ mut Point

note: 
   ┌─ value_semantics.fe:46:5
   │
46 │     pair.item0.x = 100
   │     ^^^^^^^^^^^^   ^^^ u64
   │     │               
   │     mut u64
47 │     pair.item1.x = 200
   │     ^^^^ mut (Point, Point)

note: 
   ┌─ value_semantics.fe:47:5
   │
47 │     pair.item1.x = 200
   │     ^^^^^^^^^^ mut Point

note: 
   ┌─ value_semantics.fe:47:5
   │
47 │     pair.item1.x = 200
   │     ^^^^^^^^^^^^   ^^^ u64
   │     │               
   │     mut u64
48 │     assert p.x == 0
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:48:12
   │
48 │     assert p.x == 0
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:48:12
   │
48 │     assert p.x == 0
   │            ^^^^^^^^ bool
49 │     assert q.x == 0
   │            ^ Point

note: 
   ┌─ value_semantics.fe:49:12
   │
49 │     assert q.x == 0
   │            ^^^    ^ u64
   │            │       
   │            u64

note: 
   ┌─ value_semantics.fe:49:12
   │
49 │     assert q.x == 0
   │            ^^^^^^^^ bool

note: 
   ┌─ value_semantics.fe:53:5
   │
53 │     pub x: u64
   │     ^^^^^^^^^^ u64
54 │     pub y: u64
   │     ^^^^^^^^^^ u64

note: 
   ┌─ value_semantics.fe:57:5
   │
57 │     pub a: Point
   │     ^^^^^^^^^^^^ Point
58 │     pub b: Point
   │     ^^^^^^^^^^^^ Point

note: 
   ┌─ value_semantics.fe:60:5
   │  
60 │ ╭     pub fn from_origin_to(_ b: Point) -> Line {
61 │ │         return Line(a: Point(x: 0, y: 0), b)
62 │ │     }
   │ ╰─────^ params: [{ label: Some("_"), name: b, typ: Point }] -> Line

note: 
   ┌─ value_semantics.fe:61:33
   │
61 │         return Line(a: Point(x: 0, y: 0), b)
   │                                 ^     ^ u64
   │                                 │      
   │                                 u64

note: 
   ┌─ value_semantics.fe:61:24
   │
61 │         return Line(a: Point(x: 0, y: 0), b)
   │                        ^^^^^^^^^^^^^^^^^  ^ Point -Copy-> Point
   │                        │                   
   │                        Point

note: 
   ┌─ value_semantics.fe:61:16
   │
61 │         return Line(a: Point(x: 0, y: 0), b)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Line

note: 
   ┌─ value_semantics.fe:64:5
   │  
64 │ ╭     pub fn get_a(self) -> Point {
65 │ │         return self.a
66 │ │     }
   │ ╰─────^ params: [self] -> Point

note: 
   ┌─ value_semantics.fe:65:16
   │
65 │         return self.a
   │                ^^^^ Line

note: 
   ┌─ value_semantics.fe:65:16
   │
65 │         return self.a
   │                ^^^^^^ Point -Copy-> Point

note: 
   ┌─ value_semantics.fe:69:1
   │  
69 │ ╭ fn struct_constructor() {
70 │ │     let mut a: Point = Point(x: 0, y: 0)
71 │ │     let mut b: Point = Point(x: 10, y: 10)
72 │ │ 
   · │
78 │ │     assert b.x == 10
79 │ │ }
   │ ╰─^ params: [] -> ()

note: 
   ┌─ value_semantics.fe:70:13
   │
70 │     let mut a: Point = Point(x: 0, y: 0)
   │             ^ mut Point
71 │     let mut b: Point = Point(x: 10, y: 10)
   │             ^ mut Point
72 │ 
73 │     let mut line: Line = Line(a, b)
   │             ^^^^ mut Line

note: 
   ┌─ value_semantics.fe:70:33
   │
70 │     let mut a: Point = Point(x: 0, y: 0)
   │                                 ^     ^ u64
   │                                 │      
   │                                 u64

note: 
   ┌─ value_semantics.fe:70:24
   │
70 │     let mut a: Point = Point(x: 0, y: 0)
   │                        ^^^^^^^^^^^^^^^^^ Point
71 │     let mut b: Point = Point(x: 10, y: 10)
   │                                 ^^     ^^ u64
   │                                 │       
   │                                 u64

note: 
   ┌─ value_semantics.fe:71:24
   │
71 │     let mut b: Point = Point(x: 10, y: 10)
   │                        ^^^^^^^^^^^^^^^^^^^ Point
72 │ 
73 │     let mut line: Line = Line(a, b)
   │                               ^  ^ mut Point -Copy-> Point
   │                               │   
   │                               mut Point -Copy-> Point

note: 
   ┌─ value_semantics.fe:73:26
   │
73 │     let mut line: Line = Line(a, b)
   │                          ^^^^^^^^^^ Line
74 │     a.x = 1
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:74:5
   │
74 │     a.x = 1
   │     ^^^   ^ u64
   │     │      
   │     mut u64
75 │     assert line.a.x == 0
   │            ^^^^ mut Line

note: 
   ┌─ value_semantics.fe:75:12
   │
75 │     assert line.a.x == 0
   │            ^^^^^^ mut Point

note: 
   ┌─ value_semantics.fe:75:12
   │
75 │     assert line.a.x == 0
   │            ^^^^^^^^    ^ u64
   │            │            
   │            mut u64

note: 
   ┌─ value_semantics.fe:75:12
   │
75 │     assert line.a.x == 0
   │            ^^^^^^^^^^^^^ bool
76 │ 
77 │     line.b.x = 100
   │     ^^^^ mut Line

note: 
   ┌─ value_semantics.fe:77:5
   │
77 │     line.b.x = 100
   │     ^^^^^^ mut Point

note: 
   ┌─ value_semantics.fe:77:5
   │
77 │     line.b.x = 100
   │     ^^^^^^^^   ^^^ u64
   │     │           
   │     mut u64
78 │     assert b.x == 10
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:78:12
   │
78 │     assert b.x == 10
   │            ^^^    ^^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:78:12
   │
78 │     assert b.x == 10
   │            ^^^^^^^^^ bool

note: 
    ┌─ value_semantics.fe:81:1
    │  
 81 │ ╭ fn copies() {
 82 │ │     let p: Point = Point(x: 0, y: 0)
 83 │ │     let mut a: Point = p // copy
 84 │ │     a.x = 1
    · │
101 │ │     let mut n: Line = Line::from_origin_to(b) // copy
102 │ │ }
    │ ╰─^ params: [] -> ()

note: 
    ┌─ value_semantics.fe:82:9
    │
 82 │     let p: Point = Point(x: 0, y: 0)
    │         ^ Point
 83 │     let mut a: Point = p // copy
    │             ^ mut Point
    ·
 88 │     let b: Point = p     // no copy
    │         ^ Point
    ·
 95 │     let mut c: Point = a // copy
    │             ^ mut Point
    ·
100 │     let m: Line = Line::from_origin_to(b)     // no copy
    │         ^ Line
101 │     let mut n: Line = Line::from_origin_to(b) // copy
    │             ^ mut Line

note: 
   ┌─ value_semantics.fe:82:29
   │
82 │     let p: Point = Point(x: 0, y: 0)
   │                             ^     ^ u64
   │                             │      
   │                             u64

note: 
   ┌─ value_semantics.fe:82:20
   │
82 │     let p: Point = Point(x: 0, y: 0)
   │                    ^^^^^^^^^^^^^^^^^ Point
83 │     let mut a: Point = p // copy
   │                        ^ Point -Copy-> Point
84 │     a.x = 1
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:84:5
   │
84 │     a.x = 1
   │     ^^^   ^ u64
   │     │      
   │     mut u64
85 │     assert p.x == 0
   │            ^ Point

note: 
   ┌─ value_semantics.fe:85:12
   │
85 │     assert p.x == 0
   │            ^^^    ^ u64
   │            │       
   │            u64

note: 
   ┌─ value_semantics.fe:85:12
   │
85 │     assert p.x == 0
   │            ^^^^^^^^ bool
86 │     assert a.x == 1
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:86:12
   │
86 │     assert a.x == 1
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:86:12
   │
86 │     assert a.x == 1
   │            ^^^^^^^^ bool
87 │ 
88 │     let b: Point = p     // no copy
   │                    ^ Point
89 │     a = b                // copy
   │     ^   ^ Point -Copy-> Point
   │     │    
   │     mut Point
90 │     assert a.x == 0
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:90:12
   │
90 │     assert a.x == 0
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:90:12
   │
90 │     assert a.x == 0
   │            ^^^^^^^^ bool
91 │     a.x = 2
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:91:5
   │
91 │     a.x = 2
   │     ^^^   ^ u64
   │     │      
   │     mut u64
92 │     assert b.x == 0
   │            ^ Point

note: 
   ┌─ value_semantics.fe:92:12
   │
92 │     assert b.x == 0
   │            ^^^    ^ u64
   │            │       
   │            u64

note: 
   ┌─ value_semantics.fe:92:12
   │
92 │     assert b.x == 0
   │            ^^^^^^^^ bool
93 │     assert a.x == 2
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:93:12
   │
93 │     assert a.x == 2
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:93:12
   │
93 │     assert a.x == 2
   │            ^^^^^^^^ bool
94 │ 
95 │     let mut c: Point = a // copy
   │                        ^ mut Point -Copy-> Point
96 │     a.x = 3
   │     ^ mut Point

note: 
   ┌─ value_semantics.fe:96:5
   │
96 │     a.x = 3
   │     ^^^   ^ u64
   │     │      
   │     mut u64
97 │     assert c.x == 2
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:97:12
   │
97 │     assert c.x == 2
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
   ┌─ value_semantics.fe:97:12
   │
97 │     assert c.x == 2
   │            ^^^^^^^^ bool
98 │     assert a.x == 3
   │            ^ mut Point

note: 
   ┌─ value_semantics.fe:98:12
   │
98 │     assert a.x == 3
   │            ^^^    ^ u64
   │            │       
   │            mut u64

note: 
    ┌─ value_semantics.fe:98:12
    │
 98 │     assert a.x == 3
    │            ^^^^^^^^ bool
 99 │ 
100 │     let m: Line = Line::from_origin_to(b)     // no copy
    │                                        ^ Point

note: 
    ┌─ value_semantics.fe:100:19
    │
100 │     let m: Line = Line::from_origin_to(b)     // no copy
    │                   ^^^^^^^^^^^^^^^^^^^^^^^ Line
101 │     let mut n: Line = Line::from_origin_to(b) // copy
    │                                            ^ Point

note: 
    ┌─ value_semantics.fe:101:23
    │
101 │     let mut n: Line = Line::from_origin_to(b) // copy
    │                       ^^^^^^^^^^^^^^^^^^^^^^^ Line -Copy-> Line

note: 
    ┌─ value_semantics.fe:104:1
    │  
104 │ ╭ fn struct_field_copies() {
105 │ │     let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
106 │ │     let a1: Point = line.a       // copy
107 │ │     let a2: Point = line.get_a() // copy
    · │
112 │ │     assert a2.x == 1
113 │ │ }
    │ ╰─^ params: [] -> ()

note: 
    ┌─ value_semantics.fe:105:13
    │
105 │     let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
    │             ^^^^ mut Line
106 │     let a1: Point = line.a       // copy
    │         ^^ Point
107 │     let a2: Point = line.get_a() // copy
    │         ^^ Point

note: 
    ┌─ value_semantics.fe:105:43
    │
105 │     let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
    │                                           ^     ^ u64
    │                                           │      
    │                                           u64

note: 
    ┌─ value_semantics.fe:105:34
    │
105 │     let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
    │                                  ^^^^^^^^^^^^^^^^^              ^     ^ u64
    │                                  │                              │      
    │                                  │                              u64
    │                                  Point

note: 
    ┌─ value_semantics.fe:105:56
    │
105 │     let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
    │                                                        ^^^^^^^^^^^^^^^^^ Point

note: 
    ┌─ value_semantics.fe:105:26
    │
105 │     let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
    │                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Line
106 │     let a1: Point = line.a       // copy
    │                     ^^^^ mut Line

note: 
    ┌─ value_semantics.fe:106:21
    │
106 │     let a1: Point = line.a       // copy
    │                     ^^^^^^ mut Point -Copy-> Point
107 │     let a2: Point = line.get_a() // copy
    │                     ^^^^ mut Line

note: 
    ┌─ value_semantics.fe:107:21
    │
107 │     let a2: Point = line.get_a() // copy
    │                     ^^^^^^^^^^^^ Point
108 │ 
109 │     line.a.x = 100
    │     ^^^^ mut Line

note: 
    ┌─ value_semantics.fe:109:5
    │
109 │     line.a.x = 100
    │     ^^^^^^ mut Point

note: 
    ┌─ value_semantics.fe:109:5
    │
109 │     line.a.x = 100
    │     ^^^^^^^^   ^^^ u64
    │     │           
    │     mut u64
110 │     assert line.a.x == 100
    │            ^^^^ mut Line

note: 
    ┌─ value_semantics.fe:110:12
    │
110 │     assert line.a.x == 100
    │            ^^^^^^ mut Point

note: 
    ┌─ value_semantics.fe:110:12
    │
110 │     assert line.a.x == 100
    │            ^^^^^^^^    ^^^ u64
    │            │            
    │            mut u64

note: 
    ┌─ value_semantics.fe:110:12
    │
110 │     assert line.a.x == 100
    │            ^^^^^^^^^^^^^^^ bool
111 │     assert a1.x == 1
    │            ^^ Point

note: 
    ┌─ value_semantics.fe:111:12
    │
111 │     assert a1.x == 1
    │            ^^^^    ^ u64
    │            │        
    │            u64

note: 
    ┌─ value_semantics.fe:111:12
    │
111 │     assert a1.x == 1
    │            ^^^^^^^^^ bool
112 │     assert a2.x == 1
    │            ^^ Point

note: 
    ┌─ value_semantics.fe:112:12
    │
112 │     assert a2.x == 1
    │            ^^^^    ^ u64
    │            │        
    │            u64

note: 
    ┌─ value_semantics.fe:112:12
    │
112 │     assert a2.x == 1
    │            ^^^^^^^^^ bool

note: 
    ┌─ value_semantics.fe:115:1
    │  
115 │ ╭ fn ternary(_ b: bool) {
116 │ │     let mut p: Point = Point(x: 10, y: 20)
117 │ │     let mut q: Point = Point(x: 10, y: 20)
118 │ │     move_rightward(p if b else q)
    · │
125 │ │     }
126 │ │ }
    │ ╰─^ params: [{ label: Some("_"), name: b, typ: bool }] -> ()

note: 
    ┌─ value_semantics.fe:116:13
    │
116 │     let mut p: Point = Point(x: 10, y: 20)
    │             ^ mut Point
117 │     let mut q: Point = Point(x: 10, y: 20)
    │             ^ mut Point

note: 
    ┌─ value_semantics.fe:116:33
    │
116 │     let mut p: Point = Point(x: 10, y: 20)
    │                                 ^^     ^^ u64
    │                                 │       
    │                                 u64

note: 
    ┌─ value_semantics.fe:116:24
    │
116 │     let mut p: Point = Point(x: 10, y: 20)
    │                        ^^^^^^^^^^^^^^^^^^^ Point
117 │     let mut q: Point = Point(x: 10, y: 20)
    │                                 ^^     ^^ u64
    │                                 │       
    │                                 u64

note: 
    ┌─ value_semantics.fe:117:24
    │
117 │     let mut q: Point = Point(x: 10, y: 20)
    │                        ^^^^^^^^^^^^^^^^^^^ Point
118 │     move_rightward(p if b else q)
    │                         ^ bool

note: 
    ┌─ value_semantics.fe:118:20
    │
118 │     move_rightward(p if b else q)
    │                    ^           ^ mut Point
    │                    │            
    │                    mut Point

note: 
    ┌─ value_semantics.fe:118:20
    │
118 │     move_rightward(p if b else q)
    │                    ^^^^^^^^^^^^^ mut Point

note: 
    ┌─ value_semantics.fe:118:5
    │
118 │     move_rightward(p if b else q)
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ()
119 │     if b {
    │        ^ bool
120 │         assert p.x == 11
    │                ^ mut Point

note: 
    ┌─ value_semantics.fe:120:16
    │
120 │         assert p.x == 11
    │                ^^^    ^^ u64
    │                │       
    │                mut u64

note: 
    ┌─ value_semantics.fe:120:16
    │
120 │         assert p.x == 11
    │                ^^^^^^^^^ bool
121 │         assert q.x == 10
    │                ^ mut Point

note: 
    ┌─ value_semantics.fe:121:16
    │
121 │         assert q.x == 10
    │                ^^^    ^^ u64
    │                │       
    │                mut u64

note: 
    ┌─ value_semantics.fe:121:16
    │
121 │         assert q.x == 10
    │                ^^^^^^^^^ bool
122 │     } else {
123 │         assert p.x == 10
    │                ^ mut Point

note: 
    ┌─ value_semantics.fe:123:16
    │
123 │         assert p.x == 10
    │                ^^^    ^^ u64
    │                │       
    │                mut u64

note: 
    ┌─ value_semantics.fe:123:16
    │
123 │         assert p.x == 10
    │                ^^^^^^^^^ bool
124 │         assert q.x == 11
    │                ^ mut Point

note: 
    ┌─ value_semantics.fe:124:16
    │
124 │         assert q.x == 11
    │                ^^^    ^^ u64
    │                │       
    │                mut u64

note: 
    ┌─ value_semantics.fe:124:16
    │
124 │         assert q.x == 11
    │                ^^^^^^^^^ bool

note: 
    ┌─ value_semantics.fe:128:1
    │  
128 │ ╭ fn move_rightward(mut _ p: Point) {
129 │ │     p.x += 1
130 │ │ }
    │ ╰─^ params: [{ label: Some("_"), name: p, typ: mut Point }] -> ()

note: 
    ┌─ value_semantics.fe:129:5
    │
129 │     p.x += 1
    │     ^ mut Point

note: 
    ┌─ value_semantics.fe:129:5
    │
129 │     p.x += 1
    │     ^^^    ^ u64
    │     │       
    │     mut u64


