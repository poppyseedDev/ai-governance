---
source: crates/analyzer/tests/errors.rs
expression: "error_string(&path, test_files::fixture(path))"
---
error: function body is missing a return or revert statement
   ┌─ compile_errors/enum_match.fe:16:12
   │
16 │     pub fn new() -> MyS {
   │            ^^^      --- expected function to return `MyS`
   │            │         
   │            all paths of this function must `return` or `revert`

error: 
   ┌─ compile_errors/enum_match.fe:32:13
   │
32 │             MyEnumNested::Tuple(x1, y1) => {
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ this has type `MyEnumNested`; expected type `MyEnum`

error: 
   ┌─ compile_errors/enum_match.fe:41:33
   │
41 │             MyEnumNested::Tuple(MyEnum::Unit, _) => {
   │                                 ^^^^^^^^^^^^ this has type `MyEnum`; expected type `u32`

error: expected a tuple variant
   ┌─ compile_errors/enum_match.fe:53:13
   │
 2 │     Unit
   │     ---- Unit is defined here
   ·
53 │             MyEnum::Unit() => {
   │             ^^^^^^^^^^^^ the variant is defined as unit variant

error: expected an unit variant
   ┌─ compile_errors/enum_match.fe:56:13
   │
 3 │     UnitTuple()
   │     ----------- UnitTuple is defined here
   ·
56 │             MyEnum::UnitTuple => {
   │             ^^^^^^^^^^^^^^^^^ the variant is defined as tuple variant

error: the number of tuple variant mismatch
   ┌─ compile_errors/enum_match.fe:59:13
   │
 4 │     Tuple(u32, u256)
   │     ---------------- Tuple is defined here
   ·
59 │             MyEnum::Tuple(y1) => {
   │             ^^^^^^^^^^^^^^^^^ expected 2 elements, but 1

error: variable `x1` is not bound in all sub patterns
   ┌─ compile_errors/enum_match.fe:71:37
   │
71 │             MyEnum::Tuple(x1, y1) | MyEnum::UnitTuple() => {
   │                                     ^^^^^^^^^^^^^^^^^^^ variable `x1` is not bound here

error: variable `y1` is not bound in all sub patterns
   ┌─ compile_errors/enum_match.fe:71:37
   │
71 │             MyEnum::Tuple(x1, y1) | MyEnum::UnitTuple() => {
   │                                     ^^^^^^^^^^^^^^^^^^^ variable `y1` is not bound here

error: mismatched type for `x1` between sub patterns
   ┌─ compile_errors/enum_match.fe:80:83
   │
80 │             MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) | MyEnumNested::Tuple(y1, x1) => {
   │                                                                                   ^^ this has type `u256`; expected type `u32`

error: mismatched type for `y1` between sub patterns
   ┌─ compile_errors/enum_match.fe:80:79
   │
80 │             MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) | MyEnumNested::Tuple(y1, x1) => {
   │                                                                               ^^ this has type `u32`; expected type `u256`

error: multiple rest patterns are not allowed
   ┌─ compile_errors/enum_match.fe:89:18
   │
89 │             (.., ..) => {}
   │              --  ^^ multiple rest patterns are not allowed
   │              │    
   │              first rest pattern is here

error: field `x` is not public field
   ┌─ compile_errors/enum_match.fe:96:17
   │
13 │     x: i32
   │     ------ field is defined here
   ·
96 │             MyS{x: x1, y: y1} => {
   │                 ^ `x` is not public


