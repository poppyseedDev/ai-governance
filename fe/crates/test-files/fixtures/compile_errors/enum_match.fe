pub enum MyEnum {
    Unit
    UnitTuple()
    Tuple(u32, u256)
}

pub enum MyEnumNested  {
    Tuple(u32, u256)
    Nested(MyEnum)
}

struct MyS {
    x: i32
    pub y: i32
    
    pub fn new() -> MyS {
        MyS(x: 0, y: 0)
    }
}


contract Foo {
    pub fn variant_type_mismatch(x: u32, y: u256) -> u256 {
        let my_enum: MyEnum = MyEnum::Tuple(x, y);
        match my_enum {
            MyEnum::Unit => {
                return 0
            }
            MyEnum::UnitTuple() => {
                return 0
            }
            MyEnumNested::Tuple(x1, y1) => {
                return y1
            }
        }
    }

    pub fn variant_type_mismatch2(x: u32, y: u256) -> u256 {
        let my_enum: MyEnumNested = MyEnumNested::Tuple(x, y);
        match my_enum {
            MyEnumNested::Tuple(MyEnum::Unit, _) => {
                return 0
            }
            MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) => {
                return u256(x1) + y1
            }
        }
    }
        
    pub fn invalid_bind(x: u32, y: u256) -> u256 {
        let my_enum: MyEnum = MyEnum::Tuple(x, y);
        match my_enum {
            MyEnum::Unit() => {
                return 0
            }
            MyEnum::UnitTuple => {
                return 0
            }
            MyEnum::Tuple(y1) => {
                return y1
            }
        }
    }

    pub fn invalid_bind2(x: u32, y: u256) -> u256 {
        let my_enum: MyEnum = MyEnum::Tuple(x, y);
        match my_enum {
            MyEnum::Unit => {
                return 0
            }
            MyEnum::Tuple(x1, y1) | MyEnum::UnitTuple() => {
                return u256(x1) + y1
            }
        }
    }

    pub fn invalid_bind3(x: u32, y: u256) -> u256 {
        let my_enum: MyEnumNested = MyEnumNested::Tuple(x, y);
        match my_enum {
            MyEnumNested::Nested(MyEnum::Tuple(x1, y1)) | MyEnumNested::Tuple(y1, x1) => {
                return u256(x1) + y1
            }
        }
    }
    
    pub fn multiple_rest() {
        let my_enum: (MyEnum, MyEnum) = (MyEnum::Unit, MyEnum::Unit)
        match my_enum {
            (.., ..) => {}
        }
    }
    
    pub fn private_field() {
        let s: MyS = MyS::new()
        match s {
            MyS{x: x1, y: y1} => {
                return x1 + y1
            }
        }
    }
}