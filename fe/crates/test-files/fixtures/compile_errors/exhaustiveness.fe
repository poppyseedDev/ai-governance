pub enum MyEnum {
    Unit
    UnitTuple()
    Tuple(u32, u256)
}

pub enum MyEnumNested  {
    Tuple(u32, u256)
    Nested(MyEnum)
}

contract Foo {
    pub fn exhaustiveness_simple1(x: u32, y: u256) {
        let my_enum: MyEnum = MyEnum::Tuple(x, y);
        match my_enum {
            MyEnum::Unit => {}
            MyEnum::UnitTuple() => {}
        }
    }

    pub fn exhaustiveness_nested1(x: u32, y: u256) {
        let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)

        match nested {
            MyEnumNested::Tuple(_, _) => {}
            MyEnumNested::Nested(MyEnum::Unit) => {}
        }
    }

    pub fn exhaustiveness_nested2(x: u32, y: u256) {
        let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)

        match nested {
            MyEnumNested::Tuple(_, _) => {}
            MyEnumNested::Nested(MyEnum::UnitTuple() | MyEnum::Tuple(_, _)) => {}
        }
    }

    pub fn exhaustiveness_nested3(x: u32, y: u256) {
        let nested: MyEnumNested = MyEnumNested::Nested(MyEnum::Unit)

        match nested {
            MyEnumNested::Nested(_) => {}
        }
    }
}