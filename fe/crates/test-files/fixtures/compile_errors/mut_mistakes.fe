contract Foo {
    x: u8
    m: Map<u8, u8>

    pub fn non_mut_self(self) {
        self.x = 10 // self not mut
        self.m[1] = 1
    }
}

fn non_mut_primitive() {
   let x: u8 // TODO: suggest mut or init value
   x = 10
}

fn non_mut_struct() {
   let p: Point = Point(x: 1, y: 2)
   p.set_x(10) // ERROR
   p.x = 10
   p.y = 20
}

fn non_mut_tuple() {
   let t: (u8, u8, u8) = (1, 2, 3)
   t.item0 = 10
}

fn non_mut_array() {
   let a: Array<u8, 3> = [1, 2, 3]
   a[0] = 10
}

fn mut_primitive_arg() {
   let mut x: u256 = 0
   add_one(x)
}

fn add_one(mut _ x: u256) {
   x += 1
}

struct Point {
    pub x: u64
    pub y: u64

    pub fn non_mut_self(self) {
        self.x *= 2
    }

    pub fn set_x(mut self, _ x: u64) {
        self.x = x
    }

    pub fn mutate_self_and(mut self, mut _ other: Point) {
        self.x += 1
        other.x += 1
    }
}

struct Line {
    pub a: Point
    pub b: Point

    pub fn set_ys(mut self, a: Point, b: Point) {
        self.a.y = a.y
        self.b.y = b.y
    }
}

fn borrow_checker() {
    let mut p: Point = Point(x: 1, y: 2)
    let mut q: Point = Point(x: 1, y: 2)

    p.set_x(10)

    let r: Point = Point(x: 10, y: 20)

    move_stuff(p, q) // OK
    move_stuff(p, p) // ERROR
    move_stuff(q if true else p, p) // ERROR

    p.mutate_self_and(q) // OK
    p.mutate_self_and(p) // ERROR

    p.set_x(p.x)     // OK, p.x is primitive
    set_x_to(p, p.x) // OK, p.x is primitive

    let mut line: Line = Line(a: Point(x: 0, y: 0),
                              b: Point(x: 1, y: 1))
    line.set_ys(a: line.b, b: line.a)           // ERROR
    line.set_ys(a: p if true else line.b, b: q) // ERROR
}

fn non_mut_arg() {
    let mut a: Point = Point(x: 1, y: 2)
    let b: Point = Point(x: 2, y: 3)
    move_stuff(a, b) // ERROR
}

fn move_stuff(mut _ a: Point, mut _ b: Point) {
    a.x *= 10
    b.x *= 10
}

fn move_rightward(mut _ p: Point) {
    p.x += 1
}

fn set_x_to(mut _ p: Point, _ x: u64) {
   p.x = x
}

fn ternary() {
    let mut p: Point = Point(x: 1, y: 2)
    let q: Point = Point(x: 1, y: 2)
    move_rightward(p if false else q)
}