// Structs can be emitted as events
struct Signed {
    pub book_msg: String<100>
}

// The `contract` keyword defines a new contract type
contract GuestBook {
    // Strings are generic over a constant number
    // that restricts its maximum size
    messages: Map<address, String<100>>

    // Context is a struct provided by the standard library
    // that gives access to various features of the EVM
    pub fn sign(mut self, mut ctx: Context, book_msg: String<100>) {
        // All storage access is explicit using `self.<some-key>`
        self.messages[ctx.msg_sender()] = book_msg

        // Emit the `Signed` event.
        ctx.emit(Signed(book_msg))
    }

    pub fn get_msg(self, addr: address) -> String<100> {
        // Copying data from storage to memory
        // has to be done explicitly via `to_mem()`
        return self.messages[addr].to_mem()
    }
}
