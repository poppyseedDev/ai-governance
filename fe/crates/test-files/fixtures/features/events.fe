pub struct Nums {
    #indexed
    pub num1: u256
    pub num2: u256
}

pub struct Bases {
    pub num: u256
    pub addr: address
}

pub struct Mix {
    pub num1: u256
    #indexed
    pub addr: address
    pub num2: u256
    pub my_bytes: Array<u8, 100>
}

pub struct Addresses {
    pub addrs: Array<address, 2>
}

pub struct NestedArray {
    pub inner: Array<Array<Nums, 2>, 2>
}

contract Foo {

    pub fn emit_nums(mut ctx: Context) {
        ctx.emit(Nums(num1: 26, num2: 42))
    }

    pub fn emit_bases(mut ctx: Context, addr: address) {
        ctx.emit(Bases(num: 26, addr))
    }

    pub fn emit_mix(mut ctx: Context, addr: address, my_bytes: Array<u8, 100>) {
        ctx.emit(Mix(num1: 26, addr, num2: 42, my_bytes))
    }

    pub fn emit_addresses(mut ctx: Context, addr1: address, addr2: address) {
        let mut addrs: Array<address, 2> = [address(0); 2]
        addrs[0] = addr1
        addrs[1] = addr2
        ctx.emit(Addresses(addrs))
    }
    
    pub fn emit_nested_array(mut ctx: Context) {
        let inner: Array<Array<Nums, 2>, 2> = [[Nums(num1: 0, num2: 1), Nums(num1: 2, num2: 3)], [Nums(num1: 4, num2: 5), Nums(num1: 6, num2: 7)]]
        let nested_array: NestedArray = NestedArray(inner)
        ctx.emit(nested_array)
    }
}
