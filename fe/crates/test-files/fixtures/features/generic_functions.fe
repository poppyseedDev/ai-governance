use std::traits::Dummy

trait Computable {
  fn compute(self, val: u256) -> u256;
}

struct Mac {}

impl Dummy for Mac {}

impl Computable for Mac {
  fn compute(self, val: u256) -> u256 {
    return 1 + val
  }
}

struct Linux {
  pub counter: u256
  pub fn get_counter(self) -> u256 {
    return self.counter
  }
  pub fn something_static() -> u256 {
    return 5
  }
}

impl Computable for Linux {
  fn compute(self, val: u256) -> u256 {
    return val + Linux::something_static() + self.get_counter()
  }
}

struct Runner {

  pub fn run<T: Computable>(self, _ val: T) -> u256 {
    return val.compute(val: 1000)
  }

  pub fn run_mut<T: Computable>(self, mut _ val: T) -> u256 {
    return val.compute(val: 1000)
  }

  pub fn run_static<T: Computable>(_ val: T) -> u256 {
    return val.compute(val: 1000)
  }

  pub fn run_mut_static<T: Computable>(mut _ val: T) -> u256 {
    return val.compute(val: 1000)
  }

  pub fn dummy<T: Dummy>(self, _ val: T) {

  }
}

contract Example {
  pub fn run_test(self) {
    let runner: Runner = Runner();
    assert runner.run(Mac()) == 1001
    assert runner.run(Linux(counter: 10)) == 1015

    let mut linux: Linux = Linux(counter: 10);
    let mut mac: Mac = Mac();

    assert runner.run_mut(mac) == 1001
    assert runner.run_mut(linux) == 1015

    assert Runner::run_static(Mac()) == 1001

    assert Runner::run_mut_static(mac) == 1001

    // We are testing that we can satisfy a trait bound where the trait is defined in another module
    runner.dummy(Mac())
  }
}
