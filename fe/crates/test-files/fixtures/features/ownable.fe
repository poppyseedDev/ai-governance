struct OwnershipTransferred {
    #indexed
    pub previousOwner: address
    #indexed
    pub newOwner: address
}

contract Ownable {
    _owner: address

    pub fn __init__(mut self, ctx: Context) {
        self._owner = ctx.msg_sender()
    }

    pub fn owner(self) -> address {
        return self._owner
    }

    pub fn renounceOwnership(mut self, mut ctx: Context) {
        assert ctx.msg_sender() == self._owner
        self._owner = address(0)
        ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner: address(0)))
    }

    pub fn transferOwnership(mut self, mut ctx: Context, newOwner: address) {
        assert ctx.msg_sender() == self._owner
        assert newOwner != address(0)
        self._owner = newOwner
        ctx.emit(OwnershipTransferred(previousOwner: ctx.msg_sender(), newOwner))
    }
}
