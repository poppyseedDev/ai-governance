trait Add {
  fn add(self, other: Self) -> Self;
}

trait Various {
  fn min() -> Self;
  fn max() -> Self;
  fn double(self) -> Self;
}

impl Various for u8 {

  fn min() -> Self {
    return 0
  }

  fn max() -> u8 {
    let x: Self = u8(255)
    return x
  }

  fn double(self) -> Self {
    return self * 2
  }
}

impl Add for u8 {
  fn add(self, _ other: Self) -> u8 {
    return u8(self) + u8(other)
  }
}

struct Point {
  pub x: u256 
  pub y: u256
}

impl Add for Point {
  fn add(self, _ other: Self) -> Point {
    return Point (
      x: self.x + other.x,
      y: self.y + other.y
    )
  }
}


impl Add for Array<u256, 1> {
  fn add(self, _ other: Self) -> Array<u256, 1> {
    return [self[0] + other[0]]
  }
}


contract Example {
  pub fn run_test(self) {
    assert u8::min() == 0
    assert u8::max() == 255
    assert u8(1).double() == 2
    assert u8(1).add(2) == 3

    let p1: Point = Point(x:1, y:2)
    let p2: Point = p1.add(p1)
    assert p2.x == 2
    assert p2.y == 4

    let a1: Array<u256, 1> = [1].add([2])
    assert a1[0] == 3
  }

}

