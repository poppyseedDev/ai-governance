struct MyEvent {
    pub num: u256
    pub nums: Array<u256, 42>
    pub str: String<26>
}

contract Foo {
    num: u256
    nums: Array<u256, 42>
    str: String<26>

    pub fn write_num(mut self, x: u256) {
        self.num = x
    }

    pub fn read_num(self) -> u256 {
        return self.num
    }

    pub fn write_nums(mut self, x: Array<u256, 42>) {
        self.nums = x
    }

    pub fn read_nums(self) -> Array<u256, 42> {
        return self.nums.to_mem()
    }

    pub fn write_str(mut self, x: String<26>) {
        self.str = x
    }

    pub fn read_str(self) -> String<26> {
        return self.str.to_mem()
    }

    pub fn emit_event(self, mut ctx: Context) {
        ctx.emit(MyEvent(num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem()))
    }
}
