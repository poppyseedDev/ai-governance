contract Foo {
    my_array: Array<u8, 3>

    pub fn bar(mut self) -> bool {
        self.set_array()
        tuple_of_primitive()
        tuple_of_structs()
        struct_constructor()
        copies()
        struct_field_copies()
        ternary(true)
        ternary(false)

        return true
    }

    pub fn set_array(mut self) {
        self.my_array = [42; 3]
    }
}


fn tuple_of_primitive() {
    let mut tup_a: (u8, u8) = (1, 2);
    let mut tup_b: (u8, u8) = tup_a
    tup_a.item0 = 5
    assert tup_b.item0 == 1

    let tup_imm: (u8, u8) = (1, 2)
    let mut tup_c: (u8, u8) = tup_imm

    tup_c.item0 = 10
    assert tup_imm.item0 == 1

    tup_c = tup_imm
    assert tup_c.item0 == 1
    tup_c.item0 = 10
    assert tup_c.item0 == 10
    assert tup_imm.item0 == 1
}

fn tuple_of_structs() {
    let mut p: Point = Point(x: 0, y: 0)
    let q: Point = Point(x: 0, y: 0)
    let mut pair: (Point, Point) = (p, q)
    pair.item0.x = 100
    pair.item1.x = 200
    assert p.x == 0
    assert q.x == 0
}

struct Point {
    pub x: u64
    pub y: u64
}
struct Line {
    pub a: Point
    pub b: Point

    pub fn from_origin_to(_ b: Point) -> Line {
        return Line(a: Point(x: 0, y: 0), b)
    }

    pub fn get_a(self) -> Point {
        return self.a
    }
}

fn struct_constructor() {
    let mut a: Point = Point(x: 0, y: 0)
    let mut b: Point = Point(x: 10, y: 10)

    let mut line: Line = Line(a, b)
    a.x = 1
    assert line.a.x == 0

    line.b.x = 100
    assert b.x == 10
}

fn copies() {
    let p: Point = Point(x: 0, y: 0)
    let mut a: Point = p // copy
    a.x = 1
    assert p.x == 0
    assert a.x == 1

    let b: Point = p     // no copy
    a = b                // copy
    assert a.x == 0
    a.x = 2
    assert b.x == 0
    assert a.x == 2

    let mut c: Point = a // copy
    a.x = 3
    assert c.x == 2
    assert a.x == 3

    let m: Line = Line::from_origin_to(b)     // no copy
    let mut n: Line = Line::from_origin_to(b) // copy
}

fn struct_field_copies() {
    let mut line: Line = Line(a: Point(x: 1, y: 1), b: Point(x: 2, y: 2))
    let a1: Point = line.a       // copy
    let a2: Point = line.get_a() // copy

    line.a.x = 100
    assert line.a.x == 100
    assert a1.x == 1
    assert a2.x == 1
}

fn ternary(_ b: bool) {
    let mut p: Point = Point(x: 10, y: 20)
    let mut q: Point = Point(x: 10, y: 20)
    move_rightward(p if b else q)
    if b {
        assert p.x == 11
        assert q.x == 10
    } else {
        assert p.x == 10
        assert q.x == 11
    }
}

fn move_rightward(mut _ p: Point) {
    p.x += 1
}