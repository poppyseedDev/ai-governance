#test
fn test_binary_ops() {
    assert u256(42) + u256(42) == 84
    assert i256(-42) + i256(-42) == -84
    assert i256(-42) + i256(42) == 0
    assert u128(42) + u128(42) == 84
    assert u256(42) - u256(42) == 0
    assert i256(-42) - i256(-42) == 0
    assert i256(-42) - i256(42) == -84
    assert u256(42) * u256(42) == 1764
    assert i256(-42) * i256(-42) == 1764
    assert i256(-42) * i256(42) == -1764
    assert u256(42) / u256(42) == 1
    assert i256(-42) / i256(-42) == 1
    assert i256(-1) / i256(1) == -1
    assert i256(-42) / i256(42) == -1
    assert u256(2) ** 0 == 1
    assert u256(2) ** 4 == 16
    assert i256(-2) ** 3 == -8
    assert u256(5) % u256(2) == 1
    assert u256(5) % u256(3) == 2
    assert u256(5) % u256(5) == 0
    assert i256(5) % i256(2) == 1
    assert i256(5) % i256(3) == 2
    assert i256(5) % i256(5) == 0
    assert u256(12) & u256(25) == 8
    assert u128(12) & u128(25) == 8
    assert u256(12) | u256(25) == 29
    assert u256(12) ^ u256(25) == 21
    assert u8(1) << 8 == 0
    assert i8(-1) << 1 == -2
    assert u256(212) << 0 == 212
    assert u256(212) << 1 == 424
    assert u256(212) >> 0 == 212
    assert u256(212) >> 1 == 106
    assert i256(212) >> 0 == 212
    assert i256(212) >> 1 == 106

    let x: i64 = -1 << 0
    assert x == -1
}