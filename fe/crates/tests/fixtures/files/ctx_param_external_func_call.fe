contract Foo {
    my_num: u256

    pub fn baz(self, ctx: Context) -> u256 {
        return ctx.block_number()
    }

    pub fn bing(mut self, _ new_num: u256) -> u256 {
        self.my_num = new_num
        return self.my_num
    }
}

contract Bar {
    pub fn call_baz(self, ctx: Context, foo_addr: address) -> u256 {
        let foo: Foo = Foo(foo_addr)
        return foo.baz(ctx)
    }

    pub fn call_bing(self, mut ctx: Context) -> u256 {
        let mut foo: Foo = Foo.create(ctx, 0)
        return foo.bing(42)
    }
}

#test
fn test_bar(mut ctx: Context) {
    let bar: Bar = Bar.create(ctx, 0)
    assert bar.call_bing(ctx) == 42

    let foo: Foo = Foo.create(ctx, 0)
    assert bar.call_baz(ctx, foo_addr: address(foo)) == ctx.block_number()
}