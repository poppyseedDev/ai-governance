use std::buf::{
    RawCallBuffer,
    MemoryBufferReader, 
    MemoryBufferWriter,
    MemoryBuffer
}
use std::evm

contract Foo {
    pub unsafe fn __call__() {
        if evm::call_data_load(offset: 0) == 42 {
            let mut buf:MemoryBuffer = MemoryBuffer::new(
                len:32
            )
            let mut writer: MemoryBufferWriter = buf.writer()
            writer.write(value: 26)
            evm::return_mem(buf)
        } else if evm::call_data_load(offset: 0) == 26 {
            revert
        }
    }
}

#test
fn test_raw_call(mut ctx: Context) {
    let foo: Foo = Foo.create(ctx, 0)

    let mut buf: RawCallBuffer = RawCallBuffer::new(
        input_len: 32, 
        output_len: 32
    )
    let mut writer: MemoryBufferWriter = buf.writer()

    writer.write(value: 42)
    assert ctx.raw_call(addr: address(foo), value: 0, buf)
    
    let mut reader: MemoryBufferReader = buf.reader()
    assert reader.read_u256() == 26

    assert not ctx.raw_call(addr: address(foo), value: 0, buf)
}
